Search.setIndex({"docnames": ["index", "reference/api", "reference/api/polars.Array", "reference/api/polars.Binary", "reference/api/polars.Boolean", "reference/api/polars.Categorical", "reference/api/polars.Config.activate_decimals", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.DataType", "reference/api/polars.Date", "reference/api/polars.Datetime", "reference/api/polars.Decimal", "reference/api/polars.Duration", "reference/api/polars.Enum", "reference/api/polars.Float32", "reference/api/polars.Float64", "reference/api/polars.Int16", "reference/api/polars.Int32", "reference/api/polars.Int64", "reference/api/polars.Int8", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.List", "reference/api/polars.Null", "reference/api/polars.Object", "reference/api/polars.SQLContext.execute", "reference/api/polars.SQLContext.register", "reference/api/polars.SQLContext.register_globals", "reference/api/polars.SQLContext.register_many", "reference/api/polars.SQLContext.tables", "reference/api/polars.SQLContext.unregister", "reference/api/polars.String", "reference/api/polars.StringCache", "reference/api/polars.Struct", "reference/api/polars.Time", "reference/api/polars.UInt16", "reference/api/polars.UInt32", "reference/api/polars.UInt64", "reference/api/polars.UInt8", "reference/api/polars.Unknown", "reference/api/polars.Utf8", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.exceptions.ArrowError", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsPanicError", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.read_avro", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.apply", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.find_idx_by_name", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.frame_equal", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.group_by_rolling", "reference/dataframe/api/polars.DataFrame.groupby", "reference/dataframe/api/polars.DataFrame.groupby_dynamic", "reference/dataframe/api/polars.DataFrame.groupby_rolling", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_at_idx", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace", "reference/dataframe/api/polars.DataFrame.replace_at_idx", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shift_and_fill", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.take_every", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.apply", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.set_ordering", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.clip_max", "reference/expressions/api/polars.Expr.clip_min", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumcount", "reference/expressions/api/polars.Expr.cummax", "reference/expressions/api/polars.Expr.cummin", "reference/expressions/api/polars.Expr.cumprod", "reference/expressions/api/polars.Expr.cumsum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.days", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.hours", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.microseconds", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.milliseconds", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.minutes", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.nanoseconds", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.seconds", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.keep_name", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_match", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.lengths", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.take", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map", "reference/expressions/api/polars.Expr.map_alias", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_dict", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.prefix", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_apply", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shift_and_fill", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_match", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_extract", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.lengths", "reference/expressions/api/polars.Expr.str.ljust", "reference/expressions/api/polars.Expr.str.lstrip", "reference/expressions/api/polars.Expr.str.n_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.parse_int", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.rjust", "reference/expressions/api/polars.Expr.str.rstrip", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.suffix", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.take", "reference/expressions/api/polars.Expr.take_every", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.apply", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.cumfold", "reference/expressions/api/polars.cumreduce", "reference/expressions/api/polars.cumsum", "reference/expressions/api/polars.cumsum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fetch", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling", "reference/lazyframe/api/polars.LazyFrame.groupby", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.take_every", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/group_by", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.apply", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.set_ordering", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clip_max", "reference/series/api/polars.Series.clip_min", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cummax", "reference/series/api/polars.Series.cummin", "reference/series/api/polars.Series.cumprod", "reference/series/api/polars.Series.cumsum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.days", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.hours", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.microseconds", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.milliseconds", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.minutes", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.nanoseconds", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.seconds", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.inner_dtype", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_boolean", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_float", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_integer", "reference/series/api/polars.Series.is_last", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_numeric", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_temporal", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.is_utf8", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_match", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.lengths", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.take", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.map_dict", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_apply", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.series_equal", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_at_idx", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shift_and_fill", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_match", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_extract", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.lengths", "reference/series/api/polars.Series.str.ljust", "reference/series/api/polars.Series.str.lstrip", "reference/series/api/polars.Series.str.n_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.parse_int", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.rjust", "reference/series/api/polars.Series.str.rstrip", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.take", "reference/series/api/polars.Series.take_every", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.view", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql", "reference/testing", "reference/utils"], "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Array.rst", "reference/api/polars.Binary.rst", "reference/api/polars.Boolean.rst", "reference/api/polars.Categorical.rst", "reference/api/polars.Config.activate_decimals.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.DataType.rst", "reference/api/polars.Date.rst", "reference/api/polars.Datetime.rst", "reference/api/polars.Decimal.rst", "reference/api/polars.Duration.rst", "reference/api/polars.Enum.rst", "reference/api/polars.Float32.rst", "reference/api/polars.Float64.rst", "reference/api/polars.Int16.rst", "reference/api/polars.Int32.rst", "reference/api/polars.Int64.rst", "reference/api/polars.Int8.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.List.rst", "reference/api/polars.Null.rst", "reference/api/polars.Object.rst", "reference/api/polars.SQLContext.execute.rst", "reference/api/polars.SQLContext.register.rst", "reference/api/polars.SQLContext.register_globals.rst", "reference/api/polars.SQLContext.register_many.rst", "reference/api/polars.SQLContext.tables.rst", "reference/api/polars.SQLContext.unregister.rst", "reference/api/polars.String.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.Struct.rst", "reference/api/polars.Time.rst", "reference/api/polars.UInt16.rst", "reference/api/polars.UInt32.rst", "reference/api/polars.UInt64.rst", "reference/api/polars.UInt8.rst", "reference/api/polars.Unknown.rst", "reference/api/polars.Utf8.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.exceptions.ArrowError.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsPanicError.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.apply.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.find_idx_by_name.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.frame_equal.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.group_by_rolling.rst", "reference/dataframe/api/polars.DataFrame.groupby.rst", "reference/dataframe/api/polars.DataFrame.groupby_dynamic.rst", "reference/dataframe/api/polars.DataFrame.groupby_rolling.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_at_idx.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace.rst", "reference/dataframe/api/polars.DataFrame.replace_at_idx.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shift_and_fill.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.take_every.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.apply.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.apply.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.set_ordering.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.clip_max.rst", "reference/expressions/api/polars.Expr.clip_min.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumcount.rst", "reference/expressions/api/polars.Expr.cummax.rst", "reference/expressions/api/polars.Expr.cummin.rst", "reference/expressions/api/polars.Expr.cumprod.rst", "reference/expressions/api/polars.Expr.cumsum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.days.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.hours.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.microseconds.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.milliseconds.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.minutes.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.seconds.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.keep_name.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_match.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.lengths.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.take.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map.rst", "reference/expressions/api/polars.Expr.map_alias.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_dict.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.prefix.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_apply.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shift_and_fill.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_match.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_extract.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.lengths.rst", "reference/expressions/api/polars.Expr.str.ljust.rst", "reference/expressions/api/polars.Expr.str.lstrip.rst", "reference/expressions/api/polars.Expr.str.n_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.parse_int.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.rjust.rst", "reference/expressions/api/polars.Expr.str.rstrip.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.suffix.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.take.rst", "reference/expressions/api/polars.Expr.take_every.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.apply.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.cumfold.rst", "reference/expressions/api/polars.cumreduce.rst", "reference/expressions/api/polars.cumsum.rst", "reference/expressions/api/polars.cumsum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fetch.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.groupby.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.groupby_rolling.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.shift_and_fill.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.take_every.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.apply.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.apply.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.set_ordering.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clip_max.rst", "reference/series/api/polars.Series.clip_min.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cummax.rst", "reference/series/api/polars.Series.cummin.rst", "reference/series/api/polars.Series.cumprod.rst", "reference/series/api/polars.Series.cumsum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.days.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.hours.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.microseconds.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.milliseconds.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.minutes.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.nanoseconds.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.seconds.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.inner_dtype.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_boolean.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_float.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_integer.rst", "reference/series/api/polars.Series.is_last.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_numeric.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_temporal.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.is_utf8.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_match.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.lengths.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.take.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.map_dict.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_apply.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.series_equal.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_at_idx.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shift_and_fill.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_match.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_extract.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.lengths.rst", "reference/series/api/polars.Series.str.ljust.rst", "reference/series/api/polars.Series.str.lstrip.rst", "reference/series/api/polars.Series.str.n_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.parse_int.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.rjust.rst", "reference/series/api/polars.Series.str.rstrip.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.take.rst", "reference/series/api/polars.Series.take_every.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.view.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql.rst", "reference/testing.rst", "reference/utils.rst"], "titles": ["Index", "Extending the API", "polars.Array", "polars.Binary", "polars.Boolean", "polars.Categorical", "polars.Config.activate_decimals", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.DataFrame.write_avro", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.DataType", "polars.Date", "polars.Datetime", "polars.Decimal", "polars.Duration", "polars.Enum", "polars.Float32", "polars.Float64", "polars.Int16", "polars.Int32", "polars.Int64", "polars.Int8", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.List", "polars.Null", "polars.Object", "polars.SQLContext.execute", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "polars.String", "polars.StringCache", "polars.Struct", "polars.Time", "polars.UInt16", "polars.UInt32", "polars.UInt64", "polars.UInt8", "polars.Unknown", "polars.Utf8", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.disable_string_cache", "polars.enable_string_cache", "polars.exceptions.ArrowError", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.PolarsError", "polars.exceptions.PolarsPanicError", "polars.exceptions.RowsError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.read_avro", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__dataframe__", "polars.DataFrame.apply", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.find_idx_by_name", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.frame_equal", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.group_by_rolling", "polars.DataFrame.groupby", "polars.DataFrame.groupby_dynamic", "polars.DataFrame.groupby_rolling", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_at_idx", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace", "polars.DataFrame.replace_at_idx", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shift_and_fill", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.take_every", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.apply", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.apply", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.reverse", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.starts_with", "polars.Expr.bottom_k", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cat.set_ordering", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.clip_max", "polars.Expr.clip_min", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumcount", "polars.Expr.cummax", "polars.Expr.cummin", "polars.Expr.cumprod", "polars.Expr.cumsum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.days", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.hours", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.microseconds", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.milliseconds", "polars.Expr.dt.minute", "polars.Expr.dt.minutes", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.nanoseconds", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.seconds", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.keep_name", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_match", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.lengths", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.take", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map", "polars.Expr.map_alias", "polars.Expr.map_batches", "polars.Expr.map_dict", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.prefix", "polars.Expr.name.suffix", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.prefix", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_apply", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_mean", "polars.Expr.rolling_median", "polars.Expr.rolling_min", "polars.Expr.rolling_quantile", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_sum", "polars.Expr.rolling_var", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shift_and_fill", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_match", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.find", "polars.Expr.str.json_decode", "polars.Expr.str.json_extract", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.lengths", "polars.Expr.str.ljust", "polars.Expr.str.lstrip", "polars.Expr.str.n_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.parse_int", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.rjust", "polars.Expr.str.rstrip", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.sub", "polars.Expr.suffix", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.take", "polars.Expr.take_every", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.apply", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.coalesce", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.cumfold", "polars.cumreduce", "polars.cumsum", "polars.cumsum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fetch", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.group_by_rolling", "polars.LazyFrame.groupby", "polars.LazyFrame.groupby_dynamic", "polars.LazyFrame.groupby_rolling", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.shift_and_fill", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.take_every", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.apply", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "Attributes", "Descriptive", "GroupBy", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Selectors", "Aggregation", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.apply", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.reverse", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.starts_with", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.set_ordering", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clip_max", "polars.Series.clip_min", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cummax", "polars.Series.cummin", "polars.Series.cumprod", "polars.Series.cumsum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.days", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.hours", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.microseconds", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.milliseconds", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.minutes", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.nanoseconds", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.seconds", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.get_chunks", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.inner_dtype", "polars.Series.interpolate", "polars.Series.is_between", "polars.Series.is_boolean", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first", "polars.Series.is_first_distinct", "polars.Series.is_float", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_integer", "polars.Series.is_last", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_numeric", "polars.Series.is_sorted", "polars.Series.is_temporal", "polars.Series.is_unique", "polars.Series.is_utf8", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_match", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.lengths", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.take", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.map_dict", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_apply", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.series_equal", "polars.Series.set", "polars.Series.set_at_idx", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shift_and_fill", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_match", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.find", "polars.Series.str.json_decode", "polars.Series.str.json_extract", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.lengths", "polars.Series.str.ljust", "polars.Series.str.lstrip", "polars.Series.str.n_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.parse_int", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.rjust", "polars.Series.str.rstrip", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.take", "polars.Series.take_every", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.view", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Plot", "String", "Struct", "Temporal", "SQL", "Testing", "Utils"], "terms": {"api": [0, 108, 138, 156, 211, 287, 301, 537, 742, 777, 877, 1122, 1273], "refer": [0, 40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 164, 301, 304, 420, 423, 535, 581, 629, 662, 663, 664, 668, 777, 803, 889, 1008, 1011, 1142, 1227, 1228, 1229, 1233, 1273, 1277], "input": [0, 81, 87, 110, 118, 119, 159, 167, 187, 190, 211, 215, 224, 230, 241, 242, 245, 249, 252, 264, 274, 275, 279, 301, 309, 362, 442, 466, 529, 535, 536, 537, 546, 570, 585, 617, 658, 659, 660, 661, 692, 694, 696, 697, 699, 702, 704, 705, 706, 714, 718, 727, 728, 735, 736, 737, 740, 741, 742, 744, 748, 756, 759, 761, 767, 777, 789, 793, 804, 815, 818, 841, 845, 846, 847, 849, 853, 858, 864, 865, 869, 889, 948, 1050, 1118, 1119, 1122, 1146, 1172, 1273], "output": [0, 13, 35, 37, 40, 41, 42, 43, 44, 58, 123, 157, 166, 188, 189, 191, 192, 205, 211, 215, 218, 224, 226, 235, 237, 241, 252, 270, 274, 301, 312, 314, 316, 338, 380, 503, 525, 533, 534, 535, 537, 545, 557, 578, 590, 595, 597, 599, 601, 620, 637, 689, 693, 695, 697, 706, 707, 720, 721, 740, 741, 742, 777, 789, 802, 816, 817, 819, 820, 829, 830, 834, 835, 843, 845, 847, 864, 871, 877, 889, 896, 897, 899, 920, 964, 1092, 1122, 1140, 1185, 1202, 1261, 1273], "seri": [0, 1, 2, 16, 30, 51, 72, 73, 82, 83, 84, 85, 89, 90, 91, 107, 109, 112, 114, 141, 143, 144, 148, 168, 177, 180, 183, 185, 188, 193, 196, 197, 198, 200, 202, 204, 212, 213, 214, 215, 219, 220, 231, 232, 233, 235, 239, 251, 252, 256, 259, 262, 263, 280, 301, 315, 316, 327, 351, 358, 359, 361, 416, 445, 448, 451, 455, 456, 464, 468, 471, 472, 475, 477, 478, 479, 491, 498, 500, 523, 525, 531, 533, 535, 537, 581, 582, 583, 584, 585, 586, 588, 590, 591, 592, 598, 606, 609, 651, 662, 663, 664, 668, 672, 679, 680, 688, 697, 699, 703, 711, 712, 715, 716, 720, 721, 723, 724, 729, 731, 735, 736, 739, 740, 741, 742, 750, 752, 753, 756, 759, 764, 765, 768, 777, 789, 812, 816, 843, 870, 889, 1265, 1267, 1269, 1272, 1274, 1277, 1278, 1279, 1280, 1282], "datafram": [0, 1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 135, 136, 137, 141, 142, 145, 146, 154, 299, 300, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 773, 777, 789, 798, 799, 802, 804, 808, 809, 813, 816, 824, 825, 826, 827, 829, 830, 834, 835, 839, 842, 852, 859, 860, 861, 866, 869, 870, 871, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 928, 930, 964, 965, 1004, 1046, 1122, 1140, 1200, 1218, 1219, 1242, 1250, 1251, 1261, 1273, 1281, 1282], "lazyfram": [0, 1, 65, 66, 68, 70, 81, 82, 83, 84, 85, 87, 88, 89, 132, 133, 134, 135, 136, 137, 138, 141, 142, 148, 209, 225, 226, 301, 448, 525, 777, 789, 888, 892, 1281, 1282], "express": [0, 13, 58, 59, 60, 61, 87, 88, 145, 148, 150, 159, 173, 175, 177, 187, 190, 211, 222, 226, 236, 241, 242, 245, 249, 264, 274, 275, 277, 279, 287, 301, 309, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 326, 327, 331, 332, 333, 334, 335, 338, 347, 351, 353, 354, 355, 362, 365, 366, 367, 368, 379, 380, 381, 383, 386, 387, 388, 389, 390, 391, 392, 393, 395, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 442, 444, 445, 447, 448, 452, 454, 455, 457, 458, 459, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 481, 484, 485, 489, 490, 492, 493, 494, 497, 498, 503, 505, 524, 525, 531, 532, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 548, 550, 552, 554, 556, 557, 558, 559, 560, 561, 564, 565, 567, 569, 570, 574, 575, 576, 577, 578, 580, 584, 585, 586, 588, 604, 605, 606, 608, 610, 612, 613, 615, 617, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 633, 635, 636, 637, 645, 646, 651, 652, 653, 654, 666, 675, 676, 679, 681, 682, 685, 686, 688, 689, 691, 692, 693, 694, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 735, 736, 737, 738, 739, 740, 741, 742, 744, 748, 750, 752, 753, 754, 755, 756, 757, 759, 761, 763, 764, 765, 767, 768, 773, 776, 789, 793, 798, 799, 807, 808, 809, 812, 815, 818, 839, 845, 846, 849, 850, 851, 853, 858, 864, 865, 866, 868, 869, 877, 889, 892, 916, 948, 963, 972, 973, 990, 1034, 1050, 1082, 1083, 1086, 1122, 1146, 1166, 1172, 1173, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1198, 1200, 1210, 1211, 1273], "selector": [0, 40, 160, 167, 169, 173, 217, 224, 226, 258, 266, 268, 301, 442, 448, 777, 789, 795, 804, 805, 808, 834, 859, 889], "extend": [0, 110, 272, 301, 445, 777, 789, 898, 1034, 1273], "function": [0, 40, 41, 49, 51, 72, 81, 82, 83, 84, 85, 88, 90, 91, 108, 114, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 137, 138, 141, 142, 143, 144, 146, 156, 157, 164, 172, 180, 211, 217, 225, 226, 230, 260, 261, 265, 268, 269, 281, 287, 301, 312, 316, 379, 380, 417, 439, 440, 441, 462, 525, 533, 534, 535, 537, 557, 570, 574, 578, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 683, 693, 697, 698, 708, 710, 711, 712, 715, 716, 717, 718, 728, 729, 731, 733, 734, 737, 740, 741, 742, 745, 746, 749, 750, 752, 754, 755, 758, 762, 766, 768, 773, 777, 789, 799, 803, 809, 829, 830, 834, 838, 841, 861, 868, 871, 877, 889, 899, 943, 963, 964, 1005, 1027, 1028, 1029, 1030, 1046, 1114, 1122, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1168, 1175, 1180, 1255, 1273, 1282], "data": [0, 1, 6, 15, 23, 24, 26, 33, 36, 37, 38, 39, 40, 41, 42, 45, 46, 58, 59, 60, 61, 65, 72, 73, 81, 82, 84, 87, 88, 89, 91, 96, 97, 104, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 141, 142, 143, 144, 146, 147, 148, 150, 156, 162, 174, 186, 187, 188, 189, 190, 191, 192, 205, 206, 207, 209, 211, 224, 225, 229, 235, 236, 237, 238, 247, 255, 260, 261, 265, 274, 278, 299, 301, 312, 313, 314, 318, 319, 320, 321, 322, 323, 326, 329, 330, 331, 332, 333, 335, 338, 340, 341, 342, 345, 346, 347, 348, 349, 351, 353, 354, 355, 357, 358, 362, 365, 366, 367, 368, 380, 381, 386, 387, 388, 391, 392, 393, 395, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 417, 418, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 444, 455, 457, 458, 459, 462, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 484, 485, 489, 490, 492, 498, 503, 505, 512, 524, 526, 532, 537, 564, 565, 569, 570, 578, 580, 581, 584, 585, 586, 588, 590, 593, 594, 595, 596, 597, 599, 600, 601, 602, 604, 612, 613, 614, 620, 623, 624, 626, 628, 629, 630, 631, 635, 636, 637, 651, 652, 653, 654, 662, 663, 664, 666, 668, 671, 681, 682, 683, 685, 686, 689, 692, 697, 699, 708, 719, 720, 721, 722, 723, 724, 725, 735, 736, 738, 739, 740, 741, 742, 750, 753, 763, 764, 765, 768, 773, 777, 789, 796, 797, 798, 799, 809, 815, 816, 817, 818, 819, 820, 838, 843, 864, 889, 896, 897, 909, 911, 912, 913, 914, 915, 917, 919, 920, 928, 929, 930, 932, 934, 938, 939, 941, 947, 948, 951, 964, 965, 970, 971, 972, 975, 976, 977, 979, 981, 983, 984, 988, 990, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1032, 1033, 1046, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1076, 1077, 1078, 1079, 1081, 1087, 1092, 1094, 1101, 1113, 1115, 1122, 1134, 1140, 1142, 1146, 1147, 1149, 1162, 1164, 1175, 1180, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1200, 1201, 1202, 1216, 1217, 1218, 1219, 1227, 1228, 1229, 1231, 1233, 1236, 1253, 1254, 1255, 1256, 1258, 1263, 1272, 1273, 1281], "type": [0, 1, 2, 3, 4, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 39, 40, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 87, 88, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 127, 128, 129, 132, 133, 134, 136, 140, 141, 142, 143, 144, 147, 148, 157, 180, 186, 188, 189, 191, 192, 193, 206, 207, 211, 235, 255, 263, 266, 277, 301, 312, 314, 318, 319, 320, 321, 322, 323, 326, 331, 332, 333, 335, 338, 347, 351, 353, 354, 355, 357, 358, 359, 362, 365, 366, 367, 368, 380, 381, 386, 388, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 442, 444, 455, 458, 460, 466, 467, 468, 469, 470, 471, 472, 473, 474, 485, 489, 490, 492, 498, 503, 505, 524, 525, 535, 537, 578, 580, 584, 585, 586, 588, 590, 612, 613, 620, 623, 624, 626, 628, 629, 630, 631, 635, 636, 637, 651, 652, 653, 654, 662, 666, 681, 682, 683, 689, 697, 699, 708, 719, 720, 721, 722, 723, 724, 725, 727, 728, 735, 736, 737, 738, 739, 740, 741, 742, 750, 753, 763, 764, 765, 768, 773, 777, 789, 798, 799, 807, 809, 816, 817, 819, 820, 824, 839, 843, 851, 859, 868, 889, 896, 897, 909, 911, 912, 913, 914, 915, 917, 919, 920, 929, 932, 934, 938, 939, 941, 948, 964, 965, 970, 972, 974, 975, 976, 977, 978, 979, 981, 982, 983, 984, 988, 989, 990, 991, 992, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1032, 1044, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1076, 1077, 1078, 1079, 1081, 1087, 1092, 1094, 1113, 1114, 1134, 1140, 1146, 1147, 1149, 1175, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1200, 1201, 1202, 1216, 1217, 1218, 1219, 1227, 1231, 1253, 1254, 1256, 1264, 1273, 1281], "config": [0, 81, 241, 274, 301, 622, 647, 721, 724, 725, 789, 798, 845, 864, 889, 1187, 1212], "except": [0, 141, 194, 208, 210, 253, 301, 727, 789, 825, 889, 892, 1045, 1075, 1244, 1254, 1263, 1273], "test": [0, 6, 120, 121, 123, 129, 789, 821, 828, 889], "util": [0, 114, 731, 789, 809, 889], "sql": [0, 38, 65, 69, 120, 121, 207, 245, 301, 517, 607, 738, 757, 777, 789, 849, 889, 1106, 1172, 1273], "These": [1, 40, 120, 154, 265, 301, 431, 776, 777, 1005, 1019], "allow": [1, 13, 39, 40, 58, 59, 60, 61, 72, 91, 96, 108, 120, 132, 135, 136, 137, 138, 148, 150, 156, 205, 208, 209, 236, 237, 239, 260, 261, 266, 278, 301, 413, 420, 423, 512, 535, 537, 583, 604, 662, 663, 664, 777, 824, 825, 829, 830, 834, 859, 866, 889, 892, 1001, 1008, 1011, 1026, 1101, 1122, 1144, 1164, 1167, 1227, 1228, 1229, 1255, 1273, 1282], "you": [1, 15, 19, 40, 45, 61, 70, 81, 88, 89, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 127, 128, 130, 132, 136, 138, 154, 174, 188, 189, 191, 192, 204, 205, 211, 222, 226, 235, 236, 237, 238, 257, 260, 265, 287, 301, 304, 409, 410, 413, 416, 420, 423, 431, 442, 448, 466, 497, 525, 535, 537, 583, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 622, 636, 647, 711, 720, 725, 729, 742, 750, 753, 768, 777, 799, 805, 816, 817, 819, 820, 821, 828, 843, 851, 877, 889, 892, 997, 998, 1004, 1005, 1008, 1011, 1019, 1033, 1050, 1086, 1122, 1144, 1150, 1187, 1201, 1212, 1229, 1263, 1273, 1277, 1282], "regist": [1, 65, 67, 68, 69, 70, 82, 83, 84, 85, 149, 151, 777, 1281], "custom": [1, 32, 39, 40, 82, 83, 84, 85, 149, 150, 151, 157, 166, 211, 281, 287, 301, 316, 420, 423, 525, 533, 535, 537, 591, 592, 697, 740, 741, 742, 777, 802, 829, 830, 871, 877, 889, 899, 1008, 1011, 1114, 1122, 1151, 1152, 1273, 1282], "dedic": [1, 108, 205, 237, 301], "namespac": [1, 300, 301, 776, 789, 888, 1273, 1282], "underli": [1, 72, 91, 94, 100, 107, 109, 110, 111, 113, 120, 121, 123, 127, 128, 130, 136, 145, 148, 150, 173, 174, 205, 206, 237, 255, 301, 352, 387, 388, 389, 393, 397, 399, 400, 401, 403, 404, 406, 408, 411, 414, 415, 416, 418, 432, 433, 434, 435, 583, 602, 621, 625, 632, 777, 808, 889, 892, 933, 942, 971, 972, 973, 977, 981, 983, 984, 988, 990, 991, 994, 996, 999, 1002, 1003, 1004, 1006, 1020, 1021, 1022, 1023, 1033, 1144, 1162, 1175, 1186, 1190, 1197, 1249, 1254, 1273], "polar": [1, 301, 304, 776, 777, 783, 789, 889, 892, 1273, 1277, 1281], "class": [1, 2, 3, 4, 5, 22, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 99, 145, 146, 238, 301, 764, 773, 777, 783, 789, 889, 1253, 1254, 1273, 1281], "without": [1, 41, 49, 51, 58, 59, 60, 61, 87, 88, 114, 122, 125, 131, 133, 134, 138, 268, 269, 301, 316, 379, 380, 417, 462, 537, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 622, 647, 708, 754, 755, 756, 777, 798, 799, 861, 889, 940, 943, 963, 964, 1005, 1046, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1187, 1212, 1254, 1273], "requir": [1, 39, 40, 45, 61, 81, 112, 120, 121, 141, 142, 143, 144, 159, 164, 236, 261, 264, 301, 348, 439, 440, 441, 526, 537, 609, 662, 663, 664, 686, 753, 777, 793, 853, 858, 889, 930, 1028, 1029, 1030, 1115, 1174, 1227, 1228, 1229, 1254, 1255, 1258, 1273, 1277], "subclass": [1, 301], "mixin": 1, "expr": [1, 81, 82, 83, 84, 85, 173, 175, 207, 208, 222, 226, 236, 241, 242, 274, 275, 301, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 768, 769, 770, 772, 773, 777, 778, 779, 782, 783, 784, 785, 786, 808, 810, 824, 825, 840, 845, 846, 847, 850, 864, 865, 889, 963, 972, 973, 990, 1001, 1019, 1035, 1040, 1082, 1086, 1091, 1107, 1111, 1173, 1186, 1192, 1197, 1220, 1245, 1273], "ar": [1, 15, 16, 22, 25, 35, 37, 39, 40, 58, 59, 60, 61, 70, 72, 81, 88, 89, 90, 91, 98, 106, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 120, 121, 122, 123, 124, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 146, 148, 154, 156, 159, 164, 166, 169, 172, 175, 179, 180, 186, 187, 188, 189, 190, 191, 192, 205, 207, 208, 209, 211, 217, 218, 224, 226, 235, 236, 237, 238, 241, 242, 243, 245, 249, 256, 261, 264, 269, 270, 274, 275, 278, 279, 301, 312, 314, 329, 362, 370, 372, 373, 417, 431, 436, 438, 439, 440, 441, 466, 468, 471, 472, 475, 477, 478, 479, 482, 487, 517, 525, 535, 536, 565, 570, 578, 581, 584, 585, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 611, 614, 616, 617, 631, 633, 634, 635, 642, 643, 644, 666, 671, 677, 693, 694, 696, 702, 704, 705, 706, 707, 710, 714, 718, 720, 721, 723, 724, 744, 748, 756, 759, 761, 764, 765, 767, 769, 770, 772, 776, 777, 778, 779, 782, 783, 784, 785, 786, 789, 793, 798, 799, 802, 805, 809, 810, 815, 816, 817, 818, 819, 820, 821, 824, 825, 828, 830, 834, 835, 839, 841, 843, 845, 846, 848, 849, 853, 858, 861, 864, 865, 866, 869, 889, 892, 896, 897, 911, 940, 948, 957, 958, 1005, 1019, 1025, 1027, 1028, 1029, 1030, 1038, 1043, 1050, 1054, 1058, 1059, 1063, 1064, 1065, 1066, 1073, 1076, 1106, 1114, 1140, 1142, 1146, 1147, 1158, 1172, 1177, 1180, 1196, 1198, 1199, 1207, 1208, 1209, 1229, 1231, 1236, 1243, 1255, 1263, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280, 1282], "all": [1, 9, 13, 18, 22, 25, 30, 35, 37, 39, 40, 46, 58, 67, 81, 87, 99, 107, 110, 112, 113, 118, 119, 122, 123, 124, 126, 129, 130, 132, 135, 136, 145, 146, 150, 154, 160, 166, 169, 176, 194, 200, 202, 204, 205, 206, 207, 209, 210, 215, 217, 221, 222, 229, 236, 237, 238, 242, 248, 252, 253, 258, 260, 266, 268, 269, 270, 275, 277, 301, 313, 315, 338, 350, 368, 379, 384, 385, 386, 442, 447, 453, 460, 463, 465, 468, 472, 478, 479, 481, 485, 496, 497, 503, 521, 525, 534, 535, 553, 556, 557, 558, 559, 560, 561, 568, 576, 581, 585, 587, 592, 609, 615, 617, 623, 624, 630, 631, 633, 634, 635, 640, 645, 646, 650, 656, 657, 658, 659, 676, 694, 711, 712, 713, 714, 717, 718, 720, 727, 729, 734, 735, 738, 752, 759, 760, 761, 767, 777, 783, 789, 795, 798, 799, 802, 805, 807, 809, 811, 824, 829, 830, 834, 839, 846, 851, 852, 859, 861, 865, 866, 868, 889, 892, 920, 963, 965, 968, 969, 970, 1045, 1052, 1070, 1075, 1085, 1086, 1092, 1110, 1114, 1142, 1146, 1152, 1181, 1188, 1189, 1195, 1196, 1198, 1199, 1200, 1205, 1210, 1211, 1215, 1221, 1222, 1223, 1224, 1244, 1273, 1281, 1282], "support": [1, 39, 40, 45, 89, 107, 108, 109, 110, 111, 112, 113, 114, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 137, 145, 150, 154, 205, 206, 207, 208, 212, 214, 219, 237, 238, 248, 249, 251, 257, 261, 301, 518, 570, 585, 615, 617, 647, 651, 773, 777, 783, 824, 825, 852, 853, 889, 892, 1107, 1146, 1181, 1212, 1216, 1255, 1273, 1281], "target": [1, 38, 39, 40, 86, 123, 301, 629, 662, 663, 664, 892, 1194, 1227, 1228, 1229], "thi": [1, 6, 9, 15, 17, 19, 35, 37, 38, 39, 40, 41, 43, 45, 49, 51, 58, 59, 60, 61, 65, 66, 70, 72, 81, 87, 88, 89, 91, 107, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 157, 158, 159, 162, 164, 166, 169, 170, 172, 174, 178, 179, 180, 181, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 200, 202, 203, 204, 205, 207, 208, 209, 211, 212, 214, 216, 217, 218, 219, 221, 222, 224, 227, 228, 229, 232, 233, 235, 236, 237, 238, 239, 241, 242, 245, 246, 248, 250, 251, 254, 255, 257, 260, 261, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 281, 287, 300, 301, 312, 315, 316, 317, 326, 338, 343, 344, 348, 356, 358, 359, 362, 374, 375, 376, 377, 378, 379, 380, 386, 387, 400, 409, 410, 413, 416, 417, 420, 423, 431, 434, 438, 444, 460, 462, 464, 465, 466, 469, 471, 473, 476, 481, 493, 497, 498, 503, 506, 512, 513, 514, 515, 516, 517, 519, 523, 525, 526, 530, 531, 533, 534, 535, 536, 537, 541, 542, 543, 544, 545, 546, 555, 556, 558, 559, 560, 561, 562, 563, 565, 570, 576, 578, 581, 582, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 606, 607, 608, 609, 610, 615, 616, 617, 620, 622, 623, 629, 634, 638, 639, 640, 641, 642, 643, 644, 647, 649, 650, 656, 657, 658, 659, 660, 661, 665, 671, 673, 676, 679, 680, 684, 686, 687, 688, 689, 693, 697, 698, 705, 708, 710, 711, 715, 717, 718, 728, 729, 731, 733, 734, 737, 738, 740, 742, 745, 746, 749, 750, 754, 755, 756, 758, 762, 766, 767, 768, 773, 777, 789, 790, 792, 793, 794, 797, 798, 799, 802, 805, 807, 809, 815, 816, 817, 818, 819, 820, 822, 824, 825, 829, 830, 834, 835, 839, 841, 843, 845, 846, 847, 849, 850, 851, 852, 853, 857, 858, 859, 861, 864, 865, 866, 867, 868, 871, 877, 888, 889, 892, 898, 899, 908, 920, 925, 926, 930, 937, 939, 941, 942, 943, 948, 951, 959, 960, 961, 962, 963, 964, 970, 971, 973, 984, 997, 998, 1001, 1004, 1005, 1008, 1011, 1019, 1022, 1024, 1027, 1032, 1033, 1041, 1042, 1044, 1046, 1051, 1055, 1057, 1058, 1060, 1061, 1067, 1069, 1071, 1072, 1082, 1086, 1087, 1092, 1095, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1112, 1115, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1135, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1181, 1182, 1184, 1185, 1187, 1188, 1194, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1212, 1214, 1215, 1221, 1222, 1223, 1224, 1229, 1230, 1236, 1237, 1239, 1242, 1243, 1245, 1246, 1249, 1251, 1253, 1254, 1255, 1257, 1258, 1260, 1261, 1262, 1263, 1273, 1277, 1281, 1282], "featur": [1, 45, 49, 51, 86, 301], "i": [1, 6, 17, 19, 22, 37, 39, 40, 41, 42, 43, 44, 49, 51, 58, 59, 60, 61, 65, 70, 72, 81, 86, 87, 88, 89, 91, 93, 95, 96, 98, 103, 105, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 153, 154, 158, 159, 162, 166, 169, 171, 172, 174, 177, 181, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 201, 203, 205, 206, 207, 208, 209, 210, 211, 214, 217, 218, 222, 224, 225, 226, 233, 235, 236, 237, 238, 239, 242, 245, 248, 249, 250, 251, 253, 255, 260, 261, 264, 265, 266, 268, 269, 270, 271, 275, 277, 278, 287, 300, 301, 309, 312, 314, 315, 316, 317, 327, 330, 337, 338, 379, 380, 384, 385, 386, 389, 399, 413, 417, 420, 431, 439, 440, 441, 444, 448, 460, 462, 464, 466, 482, 488, 496, 497, 500, 501, 503, 512, 517, 518, 520, 523, 525, 527, 530, 535, 537, 541, 544, 545, 546, 555, 570, 578, 581, 583, 584, 585, 586, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 610, 611, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 629, 630, 631, 632, 635, 636, 640, 642, 643, 644, 645, 647, 650, 651, 654, 656, 657, 658, 659, 662, 663, 664, 666, 668, 671, 689, 690, 693, 695, 698, 703, 705, 706, 707, 708, 709, 710, 711, 712, 715, 716, 720, 721, 723, 724, 729, 733, 734, 735, 736, 738, 739, 742, 745, 746, 749, 750, 753, 754, 755, 756, 758, 762, 764, 765, 766, 767, 768, 773, 777, 792, 793, 797, 798, 799, 802, 805, 807, 809, 812, 815, 816, 817, 818, 819, 820, 823, 824, 825, 827, 829, 830, 834, 835, 839, 843, 846, 847, 849, 851, 852, 853, 854, 858, 859, 861, 862, 865, 868, 871, 877, 889, 892, 896, 897, 898, 899, 912, 919, 920, 940, 943, 948, 951, 963, 964, 965, 968, 969, 970, 973, 983, 1001, 1005, 1008, 1019, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1037, 1043, 1044, 1045, 1046, 1051, 1053, 1060, 1067, 1068, 1069, 1071, 1072, 1073, 1075, 1077, 1085, 1086, 1089, 1090, 1092, 1101, 1106, 1107, 1112, 1114, 1122, 1140, 1142, 1144, 1146, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1170, 1172, 1176, 1177, 1180, 1181, 1184, 1185, 1186, 1187, 1188, 1189, 1194, 1195, 1196, 1197, 1200, 1201, 1205, 1207, 1208, 1209, 1210, 1212, 1215, 1216, 1219, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1231, 1233, 1236, 1244, 1249, 1254, 1255, 1261, 1262, 1263, 1273, 1281, 1282], "primarili": 1, "intend": [1, 141, 142, 143, 144, 671, 941, 1236], "us": [1, 12, 14, 16, 17, 19, 25, 30, 32, 37, 38, 40, 45, 48, 58, 61, 65, 66, 67, 68, 70, 72, 73, 81, 87, 88, 89, 90, 91, 108, 110, 111, 113, 115, 118, 119, 120, 121, 122, 123, 124, 126, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 157, 158, 160, 166, 167, 169, 175, 176, 177, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 205, 206, 208, 211, 212, 214, 217, 219, 221, 222, 224, 225, 226, 235, 236, 237, 238, 239, 241, 242, 246, 249, 250, 251, 257, 258, 259, 260, 261, 265, 266, 268, 269, 270, 271, 274, 275, 276, 277, 279, 287, 301, 304, 310, 312, 314, 316, 317, 327, 352, 353, 359, 363, 364, 379, 384, 385, 392, 394, 398, 402, 405, 407, 412, 416, 417, 419, 420, 423, 431, 434, 436, 439, 440, 441, 442, 447, 448, 462, 465, 466, 482, 497, 512, 520, 525, 527, 535, 536, 537, 540, 570, 578, 581, 583, 586, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 604, 606, 608, 609, 614, 616, 617, 619, 621, 622, 625, 626, 627, 629, 630, 632, 633, 634, 636, 637, 645, 647, 651, 653, 655, 658, 659, 660, 661, 662, 663, 664, 668, 671, 690, 691, 693, 694, 695, 696, 698, 706, 707, 708, 709, 710, 711, 713, 714, 717, 718, 720, 721, 722, 723, 724, 725, 729, 731, 735, 736, 738, 739, 742, 743, 744, 747, 748, 750, 753, 754, 755, 756, 758, 759, 760, 761, 764, 765, 766, 767, 768, 773, 776, 777, 788, 789, 792, 795, 798, 799, 802, 804, 805, 809, 810, 811, 812, 815, 816, 817, 819, 820, 821, 825, 827, 828, 834, 843, 845, 846, 850, 853, 854, 859, 861, 862, 864, 865, 867, 868, 869, 877, 889, 892, 896, 897, 899, 933, 934, 941, 943, 949, 950, 963, 964, 965, 968, 969, 976, 978, 982, 989, 992, 995, 1000, 1004, 1005, 1007, 1008, 1011, 1019, 1022, 1025, 1028, 1029, 1030, 1035, 1036, 1040, 1043, 1046, 1049, 1050, 1051, 1057, 1060, 1067, 1069, 1071, 1073, 1086, 1101, 1114, 1121, 1122, 1140, 1142, 1144, 1147, 1150, 1152, 1164, 1165, 1168, 1170, 1173, 1174, 1180, 1184, 1186, 1187, 1190, 1191, 1194, 1195, 1197, 1198, 1199, 1201, 1202, 1210, 1212, 1216, 1218, 1227, 1228, 1229, 1233, 1236, 1245, 1250, 1252, 1253, 1254, 1255, 1262, 1263, 1273, 1277, 1281, 1282], "librari": [1, 100, 120, 123, 535, 777, 1282], "author": 1, "domain": [1, 630, 1195], "specif": [1, 35, 39, 40, 107, 109, 111, 113, 118, 121, 122, 123, 127, 128, 129, 133, 147, 148, 160, 205, 301, 420, 423, 662, 663, 664, 668, 795, 889, 892, 1008, 1011, 1227, 1228, 1229, 1233, 1273, 1282], "capabl": [1, 40, 301], "which": [1, 11, 15, 25, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 72, 81, 82, 83, 84, 85, 110, 118, 119, 120, 121, 122, 123, 132, 133, 134, 141, 142, 149, 151, 159, 160, 166, 169, 174, 175, 187, 188, 189, 190, 191, 192, 198, 208, 235, 260, 264, 266, 270, 301, 312, 413, 417, 420, 431, 445, 466, 468, 472, 475, 477, 478, 479, 525, 535, 537, 546, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 644, 666, 720, 721, 723, 724, 725, 764, 765, 767, 777, 793, 795, 802, 805, 807, 816, 817, 819, 820, 825, 843, 847, 858, 859, 889, 1001, 1005, 1008, 1019, 1033, 1034, 1050, 1054, 1059, 1063, 1064, 1065, 1066, 1114, 1150, 1168, 1209, 1231, 1254, 1273, 1282], "mai": [1, 39, 41, 49, 51, 58, 59, 60, 61, 87, 88, 89, 107, 109, 110, 111, 113, 118, 120, 122, 124, 127, 128, 133, 134, 135, 136, 138, 141, 143, 166, 172, 174, 188, 208, 211, 235, 246, 261, 268, 269, 270, 301, 316, 379, 380, 386, 387, 400, 413, 417, 420, 423, 431, 442, 462, 500, 523, 525, 535, 537, 545, 578, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 608, 636, 711, 712, 715, 716, 720, 721, 723, 724, 729, 752, 754, 755, 764, 765, 777, 798, 799, 802, 809, 816, 825, 829, 830, 843, 850, 861, 867, 868, 871, 877, 889, 942, 943, 963, 964, 965, 970, 971, 984, 1001, 1005, 1008, 1011, 1019, 1027, 1033, 1046, 1089, 1122, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1173, 1201, 1229, 1254, 1255, 1273, 1282], "exist": [1, 38, 39, 40, 81, 122, 133, 148, 265, 269, 274, 275, 301, 311, 351, 354, 355, 389, 536, 777, 841, 861, 864, 865, 889, 892, 973, 1121, 1273], "belong": [1, 188, 301, 816, 889], "core": [1, 1282], "cannot": [1, 97, 118, 119, 123, 124, 126, 129, 130, 152, 211, 238, 239, 277, 287, 301, 352, 442, 512, 537, 604, 625, 653, 674, 742, 777, 851, 868, 877, 889, 933, 1101, 1122, 1164, 1190, 1218, 1273], "overrid": [1, 40, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 127, 128, 129, 145, 146, 150, 152, 301, 536, 777, 889, 1121, 1273], "str": [1, 7, 8, 10, 11, 14, 15, 17, 20, 21, 22, 25, 26, 32, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 51, 58, 59, 60, 61, 65, 66, 67, 68, 69, 70, 81, 82, 83, 84, 85, 86, 107, 108, 109, 110, 111, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 149, 150, 151, 154, 159, 160, 163, 166, 167, 168, 169, 170, 172, 173, 177, 178, 179, 180, 183, 184, 186, 187, 188, 189, 191, 192, 194, 196, 200, 202, 203, 205, 207, 208, 212, 214, 216, 217, 218, 219, 221, 222, 224, 226, 228, 230, 231, 233, 234, 235, 236, 237, 239, 240, 243, 246, 248, 249, 250, 251, 253, 256, 257, 258, 259, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 309, 310, 311, 333, 338, 351, 353, 354, 355, 358, 369, 380, 383, 390, 413, 416, 417, 420, 423, 431, 442, 444, 448, 450, 454, 455, 458, 464, 466, 491, 492, 501, 502, 503, 518, 522, 525, 534, 537, 545, 547, 548, 550, 557, 558, 559, 560, 561, 567, 570, 574, 576, 578, 584, 585, 587, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 609, 616, 617, 672, 673, 674, 676, 691, 692, 693, 694, 695, 696, 697, 698, 700, 701, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 773, 777, 784, 793, 795, 798, 799, 800, 802, 803, 804, 805, 807, 808, 809, 812, 815, 816, 817, 819, 820, 822, 824, 825, 834, 835, 839, 841, 842, 843, 844, 847, 848, 850, 851, 852, 853, 858, 859, 860, 861, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 895, 915, 920, 938, 939, 964, 965, 974, 1001, 1004, 1005, 1008, 1011, 1019, 1032, 1036, 1080, 1081, 1082, 1092, 1114, 1131, 1132, 1140, 1145, 1146, 1168, 1169, 1237, 1239, 1240, 1250, 1251, 1252, 1261, 1273, 1278, 1281, 1282], "dt": [1, 81, 123, 129, 235, 301, 590, 725, 777, 786, 843, 889, 892, 1280], "attempt": [1, 260, 301], "do": [1, 40, 58, 59, 60, 61, 81, 87, 88, 118, 132, 141, 142, 143, 144, 166, 174, 188, 189, 191, 192, 204, 208, 226, 235, 255, 265, 268, 301, 379, 497, 535, 570, 590, 657, 658, 659, 750, 753, 768, 777, 798, 799, 802, 807, 816, 817, 819, 820, 825, 829, 830, 839, 843, 851, 889, 892, 963, 1033, 1086, 1222, 1223, 1224, 1263, 1273], "so": [1, 120, 121, 132, 152, 186, 188, 189, 191, 192, 226, 235, 301, 327, 337, 466, 501, 525, 537, 590, 647, 657, 658, 659, 777, 816, 817, 819, 820, 843, 889, 919, 1090, 1212, 1222, 1223, 1224], "rais": [1, 20, 21, 25, 39, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 123, 129, 132, 141, 143, 156, 226, 236, 301, 352, 416, 417, 431, 500, 523, 545, 578, 621, 625, 632, 644, 662, 663, 664, 666, 668, 722, 739, 777, 933, 1004, 1005, 1019, 1089, 1112, 1140, 1186, 1190, 1197, 1209, 1227, 1228, 1229, 1231, 1233, 1254, 1263, 1273], "an": [1, 35, 37, 38, 39, 40, 49, 58, 59, 60, 82, 84, 85, 91, 94, 96, 97, 100, 102, 107, 118, 119, 120, 121, 122, 123, 125, 129, 130, 132, 134, 135, 146, 148, 150, 160, 161, 162, 172, 175, 180, 188, 189, 191, 192, 204, 205, 206, 208, 211, 222, 226, 232, 233, 235, 236, 255, 260, 265, 268, 269, 274, 277, 287, 301, 311, 334, 337, 347, 352, 357, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 389, 390, 413, 416, 420, 434, 445, 447, 448, 454, 455, 458, 481, 493, 494, 497, 500, 501, 523, 524, 525, 534, 535, 537, 546, 556, 557, 577, 578, 586, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 621, 625, 630, 632, 633, 662, 663, 664, 666, 668, 679, 685, 693, 699, 703, 720, 721, 723, 724, 726, 728, 731, 735, 736, 737, 738, 739, 750, 752, 753, 756, 759, 764, 765, 767, 768, 773, 777, 789, 795, 796, 797, 802, 807, 809, 812, 816, 817, 819, 820, 825, 830, 839, 843, 851, 861, 864, 866, 868, 877, 889, 892, 916, 919, 929, 933, 938, 947, 949, 950, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 973, 1008, 1022, 1027, 1034, 1060, 1072, 1082, 1083, 1086, 1089, 1090, 1112, 1113, 1122, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1165, 1168, 1186, 1190, 1195, 1197, 1198, 1227, 1228, 1229, 1231, 1233, 1254, 1263, 1273, 1281], "attributeerror": 1, "howev": [1, 110, 120, 172, 211, 260, 301, 1027, 1273], "can": [1, 19, 32, 40, 45, 48, 70, 72, 73, 81, 87, 88, 90, 91, 110, 118, 119, 120, 123, 124, 129, 130, 132, 135, 137, 138, 146, 147, 148, 150, 152, 154, 159, 161, 169, 170, 180, 187, 188, 189, 190, 191, 192, 200, 202, 204, 211, 222, 226, 235, 238, 241, 249, 260, 264, 265, 268, 274, 277, 287, 301, 304, 312, 316, 370, 373, 379, 409, 410, 413, 416, 420, 423, 431, 445, 448, 466, 481, 497, 525, 535, 537, 545, 553, 556, 558, 559, 560, 561, 570, 576, 578, 583, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 606, 609, 611, 614, 617, 622, 635, 647, 657, 658, 659, 662, 676, 702, 729, 731, 735, 736, 742, 767, 773, 776, 777, 788, 793, 798, 799, 805, 807, 809, 816, 817, 819, 820, 843, 845, 847, 853, 858, 864, 867, 868, 889, 892, 899, 963, 964, 997, 998, 1001, 1004, 1005, 1008, 1011, 1019, 1034, 1050, 1086, 1114, 1122, 1127, 1140, 1144, 1146, 1150, 1165, 1168, 1170, 1174, 1177, 1180, 1187, 1188, 1189, 1196, 1200, 1212, 1222, 1223, 1224, 1227, 1229, 1254, 1273, 1277, 1281], "other": [1, 25, 40, 41, 45, 70, 88, 118, 119, 120, 123, 132, 141, 142, 143, 144, 169, 171, 174, 177, 181, 207, 208, 217, 218, 236, 238, 241, 242, 269, 272, 274, 275, 299, 301, 309, 313, 315, 327, 362, 383, 437, 438, 448, 452, 457, 459, 466, 471, 484, 491, 513, 514, 515, 516, 532, 541, 544, 552, 554, 564, 565, 569, 585, 617, 675, 683, 685, 692, 694, 696, 704, 705, 706, 714, 718, 720, 744, 748, 756, 759, 761, 777, 789, 799, 805, 812, 824, 825, 834, 835, 845, 846, 861, 864, 865, 866, 889, 892, 898, 948, 967, 1026, 1033, 1058, 1080, 1102, 1103, 1104, 1105, 1146, 1167, 1256, 1264, 1272, 1273], "onli": [1, 15, 18, 25, 35, 37, 40, 58, 65, 67, 72, 81, 86, 89, 91, 118, 119, 122, 123, 124, 126, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 150, 154, 157, 169, 174, 188, 191, 193, 205, 207, 208, 211, 212, 214, 219, 226, 235, 237, 238, 251, 257, 259, 260, 269, 270, 287, 301, 310, 312, 314, 316, 327, 361, 362, 413, 421, 442, 451, 460, 481, 535, 537, 556, 558, 559, 560, 561, 570, 576, 583, 593, 594, 595, 596, 597, 599, 600, 601, 622, 647, 676, 687, 720, 721, 742, 777, 798, 805, 816, 817, 819, 820, 821, 824, 825, 828, 843, 861, 877, 889, 896, 897, 898, 945, 948, 964, 1001, 1033, 1039, 1044, 1060, 1122, 1140, 1144, 1187, 1212, 1249, 1252, 1273, 1281, 1282], "gener": [1, 120, 121, 139, 145, 146, 147, 148, 150, 156, 164, 226, 239, 258, 260, 265, 301, 512, 604, 610, 699, 720, 723, 735, 736, 738, 753, 764, 765, 777, 889, 1101, 1164, 1176, 1250, 1273, 1282], "userwarn": 1, "pl": [1, 2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 152, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 773, 777, 790, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1170, 1171, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1207, 1208, 1210, 1211, 1212, 1213, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1273, 1277, 1281, 1282], "register_expr_namespac": [1, 82, 84, 85], "greet": 1, "def": [1, 72, 82, 83, 84, 85, 146, 147, 148, 150, 154, 225, 265, 301, 309, 574, 630, 659, 692, 741, 777, 799, 838, 889, 892, 1195, 1282], "__init__": [1, 2, 3, 4, 5, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 71, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 145, 1281], "self": [1, 66, 67, 68, 70, 82, 83, 84, 85, 87, 88, 161, 162, 174, 194, 196, 197, 198, 210, 212, 214, 216, 217, 219, 223, 224, 226, 228, 229, 231, 232, 233, 239, 247, 248, 250, 251, 253, 258, 265, 267, 270, 271, 272, 276, 277, 278, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 350, 356, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 551, 552, 553, 554, 555, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 773, 777, 792, 793, 794, 795, 797, 798, 799, 801, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 839, 840, 841, 842, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 889, 898, 899, 938, 951, 1033, 1037, 1047, 1120, 1121, 1122, 1133, 1137, 1138, 1143, 1146, 1165, 1168, 1170, 1182, 1260, 1264, 1273], "_expr": [1, 83], "hello": [1, 25, 66, 69, 657, 658, 659, 1092, 1222, 1223, 1224], "return": [1, 10, 11, 35, 37, 38, 39, 40, 41, 42, 43, 44, 58, 59, 60, 61, 65, 69, 72, 81, 82, 83, 84, 85, 86, 87, 88, 98, 101, 106, 107, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 136, 147, 157, 159, 161, 164, 165, 168, 170, 172, 173, 174, 175, 176, 179, 180, 182, 183, 186, 187, 188, 190, 191, 194, 196, 203, 204, 205, 206, 207, 209, 210, 211, 213, 215, 220, 221, 222, 224, 225, 226, 230, 235, 236, 237, 238, 239, 252, 253, 254, 260, 261, 264, 265, 266, 270, 274, 275, 282, 284, 286, 287, 290, 295, 301, 312, 314, 318, 319, 320, 321, 322, 323, 326, 327, 331, 332, 333, 335, 337, 338, 347, 351, 353, 354, 355, 356, 365, 366, 367, 368, 369, 380, 381, 386, 388, 391, 392, 393, 395, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 417, 418, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 444, 455, 456, 458, 461, 462, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 485, 486, 489, 490, 492, 498, 500, 501, 502, 503, 505, 506, 512, 522, 523, 524, 531, 536, 546, 548, 553, 574, 578, 580, 584, 585, 586, 588, 604, 605, 611, 612, 613, 620, 621, 623, 624, 626, 628, 629, 630, 631, 632, 635, 636, 637, 638, 639, 641, 642, 643, 648, 649, 651, 652, 653, 654, 666, 671, 678, 680, 681, 682, 684, 685, 687, 688, 689, 692, 693, 697, 699, 700, 701, 702, 703, 708, 710, 719, 720, 721, 722, 723, 724, 725, 728, 731, 733, 735, 736, 737, 738, 739, 740, 741, 742, 750, 753, 756, 759, 762, 763, 764, 765, 767, 768, 777, 793, 796, 798, 799, 801, 802, 806, 807, 809, 814, 816, 817, 819, 820, 821, 824, 827, 828, 830, 838, 839, 841, 843, 847, 851, 856, 857, 858, 859, 864, 865, 872, 874, 876, 880, 885, 889, 896, 897, 898, 906, 907, 909, 910, 911, 912, 913, 914, 915, 917, 919, 920, 929, 932, 934, 937, 940, 943, 947, 964, 965, 970, 972, 975, 976, 977, 979, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1005, 1006, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1026, 1027, 1032, 1033, 1038, 1041, 1043, 1045, 1046, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1081, 1087, 1089, 1090, 1091, 1092, 1094, 1095, 1101, 1111, 1112, 1113, 1120, 1121, 1122, 1127, 1134, 1140, 1146, 1147, 1148, 1149, 1150, 1164, 1166, 1167, 1177, 1185, 1186, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1213, 1214, 1216, 1217, 1218, 1219, 1231, 1236, 1244, 1246, 1255, 1257, 1259, 1260, 1261, 1264, 1273, 1281, 1282], "lit": [1, 311, 351, 466, 481, 556, 632, 711, 715, 729, 750, 753, 768, 777, 1036, 1273], "alia": [1, 17, 80, 81, 83, 85, 188, 210, 226, 235, 267, 274, 277, 301, 309, 313, 351, 353, 354, 355, 356, 369, 370, 371, 372, 373, 380, 382, 386, 387, 389, 390, 391, 392, 393, 395, 396, 397, 400, 401, 404, 406, 408, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 428, 430, 431, 432, 433, 434, 437, 438, 450, 452, 457, 459, 464, 466, 470, 474, 481, 484, 486, 509, 520, 527, 532, 537, 541, 542, 543, 544, 546, 549, 552, 554, 556, 564, 565, 569, 571, 575, 578, 581, 583, 603, 605, 621, 622, 624, 627, 629, 630, 632, 636, 637, 647, 648, 651, 652, 653, 654, 655, 660, 661, 672, 673, 674, 675, 683, 684, 685, 691, 692, 699, 700, 701, 704, 705, 706, 720, 723, 725, 726, 729, 730, 735, 738, 741, 742, 752, 759, 764, 767, 777, 816, 822, 828, 843, 860, 864, 868, 889, 964, 970, 971, 974, 977, 979, 980, 981, 987, 988, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1075, 1140, 1145, 1194, 1195, 1218, 1219, 1273], "hi": 1, "goodby": 1, "say\u014dnara": 1, "bye": 1, "world": [1, 25, 66, 69, 622, 647, 657, 658, 659, 669, 1092, 1187, 1212, 1222, 1223, 1224, 1234], "select": [1, 13, 38, 65, 66, 67, 81, 82, 83, 84, 117, 118, 119, 120, 121, 122, 124, 126, 130, 132, 138, 147, 203, 204, 208, 211, 222, 225, 236, 242, 248, 262, 267, 270, 277, 301, 308, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 335, 340, 341, 342, 345, 346, 347, 348, 349, 350, 351, 354, 355, 356, 358, 360, 361, 365, 366, 367, 368, 379, 381, 382, 383, 384, 385, 387, 389, 390, 400, 409, 410, 413, 416, 424, 425, 426, 427, 428, 429, 430, 431, 434, 436, 439, 440, 441, 442, 443, 444, 445, 449, 451, 453, 456, 460, 462, 463, 464, 465, 467, 468, 472, 480, 481, 482, 483, 485, 497, 498, 525, 528, 529, 530, 531, 535, 537, 538, 539, 540, 551, 553, 555, 556, 562, 563, 567, 568, 569, 572, 573, 577, 579, 580, 581, 582, 583, 584, 586, 587, 588, 592, 598, 602, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 628, 629, 630, 631, 632, 662, 672, 674, 677, 681, 682, 684, 686, 687, 688, 689, 690, 693, 695, 698, 700, 701, 702, 703, 705, 707, 708, 709, 710, 713, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 743, 745, 746, 747, 749, 752, 753, 757, 758, 759, 760, 762, 766, 773, 777, 800, 825, 838, 846, 847, 852, 860, 866, 868, 889, 892, 928, 930, 1004, 1040, 1086, 1165, 1168, 1181, 1200, 1227, 1245, 1273, 1281], "shape": [1, 2, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 62, 65, 66, 67, 69, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 104, 107, 108, 109, 110, 111, 112, 113, 114, 118, 132, 138, 148, 150, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 173, 174, 175, 176, 177, 180, 182, 183, 185, 187, 188, 193, 194, 196, 198, 199, 200, 202, 203, 204, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 250, 251, 252, 253, 256, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 773, 777, 792, 793, 795, 796, 798, 799, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 845, 847, 849, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 898, 900, 901, 902, 903, 904, 905, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 938, 939, 942, 944, 945, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 963, 964, 965, 966, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 987, 988, 990, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1056, 1058, 1059, 1062, 1063, 1064, 1065, 1066, 1070, 1072, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1127, 1134, 1136, 1137, 1138, 1140, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1172, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1185, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1207, 1208, 1210, 1211, 1212, 1213, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1242, 1244, 1247, 1248, 1250, 1251, 1252, 1256, 1257, 1258, 1259, 1260, 1261, 1264, 1273, 1281], "3": [1, 2, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 26, 27, 28, 29, 30, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 123, 129, 132, 138, 140, 141, 142, 143, 144, 147, 148, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 309, 310, 311, 312, 314, 326, 327, 328, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 368, 369, 370, 371, 372, 373, 379, 380, 382, 383, 384, 385, 387, 389, 390, 391, 392, 396, 397, 399, 400, 401, 403, 404, 406, 408, 411, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 431, 432, 434, 435, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 480, 481, 482, 484, 485, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 524, 525, 528, 529, 530, 531, 532, 534, 535, 537, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 567, 568, 570, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 616, 617, 618, 621, 622, 623, 626, 627, 629, 630, 631, 632, 633, 636, 637, 640, 645, 647, 648, 650, 651, 652, 653, 654, 655, 656, 663, 668, 672, 673, 674, 675, 676, 678, 684, 687, 688, 689, 691, 692, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 773, 777, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 898, 900, 902, 903, 904, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 938, 939, 942, 944, 945, 946, 951, 952, 953, 954, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 969, 971, 973, 974, 977, 980, 981, 983, 985, 986, 987, 990, 993, 994, 996, 1002, 1004, 1005, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1017, 1019, 1021, 1022, 1024, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1172, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1187, 1188, 1191, 1192, 1194, 1195, 1196, 1198, 1201, 1202, 1205, 1210, 1212, 1213, 1215, 1216, 1220, 1221, 1228, 1233, 1239, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1273, 1281, 1282], "1": [1, 2, 12, 13, 14, 16, 17, 18, 20, 22, 23, 24, 26, 27, 28, 29, 30, 32, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 61, 62, 65, 66, 67, 68, 69, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 119, 122, 123, 124, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 148, 150, 156, 158, 159, 160, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 331, 332, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 485, 486, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 645, 646, 653, 654, 655, 657, 658, 659, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 699, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 773, 777, 792, 793, 795, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 828, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 850, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 913, 914, 915, 916, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 938, 942, 944, 945, 946, 948, 951, 952, 953, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1074, 1078, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1168, 1170, 1171, 1172, 1173, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1194, 1196, 1197, 1198, 1200, 1201, 1202, 1210, 1218, 1219, 1236, 1239, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1273, 1277, 1281, 1282], "2": [1, 2, 12, 13, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 67, 68, 70, 73, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 121, 132, 138, 139, 140, 141, 142, 143, 144, 147, 148, 150, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 194, 195, 196, 198, 200, 201, 202, 203, 204, 205, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 313, 315, 317, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 360, 361, 362, 367, 368, 369, 370, 371, 372, 373, 379, 380, 382, 383, 386, 388, 389, 390, 391, 392, 393, 395, 399, 403, 408, 409, 410, 413, 414, 415, 416, 417, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 548, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 614, 615, 616, 617, 618, 620, 622, 624, 626, 627, 629, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 653, 654, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 676, 678, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 749, 752, 756, 757, 758, 759, 760, 762, 765, 766, 767, 773, 777, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 824, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 898, 901, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 942, 944, 945, 946, 947, 951, 952, 954, 956, 957, 958, 963, 964, 965, 966, 967, 970, 973, 975, 976, 979, 981, 985, 986, 987, 990, 993, 994, 996, 997, 998, 1003, 1004, 1005, 1009, 1019, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1074, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1172, 1176, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1189, 1194, 1196, 1197, 1198, 1200, 1202, 1210, 1211, 1218, 1219, 1222, 1223, 1224, 1227, 1229, 1230, 1231, 1232, 1234, 1235, 1239, 1242, 1243, 1244, 1247, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1273, 1277, 1281, 1282], "column_0": [1, 211, 265, 301], "register_dataframe_namespac": [1, 83, 84, 85], "split": [1, 40, 82, 206, 301, 653, 654, 1218, 1219], "splitfram": [1, 82], "df": [1, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 40, 41, 42, 43, 44, 45, 62, 65, 66, 82, 83, 107, 108, 109, 110, 111, 112, 113, 114, 119, 120, 121, 132, 146, 148, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 175, 176, 177, 180, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 681, 682, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 756, 757, 758, 759, 760, 761, 762, 765, 766, 767, 773, 777, 816, 843, 847, 860, 861, 874, 877, 885, 889, 892, 928, 930, 1004, 1200, 1211, 1218, 1219, 1251, 1273, 1282], "_df": [1, 82], "by_alternate_row": 1, "list": [1, 2, 18, 39, 40, 48, 65, 69, 73, 81, 82, 84, 87, 88, 107, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 146, 147, 148, 150, 163, 167, 170, 172, 173, 177, 185, 187, 188, 196, 205, 221, 224, 236, 237, 238, 241, 249, 256, 257, 265, 266, 267, 268, 274, 279, 280, 301, 310, 338, 347, 348, 380, 444, 450, 455, 463, 471, 533, 535, 537, 546, 547, 570, 578, 584, 586, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 616, 617, 630, 652, 672, 674, 679, 683, 702, 705, 721, 724, 726, 734, 736, 739, 742, 757, 759, 765, 777, 800, 806, 808, 812, 815, 816, 845, 853, 859, 860, 864, 866, 869, 870, 889, 892, 920, 929, 930, 946, 964, 1027, 1032, 1037, 1040, 1042, 1046, 1047, 1058, 1140, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1166, 1187, 1195, 1212, 1217, 1245, 1253, 1256, 1273, 1282], "with_row_index": [1, 276, 301, 593, 594, 596, 599, 600, 601, 777, 867, 889, 1165, 1273], "name": [1, 23, 27, 29, 36, 37, 38, 40, 43, 58, 66, 67, 68, 69, 70, 73, 82, 83, 84, 85, 89, 95, 107, 109, 110, 111, 112, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 159, 160, 163, 167, 168, 169, 173, 177, 178, 179, 183, 184, 186, 187, 190, 203, 204, 205, 207, 208, 211, 213, 215, 217, 218, 220, 224, 226, 230, 236, 237, 238, 240, 241, 242, 249, 252, 256, 258, 260, 263, 264, 265, 266, 267, 268, 269, 274, 275, 276, 277, 278, 279, 301, 311, 316, 351, 353, 354, 355, 380, 420, 423, 442, 448, 466, 475, 477, 478, 479, 481, 525, 534, 537, 545, 547, 549, 570, 576, 578, 587, 617, 630, 631, 672, 674, 676, 693, 694, 695, 696, 698, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 713, 714, 717, 718, 727, 728, 733, 734, 737, 743, 744, 745, 746, 747, 748, 749, 751, 754, 755, 756, 758, 759, 760, 761, 762, 766, 767, 773, 777, 793, 795, 800, 804, 805, 808, 812, 815, 818, 824, 825, 834, 835, 841, 844, 845, 846, 847, 853, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 889, 892, 895, 947, 964, 1008, 1011, 1038, 1114, 1140, 1145, 1194, 1195, 1196, 1210, 1237, 1240, 1250, 1251, 1255, 1273, 1281, 1282], "n": [1, 17, 18, 22, 30, 37, 44, 48, 50, 58, 67, 68, 82, 83, 84, 85, 116, 118, 119, 132, 157, 161, 174, 182, 188, 194, 205, 206, 210, 211, 237, 238, 239, 245, 246, 250, 253, 254, 257, 259, 271, 284, 295, 301, 317, 356, 379, 382, 387, 389, 396, 422, 434, 445, 448, 456, 461, 486, 495, 502, 512, 513, 517, 520, 522, 525, 527, 571, 574, 584, 599, 601, 604, 607, 608, 614, 619, 636, 637, 645, 653, 654, 657, 658, 664, 678, 680, 684, 685, 690, 692, 707, 709, 720, 721, 722, 723, 724, 725, 731, 733, 750, 753, 754, 755, 758, 762, 766, 768, 777, 796, 798, 814, 816, 821, 828, 849, 850, 854, 856, 857, 862, 874, 885, 889, 892, 937, 947, 963, 966, 971, 973, 980, 1010, 1022, 1033, 1034, 1041, 1045, 1075, 1084, 1091, 1101, 1102, 1106, 1111, 1114, 1136, 1159, 1161, 1164, 1172, 1173, 1180, 1184, 1201, 1202, 1210, 1218, 1219, 1229, 1244, 1246, 1252, 1257, 1262, 1273, 1281, 1282], "filter": [1, 82, 122, 132, 133, 138, 169, 200, 201, 202, 207, 226, 287, 301, 545, 547, 627, 655, 691, 729, 767, 777, 805, 809, 822, 824, 877, 889, 892, 1168, 1273], "col": [1, 17, 37, 40, 58, 81, 82, 83, 84, 111, 113, 132, 146, 148, 177, 187, 188, 201, 203, 209, 211, 222, 225, 226, 235, 236, 241, 249, 267, 268, 274, 279, 301, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 462, 464, 465, 466, 467, 470, 471, 474, 475, 477, 480, 481, 482, 483, 484, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 554, 555, 556, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 665, 666, 667, 669, 670, 671, 672, 673, 674, 675, 677, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 695, 698, 703, 704, 705, 706, 708, 710, 713, 725, 728, 729, 730, 731, 732, 733, 734, 737, 743, 745, 746, 747, 749, 751, 752, 758, 760, 762, 766, 767, 777, 797, 812, 815, 816, 822, 827, 838, 843, 845, 853, 860, 864, 866, 869, 889, 892, 928, 930, 1001, 1004, 1086, 1147, 1165, 1168, 1200, 1227, 1273, 1282], "0": [1, 12, 14, 16, 18, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 40, 45, 49, 61, 62, 65, 70, 81, 82, 83, 85, 89, 91, 108, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 140, 145, 146, 147, 148, 150, 156, 157, 160, 161, 162, 164, 165, 166, 167, 170, 171, 175, 176, 178, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 197, 198, 199, 203, 205, 206, 207, 209, 211, 212, 213, 214, 215, 216, 219, 220, 221, 222, 223, 226, 227, 228, 232, 233, 237, 238, 239, 240, 241, 246, 248, 249, 250, 251, 252, 254, 258, 259, 260, 261, 262, 265, 268, 270, 271, 274, 276, 277, 279, 281, 283, 285, 287, 288, 289, 290, 291, 292, 293, 294, 301, 308, 310, 311, 313, 316, 318, 319, 320, 321, 322, 323, 326, 327, 328, 331, 332, 334, 337, 345, 349, 357, 360, 361, 363, 364, 365, 366, 367, 374, 375, 376, 377, 378, 379, 380, 381, 384, 385, 391, 392, 394, 397, 398, 401, 402, 404, 405, 406, 407, 411, 412, 416, 418, 419, 421, 426, 427, 429, 430, 431, 434, 437, 438, 439, 440, 441, 443, 445, 446, 447, 448, 451, 452, 456, 457, 459, 460, 462, 465, 468, 469, 472, 473, 475, 476, 477, 478, 479, 481, 482, 484, 489, 490, 493, 494, 497, 500, 501, 506, 508, 509, 520, 523, 525, 527, 528, 529, 530, 532, 533, 534, 535, 536, 538, 539, 540, 546, 551, 552, 554, 556, 562, 563, 564, 565, 566, 568, 569, 571, 574, 575, 576, 578, 579, 580, 581, 585, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 608, 609, 611, 612, 613, 614, 618, 619, 623, 624, 629, 630, 632, 634, 638, 639, 640, 641, 644, 649, 650, 656, 662, 664, 675, 676, 677, 679, 680, 681, 682, 683, 685, 690, 691, 693, 697, 699, 700, 701, 702, 703, 704, 705, 707, 709, 711, 715, 717, 718, 720, 722, 726, 729, 735, 736, 738, 740, 742, 745, 746, 751, 752, 757, 763, 764, 765, 766, 767, 768, 773, 777, 795, 796, 797, 801, 802, 804, 806, 810, 811, 814, 815, 816, 817, 818, 819, 820, 823, 824, 827, 829, 830, 833, 837, 839, 840, 844, 845, 850, 851, 853, 854, 857, 862, 864, 866, 867, 868, 869, 871, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 889, 892, 899, 900, 901, 902, 903, 904, 905, 906, 908, 910, 913, 919, 927, 931, 938, 941, 942, 944, 945, 947, 949, 950, 952, 953, 954, 959, 960, 961, 962, 963, 964, 965, 967, 968, 969, 976, 978, 981, 982, 986, 987, 988, 989, 991, 992, 994, 995, 999, 1000, 1004, 1005, 1006, 1007, 1014, 1015, 1017, 1018, 1019, 1022, 1025, 1028, 1029, 1030, 1035, 1039, 1041, 1044, 1046, 1049, 1051, 1054, 1055, 1057, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1069, 1071, 1072, 1073, 1078, 1079, 1082, 1083, 1086, 1089, 1090, 1095, 1097, 1112, 1114, 1117, 1118, 1119, 1120, 1121, 1124, 1125, 1136, 1140, 1141, 1142, 1146, 1150, 1151, 1152, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1164, 1167, 1169, 1173, 1177, 1178, 1179, 1180, 1183, 1184, 1188, 1189, 1194, 1195, 1197, 1199, 1200, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1227, 1229, 1245, 1246, 1247, 1248, 1250, 1255, 1256, 1260, 1262, 1263, 1273, 1282], "drop": [1, 110, 168, 169, 211, 266, 274, 301, 382, 384, 385, 495, 496, 578, 777, 805, 859, 864, 889, 966, 968, 969, 1084, 1085, 1140, 1273], "aaa": [1, 40, 301, 621, 632, 672, 674, 1186, 1197], "bbb": [1, 40, 301, 672, 674, 892], "ccc": [1, 40, 301, 672, 674], "ddd": [1, 40, 301, 672, 674], "eee": [1, 40, 301, 892], "fff": 1, "schema": [1, 19, 33, 36, 38, 39, 65, 82, 83, 84, 89, 102, 103, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 130, 131, 132, 136, 137, 146, 148, 157, 161, 162, 170, 172, 206, 211, 218, 222, 260, 301, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 392, 524, 525, 545, 633, 634, 692, 759, 777, 796, 797, 806, 829, 830, 835, 847, 871, 877, 889, 892, 928, 951, 1198, 1199, 1273], "txt": [1, 17, 132, 621, 632, 1197], "string": [1, 5, 7, 8, 10, 11, 17, 19, 20, 21, 25, 36, 37, 38, 40, 43, 44, 48, 51, 58, 65, 72, 73, 80, 90, 91, 110, 114, 118, 119, 120, 121, 132, 141, 142, 143, 144, 145, 146, 147, 150, 153, 159, 160, 170, 172, 173, 180, 186, 187, 188, 190, 208, 224, 226, 235, 238, 240, 241, 242, 249, 259, 260, 264, 265, 268, 270, 274, 275, 278, 279, 301, 309, 333, 338, 353, 354, 359, 413, 417, 420, 423, 431, 442, 444, 450, 454, 466, 503, 548, 570, 574, 585, 590, 593, 594, 595, 596, 597, 599, 600, 601, 617, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 673, 694, 696, 702, 704, 705, 706, 714, 718, 720, 721, 723, 724, 730, 744, 748, 756, 759, 761, 764, 765, 767, 777, 793, 795, 806, 807, 808, 815, 816, 818, 825, 843, 844, 845, 846, 847, 853, 858, 864, 865, 869, 889, 892, 920, 935, 940, 941, 1001, 1005, 1008, 1011, 1019, 1032, 1050, 1071, 1092, 1146, 1185, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1252, 1273, 1282], "register_lazyframe_namespac": [1, 82, 83, 85], "dtypeoper": [1, 84], "ldf": [1, 84, 869, 870, 873, 875, 878, 879, 880, 881, 882, 883, 884], "_ldf": [1, 84], "upcast_integer_typ": [1, 84], "with_column": [1, 17, 84, 188, 225, 235, 268, 275, 301, 309, 311, 327, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 343, 344, 353, 357, 362, 369, 370, 371, 372, 373, 380, 382, 386, 388, 391, 392, 393, 395, 396, 397, 399, 401, 403, 404, 406, 408, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 432, 433, 435, 437, 438, 446, 447, 452, 457, 459, 460, 465, 466, 470, 471, 474, 475, 477, 478, 479, 481, 484, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 532, 534, 537, 552, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 570, 571, 574, 575, 576, 578, 581, 585, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 603, 607, 621, 622, 624, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 666, 667, 669, 670, 671, 673, 675, 676, 683, 685, 692, 694, 696, 704, 706, 711, 712, 714, 721, 726, 736, 741, 744, 748, 757, 761, 765, 767, 773, 777, 816, 822, 838, 843, 865, 889, 892, 964, 1004, 1140, 1273], "tp": [1, 84], "cast": [1, 39, 83, 84, 107, 141, 142, 143, 144, 180, 188, 189, 191, 192, 225, 235, 274, 301, 315, 372, 373, 387, 420, 423, 434, 569, 574, 583, 590, 633, 634, 635, 671, 677, 683, 706, 757, 777, 816, 817, 819, 820, 838, 843, 864, 889, 892, 941, 943, 957, 958, 971, 1008, 1011, 1022, 1144, 1198, 1199, 1200, 1236, 1243, 1251, 1256, 1273], "int64": [1, 2, 39, 40, 43, 73, 83, 84, 89, 118, 170, 180, 188, 189, 191, 192, 209, 225, 235, 240, 255, 261, 301, 331, 332, 334, 335, 340, 341, 342, 343, 344, 345, 346, 348, 349, 372, 373, 424, 425, 426, 427, 428, 429, 430, 434, 442, 535, 574, 583, 590, 633, 666, 677, 683, 699, 727, 735, 736, 739, 753, 759, 777, 797, 806, 816, 817, 819, 820, 822, 827, 838, 843, 844, 847, 889, 913, 914, 916, 917, 922, 923, 924, 925, 926, 927, 928, 930, 931, 957, 958, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1024, 1026, 1144, 1167, 1231, 1243, 1254, 1255, 1256, 1273], "int8": [1, 73, 84, 180, 301, 347, 372, 373, 393, 397, 406, 408, 415, 418, 432, 433, 524, 677, 750, 753, 768, 777, 929, 957, 958, 966, 977, 981, 994, 996, 1003, 1006, 1020, 1021, 1113, 1148, 1243, 1260, 1273], "int16": [1, 84, 372, 373, 414, 677, 777, 892, 957, 958, 1002, 1243, 1252, 1273], "int32": [1, 84, 89, 107, 110, 123, 147, 148, 188, 189, 191, 192, 206, 235, 301, 336, 337, 339, 357, 388, 400, 401, 403, 404, 411, 435, 590, 683, 753, 777, 816, 817, 819, 820, 843, 889, 892, 915, 918, 919, 921, 972, 984, 988, 990, 991, 999, 1023, 1120, 1256, 1273], "b": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 73, 84, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 123, 156, 158, 159, 161, 162, 163, 165, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 180, 182, 184, 185, 186, 187, 188, 193, 194, 196, 198, 200, 202, 203, 204, 205, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 225, 226, 227, 228, 230, 233, 234, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 253, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 301, 309, 311, 312, 314, 315, 328, 333, 338, 350, 351, 353, 354, 355, 357, 368, 380, 383, 420, 423, 442, 444, 446, 447, 448, 450, 453, 460, 463, 465, 466, 468, 472, 475, 477, 478, 479, 481, 485, 491, 497, 503, 513, 514, 515, 516, 534, 535, 537, 542, 553, 556, 557, 558, 559, 567, 568, 570, 574, 576, 578, 581, 585, 587, 589, 609, 615, 617, 628, 632, 633, 645, 673, 676, 687, 691, 693, 694, 695, 696, 698, 702, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 726, 727, 728, 729, 730, 733, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 754, 755, 758, 759, 760, 761, 762, 766, 777, 792, 793, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 824, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 895, 898, 920, 940, 942, 943, 964, 967, 1008, 1011, 1025, 1026, 1027, 1033, 1036, 1050, 1058, 1071, 1080, 1102, 1103, 1104, 1105, 1140, 1145, 1193, 1197, 1198, 1210, 1239, 1242, 1255, 1259, 1273, 1281], "4": [1, 2, 13, 18, 22, 30, 36, 37, 39, 40, 41, 42, 45, 62, 65, 67, 68, 70, 81, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 123, 132, 150, 156, 158, 159, 160, 161, 162, 165, 169, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 207, 208, 209, 211, 213, 214, 215, 217, 218, 220, 221, 222, 224, 225, 226, 227, 231, 235, 237, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 263, 264, 265, 267, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 283, 284, 285, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 308, 309, 310, 311, 313, 315, 328, 335, 336, 337, 339, 340, 341, 342, 345, 346, 347, 349, 350, 356, 357, 360, 361, 362, 368, 369, 370, 371, 372, 373, 379, 381, 383, 389, 392, 393, 403, 414, 415, 416, 417, 418, 420, 423, 425, 428, 430, 431, 433, 437, 438, 443, 444, 446, 447, 448, 450, 451, 452, 453, 455, 456, 457, 458, 459, 461, 462, 463, 464, 465, 466, 478, 479, 481, 484, 485, 486, 494, 495, 496, 497, 498, 500, 502, 512, 513, 514, 515, 516, 517, 518, 522, 524, 529, 532, 534, 535, 537, 552, 554, 556, 557, 558, 559, 560, 561, 564, 565, 566, 569, 570, 572, 573, 574, 575, 576, 579, 581, 585, 586, 587, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 605, 607, 611, 615, 616, 617, 618, 621, 624, 630, 632, 636, 637, 642, 643, 645, 651, 652, 653, 654, 660, 661, 662, 666, 671, 672, 674, 675, 676, 678, 683, 684, 685, 691, 692, 694, 696, 698, 700, 701, 702, 703, 704, 706, 707, 709, 711, 712, 713, 714, 720, 721, 723, 724, 726, 728, 729, 733, 735, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 773, 777, 792, 793, 795, 796, 797, 798, 799, 801, 805, 807, 808, 809, 810, 811, 813, 814, 815, 816, 821, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 838, 839, 840, 843, 849, 851, 852, 853, 854, 855, 856, 858, 860, 861, 862, 863, 864, 867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 898, 901, 908, 915, 917, 918, 919, 921, 922, 923, 924, 927, 928, 929, 931, 937, 945, 946, 948, 963, 965, 967, 976, 981, 988, 990, 991, 994, 996, 997, 998, 999, 1003, 1004, 1005, 1008, 1011, 1013, 1016, 1018, 1019, 1020, 1021, 1026, 1033, 1035, 1036, 1040, 1041, 1045, 1046, 1049, 1050, 1052, 1058, 1063, 1064, 1065, 1066, 1070, 1083, 1084, 1085, 1086, 1087, 1091, 1096, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1113, 1128, 1131, 1132, 1136, 1137, 1138, 1142, 1146, 1147, 1150, 1155, 1157, 1158, 1159, 1160, 1161, 1164, 1172, 1177, 1180, 1181, 1182, 1186, 1189, 1195, 1197, 1201, 1202, 1207, 1208, 1216, 1218, 1219, 1225, 1226, 1227, 1231, 1236, 1242, 1244, 1252, 1256, 1257, 1264, 1273, 1277, 1282], "c": [1, 15, 36, 37, 39, 41, 42, 45, 67, 68, 70, 82, 84, 89, 108, 110, 112, 114, 123, 132, 146, 156, 159, 160, 161, 162, 163, 165, 167, 168, 169, 170, 171, 173, 177, 180, 184, 185, 186, 187, 188, 194, 196, 198, 206, 207, 209, 212, 214, 216, 217, 219, 221, 222, 223, 224, 226, 227, 228, 230, 233, 234, 236, 239, 240, 241, 248, 249, 250, 251, 253, 255, 258, 259, 260, 261, 262, 264, 268, 269, 271, 272, 274, 279, 283, 284, 285, 288, 289, 291, 294, 295, 301, 309, 311, 312, 314, 316, 333, 350, 380, 448, 466, 481, 491, 503, 534, 537, 556, 557, 568, 570, 574, 578, 609, 653, 662, 687, 694, 696, 698, 704, 706, 707, 708, 709, 711, 712, 714, 728, 729, 730, 733, 734, 737, 738, 741, 743, 744, 745, 746, 747, 748, 749, 758, 760, 761, 762, 766, 773, 777, 793, 795, 796, 797, 798, 799, 800, 801, 804, 805, 806, 807, 808, 809, 812, 815, 816, 824, 827, 834, 837, 839, 841, 842, 844, 845, 851, 852, 853, 858, 861, 864, 866, 869, 873, 874, 875, 878, 879, 881, 884, 885, 889, 892, 942, 964, 1050, 1071, 1080, 1140, 1218, 1227, 1259, 1273], "5": [1, 12, 13, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 36, 37, 39, 41, 42, 45, 68, 70, 81, 82, 84, 85, 89, 107, 110, 111, 112, 113, 114, 116, 118, 119, 132, 140, 141, 143, 148, 160, 161, 162, 166, 173, 174, 175, 176, 180, 182, 183, 185, 186, 187, 188, 194, 195, 198, 199, 201, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 215, 217, 220, 221, 222, 224, 226, 227, 228, 231, 235, 238, 244, 245, 249, 252, 253, 255, 256, 257, 258, 260, 263, 265, 268, 269, 270, 273, 274, 276, 277, 279, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 301, 304, 309, 310, 313, 329, 330, 335, 336, 337, 339, 341, 349, 356, 357, 361, 362, 379, 380, 381, 382, 383, 388, 389, 390, 391, 392, 397, 401, 403, 404, 406, 411, 416, 418, 420, 421, 423, 424, 430, 434, 438, 441, 442, 445, 447, 451, 452, 456, 457, 459, 461, 463, 465, 466, 470, 474, 475, 477, 478, 479, 481, 484, 486, 494, 497, 498, 500, 502, 505, 508, 509, 512, 513, 514, 515, 516, 517, 521, 522, 527, 552, 554, 556, 565, 569, 570, 571, 572, 573, 574, 578, 579, 581, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 605, 611, 617, 624, 632, 635, 636, 637, 666, 675, 678, 684, 685, 698, 703, 704, 705, 707, 709, 711, 712, 713, 714, 720, 725, 726, 727, 728, 729, 733, 735, 737, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 752, 758, 760, 761, 762, 766, 773, 777, 795, 796, 797, 798, 799, 802, 807, 808, 809, 810, 811, 813, 814, 815, 816, 821, 823, 824, 825, 826, 827, 828, 832, 833, 834, 839, 843, 849, 851, 852, 853, 854, 855, 856, 861, 863, 864, 867, 868, 869, 873, 874, 875, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 898, 901, 905, 908, 911, 912, 915, 917, 918, 919, 921, 923, 931, 937, 946, 948, 955, 963, 964, 965, 966, 967, 972, 973, 974, 975, 976, 977, 990, 1004, 1006, 1008, 1009, 1011, 1012, 1018, 1020, 1021, 1022, 1026, 1030, 1033, 1034, 1045, 1046, 1049, 1050, 1056, 1062, 1083, 1086, 1087, 1091, 1094, 1101, 1102, 1103, 1104, 1105, 1106, 1110, 1111, 1120, 1128, 1136, 1137, 1138, 1140, 1141, 1142, 1146, 1147, 1150, 1152, 1153, 1154, 1156, 1157, 1160, 1164, 1177, 1180, 1183, 1189, 1197, 1200, 1201, 1231, 1244, 1257, 1260, 1264, 1273, 1282], "6": [1, 13, 18, 36, 37, 39, 40, 41, 42, 43, 44, 45, 68, 70, 72, 82, 84, 89, 90, 91, 107, 110, 111, 112, 113, 123, 140, 160, 163, 167, 168, 169, 170, 171, 173, 174, 177, 182, 183, 184, 185, 186, 188, 194, 196, 198, 199, 201, 203, 204, 205, 207, 211, 212, 213, 214, 215, 216, 217, 219, 220, 223, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 239, 240, 241, 245, 248, 249, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 267, 268, 270, 271, 272, 274, 276, 277, 284, 294, 295, 301, 304, 309, 313, 335, 336, 337, 339, 350, 357, 372, 373, 383, 389, 393, 408, 413, 414, 415, 426, 427, 429, 432, 433, 436, 438, 446, 447, 453, 456, 461, 463, 465, 486, 487, 488, 498, 513, 514, 515, 516, 520, 537, 565, 569, 577, 580, 581, 582, 586, 588, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 617, 624, 628, 636, 637, 666, 675, 678, 692, 711, 712, 713, 726, 729, 735, 741, 742, 760, 773, 777, 795, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 816, 821, 823, 824, 826, 828, 830, 834, 837, 839, 841, 843, 844, 845, 847, 849, 851, 852, 853, 856, 860, 863, 864, 867, 868, 874, 884, 885, 889, 892, 915, 917, 918, 919, 921, 946, 952, 954, 957, 958, 967, 1001, 1021, 1026, 1046, 1076, 1077, 1087, 1102, 1103, 1104, 1105, 1128, 1139, 1142, 1147, 1149, 1155, 1157, 1159, 1161, 1189, 1193, 1201, 1231, 1243, 1273, 1281, 1282], "7": [1, 21, 32, 36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 82, 84, 89, 160, 163, 164, 166, 167, 168, 170, 171, 173, 177, 182, 184, 188, 194, 196, 199, 207, 212, 214, 216, 218, 219, 223, 226, 228, 230, 233, 235, 236, 238, 239, 240, 241, 245, 248, 250, 251, 252, 253, 259, 260, 261, 262, 268, 270, 271, 272, 301, 309, 313, 336, 337, 339, 346, 373, 388, 389, 393, 403, 414, 416, 417, 431, 433, 443, 456, 461, 465, 486, 513, 514, 515, 516, 569, 581, 586, 590, 600, 617, 632, 665, 678, 711, 712, 723, 729, 734, 741, 742, 760, 777, 795, 800, 802, 804, 806, 808, 812, 814, 816, 821, 823, 824, 828, 835, 837, 840, 841, 843, 844, 845, 849, 856, 889, 892, 905, 918, 919, 921, 928, 972, 973, 977, 984, 990, 1004, 1005, 1019, 1021, 1031, 1072, 1102, 1103, 1104, 1105, 1146, 1147, 1160, 1197, 1230, 1273, 1282], "float32": [1, 15, 37, 58, 84, 160, 180, 259, 260, 301, 739, 795, 889, 892, 1053, 1120, 1273], "lazi": [1, 65, 66, 67, 68, 70, 84, 89, 132, 148, 208, 225, 226, 301, 537, 731, 750, 753, 768, 777, 802, 824, 825, 866, 869, 870, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 889, 892, 1281, 1282], "i16": [1, 84, 393, 414, 433, 609, 777, 892, 1002, 1252, 1273, 1282], "i32": [1, 84, 107, 110, 114, 147, 148, 241, 301, 336, 337, 339, 357, 388, 397, 400, 401, 403, 404, 406, 411, 435, 588, 609, 767, 777, 845, 889, 918, 919, 921, 972, 984, 988, 990, 991, 999, 1023, 1120, 1149, 1273, 1282], "f32": [1, 84, 160, 259, 301, 609, 777, 795, 889, 892, 1120, 1273], "i64": [1, 2, 15, 18, 21, 22, 26, 32, 62, 65, 67, 82, 83, 84, 85, 89, 107, 108, 109, 110, 111, 112, 113, 114, 118, 120, 132, 159, 160, 161, 162, 163, 167, 169, 170, 173, 174, 176, 177, 182, 183, 185, 186, 187, 188, 194, 196, 198, 200, 202, 204, 207, 208, 211, 212, 217, 218, 219, 224, 225, 226, 227, 230, 231, 233, 234, 235, 239, 241, 245, 248, 249, 251, 253, 256, 262, 264, 265, 266, 267, 268, 269, 270, 272, 274, 276, 277, 278, 279, 280, 283, 284, 285, 287, 288, 291, 294, 295, 301, 309, 311, 315, 331, 332, 334, 335, 340, 342, 343, 344, 346, 348, 350, 356, 362, 370, 371, 372, 373, 380, 382, 383, 396, 422, 424, 425, 426, 427, 428, 429, 430, 442, 444, 445, 447, 448, 449, 450, 452, 453, 455, 456, 458, 461, 463, 464, 465, 466, 470, 471, 474, 475, 477, 478, 479, 481, 483, 486, 489, 490, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 531, 534, 535, 537, 552, 553, 554, 556, 557, 558, 559, 560, 561, 566, 570, 571, 574, 575, 576, 577, 578, 581, 582, 583, 585, 586, 587, 588, 589, 590, 604, 606, 607, 609, 610, 611, 615, 616, 617, 645, 646, 666, 671, 672, 674, 675, 676, 677, 678, 684, 685, 686, 688, 691, 699, 704, 706, 711, 712, 713, 714, 725, 726, 727, 728, 729, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 747, 748, 752, 756, 757, 760, 761, 762, 767, 773, 777, 793, 795, 796, 798, 799, 803, 804, 805, 808, 809, 811, 812, 813, 814, 815, 816, 821, 824, 825, 826, 828, 830, 831, 834, 835, 836, 838, 839, 841, 842, 843, 845, 847, 849, 852, 853, 855, 856, 858, 859, 860, 861, 864, 867, 868, 869, 870, 873, 874, 875, 877, 878, 881, 884, 885, 889, 892, 894, 895, 898, 917, 922, 924, 925, 926, 928, 930, 937, 948, 951, 955, 956, 957, 958, 964, 980, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1033, 1034, 1036, 1037, 1040, 1041, 1045, 1047, 1058, 1084, 1085, 1087, 1088, 1089, 1090, 1091, 1093, 1096, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1114, 1115, 1122, 1127, 1140, 1145, 1146, 1147, 1149, 1153, 1156, 1160, 1164, 1165, 1168, 1172, 1176, 1177, 1181, 1182, 1231, 1242, 1244, 1251, 1257, 1258, 1264, 1273, 1281, 1282], "register_series_namespac": [1, 82, 83, 84], "math": [1, 15, 85, 381, 700, 701, 777, 952, 954, 1178, 1247, 1273], "mathshortcut": [1, 85], "": [1, 2, 16, 37, 39, 40, 45, 58, 65, 68, 73, 85, 107, 114, 118, 119, 120, 121, 123, 129, 133, 134, 137, 138, 150, 159, 160, 169, 172, 177, 182, 187, 188, 190, 191, 198, 204, 207, 208, 217, 224, 226, 231, 233, 238, 241, 242, 249, 258, 264, 266, 267, 268, 269, 274, 275, 301, 338, 390, 396, 420, 423, 442, 448, 482, 503, 535, 537, 546, 553, 562, 563, 570, 571, 583, 588, 589, 617, 621, 629, 630, 631, 632, 645, 651, 652, 654, 662, 663, 664, 668, 669, 672, 674, 693, 694, 695, 696, 702, 707, 710, 713, 714, 717, 718, 727, 730, 731, 741, 742, 743, 744, 747, 748, 756, 757, 759, 760, 761, 767, 773, 777, 793, 795, 805, 815, 816, 818, 819, 825, 834, 845, 846, 853, 858, 859, 860, 861, 864, 865, 871, 877, 889, 892, 894, 895, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 977, 979, 980, 983, 985, 986, 990, 991, 993, 997, 998, 1002, 1005, 1006, 1008, 1011, 1019, 1021, 1022, 1023, 1024, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1106, 1107, 1108, 1110, 1111, 1113, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1201, 1202, 1207, 1208, 1210, 1212, 1213, 1216, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1240, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1273, 1277], "_": [1, 81, 85, 226, 258, 261, 301, 338, 503, 622, 630, 636, 637, 647, 652, 653, 942, 1187, 1195, 1201, 1202, 1212, 1218, 1250, 1273], "squar": [1, 85, 287, 482, 618, 777, 877, 1073, 1183, 1273], "cube": [1, 85, 360, 575, 777, 944, 1273], "s2": [1, 72, 90, 91, 143, 144, 180, 301, 946, 967, 1026, 1058, 1072, 1080, 1114, 1128, 1264, 1273], "renam": [1, 110, 118, 119, 157, 178, 181, 189, 190, 191, 192, 197, 232, 241, 242, 254, 274, 275, 279, 281, 301, 311, 316, 374, 375, 376, 377, 378, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 549, 557, 558, 559, 576, 591, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 674, 676, 679, 680, 697, 717, 718, 740, 756, 759, 777, 817, 818, 819, 820, 829, 845, 846, 857, 864, 865, 869, 871, 889, 895, 899, 959, 960, 961, 962, 964, 1055, 1061, 1082, 1095, 1112, 1121, 1140, 1151, 1167, 1169, 1188, 1197, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1240, 1245, 1246, 1251, 1273], "n2": 1, "s3": [1, 39, 122, 133, 134, 137, 138, 301, 1114, 1273], "n3": 1, "8": [1, 16, 36, 37, 39, 41, 42, 43, 44, 45, 57, 58, 65, 70, 71, 78, 81, 82, 84, 85, 89, 140, 146, 148, 160, 163, 164, 166, 167, 168, 169, 170, 171, 173, 177, 182, 184, 186, 194, 196, 204, 207, 211, 212, 214, 216, 219, 228, 230, 233, 236, 238, 239, 240, 241, 245, 248, 250, 251, 253, 259, 260, 261, 262, 268, 271, 272, 274, 301, 313, 315, 328, 336, 337, 339, 370, 373, 379, 389, 456, 462, 465, 495, 497, 506, 513, 514, 515, 516, 554, 569, 575, 586, 587, 592, 609, 615, 617, 638, 641, 642, 643, 662, 692, 698, 707, 709, 712, 714, 726, 728, 733, 734, 737, 741, 742, 743, 744, 745, 746, 747, 748, 749, 758, 761, 762, 766, 777, 795, 800, 802, 804, 805, 806, 808, 812, 814, 821, 824, 828, 830, 839, 841, 844, 845, 849, 856, 864, 889, 892, 918, 919, 921, 954, 963, 984, 1046, 1072, 1084, 1086, 1095, 1102, 1103, 1104, 1105, 1136, 1147, 1150, 1152, 1155, 1157, 1159, 1161, 1203, 1206, 1207, 1208, 1227, 1273, 1282], "9": [1, 14, 36, 37, 39, 40, 41, 42, 45, 65, 70, 81, 89, 140, 164, 166, 180, 189, 194, 199, 211, 235, 237, 238, 241, 252, 253, 268, 272, 274, 294, 301, 309, 313, 315, 328, 336, 337, 339, 343, 344, 370, 373, 381, 389, 448, 456, 465, 471, 481, 495, 511, 519, 556, 569, 580, 586, 590, 592, 598, 600, 611, 615, 630, 665, 673, 705, 711, 712, 734, 765, 777, 802, 817, 821, 823, 828, 843, 845, 856, 864, 884, 889, 892, 913, 914, 918, 919, 921, 925, 926, 965, 977, 988, 991, 999, 1005, 1019, 1020, 1058, 1072, 1084, 1100, 1108, 1147, 1152, 1158, 1160, 1162, 1177, 1195, 1230, 1239, 1273], "27": [1, 85, 294, 373, 408, 415, 432, 777, 884, 1273, 1282], "16": [1, 40, 54, 75, 83, 140, 166, 181, 188, 235, 274, 301, 370, 373, 465, 536, 554, 575, 590, 666, 711, 725, 726, 729, 777, 802, 816, 843, 851, 864, 889, 892, 1005, 1019, 1121, 1136, 1167, 1178, 1231, 1247, 1273], "64": [1, 53, 56, 77, 83, 85, 139, 156, 367, 554, 575, 777, 1136, 1273], "25": [1, 32, 40, 85, 114, 148, 166, 188, 208, 235, 270, 274, 301, 382, 393, 395, 414, 417, 431, 433, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 685, 720, 721, 723, 724, 725, 731, 742, 764, 765, 777, 802, 816, 825, 832, 843, 862, 864, 889, 892, 965, 966, 979, 1005, 1019, 1025, 1046, 1136, 1140, 1273], "125": [1, 40, 85, 301, 309, 777, 1136, 1273], "inner": [2, 62, 147, 207, 269, 301, 338, 347, 383, 503, 524, 584, 683, 777, 824, 847, 861, 889, 920, 929, 967, 1092, 1113, 1256, 1273], "polarsdatatyp": [2, 62, 118, 119, 132, 145, 146, 147, 148, 150, 157, 160, 211, 301, 316, 357, 442, 533, 535, 536, 537, 585, 633, 634, 697, 727, 739, 740, 741, 742, 750, 753, 768, 773, 777, 795, 889, 892, 899, 938, 1121, 1122, 1146, 1198, 1199, 1273], "pythondatatyp": [2, 62], "width": [2, 31, 40, 118, 119, 132, 301, 304, 524, 889, 1113], "int": [2, 15, 17, 18, 19, 22, 30, 31, 37, 38, 40, 45, 49, 58, 61, 67, 70, 83, 110, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 129, 130, 132, 133, 135, 136, 137, 138, 139, 146, 147, 148, 149, 150, 151, 152, 157, 159, 161, 166, 172, 175, 176, 178, 182, 184, 186, 193, 194, 195, 197, 198, 203, 205, 206, 208, 210, 211, 212, 214, 219, 221, 222, 232, 233, 236, 239, 244, 245, 246, 248, 250, 251, 253, 254, 259, 262, 264, 268, 271, 273, 276, 277, 284, 295, 301, 309, 333, 337, 345, 349, 350, 356, 379, 382, 439, 440, 441, 445, 446, 447, 453, 455, 456, 458, 460, 461, 462, 486, 492, 495, 500, 501, 502, 512, 517, 518, 520, 522, 523, 524, 525, 527, 569, 571, 574, 575, 578, 581, 584, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 607, 608, 610, 615, 619, 629, 633, 634, 639, 642, 643, 644, 645, 649, 651, 653, 654, 665, 666, 671, 678, 679, 680, 684, 690, 692, 699, 707, 709, 719, 722, 725, 731, 733, 735, 736, 750, 753, 754, 755, 758, 759, 762, 763, 766, 768, 777, 793, 796, 802, 809, 810, 811, 814, 821, 825, 828, 839, 849, 850, 852, 854, 856, 857, 858, 862, 863, 867, 868, 874, 885, 889, 906, 907, 915, 919, 927, 931, 937, 938, 946, 947, 963, 966, 1027, 1028, 1029, 1030, 1034, 1035, 1036, 1040, 1041, 1044, 1045, 1046, 1072, 1074, 1075, 1081, 1082, 1084, 1089, 1090, 1091, 1101, 1106, 1107, 1111, 1112, 1113, 1114, 1128, 1129, 1131, 1132, 1133, 1135, 1136, 1139, 1140, 1142, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1168, 1169, 1172, 1173, 1176, 1181, 1184, 1194, 1198, 1199, 1204, 1207, 1208, 1209, 1210, 1214, 1216, 1218, 1219, 1230, 1231, 1236, 1243, 1244, 1245, 1246, 1252, 1257, 1262, 1273, 1281, 1282], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1273, 1281], "fix": [2, 15, 51, 123, 146, 148, 434, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 725, 777, 1022, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "length": [2, 62, 89, 118, 119, 132, 146, 186, 188, 189, 191, 192, 235, 248, 301, 304, 379, 417, 431, 518, 525, 546, 585, 588, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 615, 636, 637, 639, 641, 642, 643, 649, 651, 671, 750, 753, 754, 755, 768, 777, 816, 817, 819, 820, 839, 843, 852, 889, 946, 963, 973, 1005, 1019, 1107, 1114, 1133, 1146, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1181, 1201, 1202, 1204, 1206, 1207, 1208, 1214, 1216, 1236, 1273], "paramet": [2, 5, 7, 8, 11, 14, 15, 16, 17, 18, 19, 20, 21, 22, 25, 30, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 58, 59, 60, 61, 62, 65, 66, 67, 68, 70, 73, 81, 82, 83, 84, 85, 87, 88, 89, 91, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 156, 157, 159, 160, 161, 164, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 203, 205, 206, 207, 208, 210, 211, 212, 214, 215, 217, 218, 219, 221, 222, 224, 225, 226, 228, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 279, 281, 284, 287, 293, 295, 301, 309, 311, 312, 313, 314, 315, 316, 326, 333, 334, 337, 338, 344, 348, 350, 351, 352, 353, 354, 355, 356, 357, 359, 362, 363, 364, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 387, 389, 390, 396, 413, 416, 417, 418, 420, 422, 423, 431, 434, 436, 437, 438, 439, 440, 441, 442, 445, 447, 448, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 471, 482, 484, 486, 491, 492, 493, 494, 495, 497, 500, 501, 502, 503, 512, 513, 514, 515, 516, 517, 518, 519, 520, 522, 523, 524, 525, 526, 527, 528, 532, 533, 534, 535, 536, 537, 548, 552, 554, 557, 558, 559, 564, 565, 569, 570, 571, 574, 575, 576, 578, 579, 581, 583, 584, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 635, 639, 640, 642, 643, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 671, 672, 674, 675, 676, 678, 679, 680, 684, 685, 686, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 793, 795, 796, 798, 799, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 828, 829, 830, 834, 835, 838, 839, 840, 841, 843, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 871, 874, 877, 883, 885, 889, 892, 895, 896, 897, 898, 899, 908, 915, 916, 919, 920, 926, 930, 932, 933, 934, 935, 936, 937, 938, 941, 947, 948, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 971, 973, 974, 980, 1001, 1004, 1005, 1006, 1008, 1010, 1011, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1037, 1040, 1041, 1044, 1045, 1046, 1049, 1050, 1060, 1068, 1069, 1073, 1075, 1080, 1081, 1082, 1083, 1084, 1086, 1089, 1090, 1091, 1092, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1112, 1113, 1114, 1115, 1121, 1122, 1136, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1172, 1173, 1176, 1180, 1181, 1182, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1204, 1205, 1207, 1208, 1209, 1210, 1211, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1236, 1237, 1240, 1244, 1245, 1246, 1250, 1251, 1252, 1253, 1254, 1255, 1257, 1258, 1261, 1262, 1263, 1264, 1273, 1281], "The": [2, 25, 38, 39, 40, 45, 61, 62, 65, 69, 72, 73, 81, 86, 87, 91, 107, 109, 110, 111, 113, 116, 118, 119, 120, 121, 123, 127, 128, 130, 132, 136, 137, 138, 141, 142, 143, 144, 152, 166, 168, 169, 170, 173, 174, 177, 186, 187, 188, 191, 193, 199, 205, 208, 211, 218, 224, 235, 236, 237, 238, 241, 242, 260, 267, 270, 274, 275, 277, 278, 279, 287, 301, 311, 350, 351, 352, 353, 380, 384, 385, 393, 408, 413, 414, 417, 420, 431, 432, 442, 445, 448, 453, 460, 496, 500, 523, 535, 536, 537, 570, 578, 581, 584, 585, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 611, 614, 620, 625, 626, 629, 633, 634, 640, 642, 643, 650, 656, 657, 658, 659, 660, 661, 662, 727, 731, 742, 754, 755, 756, 759, 767, 769, 770, 772, 773, 777, 778, 779, 782, 784, 785, 786, 802, 805, 808, 812, 816, 819, 821, 823, 825, 828, 830, 835, 839, 843, 845, 846, 847, 860, 864, 865, 868, 869, 877, 889, 895, 898, 932, 933, 934, 947, 964, 965, 968, 969, 977, 996, 1001, 1002, 1005, 1008, 1019, 1020, 1033, 1034, 1037, 1044, 1085, 1089, 1121, 1122, 1140, 1142, 1146, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1177, 1180, 1185, 1190, 1191, 1198, 1199, 1205, 1207, 1208, 1215, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280, 1282], "datatyp": [2, 37, 43, 58, 62, 79, 107, 109, 110, 111, 113, 115, 123, 125, 127, 128, 131, 136, 150, 170, 173, 180, 240, 301, 357, 442, 609, 683, 727, 739, 777, 789, 806, 808, 844, 847, 889, 899, 938, 941, 965, 1060, 1067, 1069, 1071, 1122, 1174, 1256, 1273], "valu": [2, 5, 9, 15, 16, 17, 18, 22, 33, 35, 37, 40, 43, 58, 62, 63, 65, 69, 72, 79, 81, 89, 91, 110, 112, 118, 119, 120, 121, 123, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 156, 158, 159, 166, 169, 171, 174, 175, 176, 177, 181, 186, 188, 191, 193, 194, 199, 203, 205, 207, 208, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 224, 226, 227, 228, 230, 235, 236, 237, 238, 239, 245, 246, 249, 250, 251, 252, 253, 256, 257, 261, 264, 265, 268, 269, 270, 271, 278, 282, 283, 285, 288, 289, 291, 292, 301, 308, 309, 310, 312, 314, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 348, 349, 350, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 373, 379, 380, 382, 384, 385, 389, 393, 408, 414, 432, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 480, 483, 484, 485, 487, 488, 489, 490, 493, 494, 495, 496, 499, 501, 502, 503, 504, 505, 507, 508, 509, 510, 512, 517, 519, 520, 521, 522, 525, 526, 527, 529, 531, 532, 535, 536, 537, 538, 539, 540, 551, 552, 553, 554, 555, 562, 563, 564, 565, 568, 570, 571, 574, 575, 578, 579, 581, 584, 585, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 606, 607, 608, 611, 612, 613, 614, 616, 617, 618, 620, 621, 623, 624, 625, 626, 627, 629, 632, 633, 634, 635, 642, 643, 645, 646, 648, 651, 653, 654, 655, 671, 673, 675, 677, 679, 680, 681, 682, 684, 685, 686, 687, 688, 689, 692, 693, 695, 698, 704, 706, 708, 710, 711, 712, 713, 714, 715, 716, 717, 718, 728, 729, 734, 735, 736, 737, 739, 743, 744, 745, 746, 747, 748, 749, 752, 753, 754, 755, 760, 761, 767, 777, 792, 793, 802, 805, 810, 811, 812, 816, 819, 822, 823, 824, 825, 831, 832, 833, 834, 836, 837, 840, 841, 843, 847, 849, 850, 853, 854, 855, 858, 861, 862, 872, 873, 875, 876, 878, 879, 881, 882, 889, 892, 894, 896, 897, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 911, 912, 913, 914, 916, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 930, 931, 933, 934, 935, 936, 941, 945, 948, 949, 950, 952, 953, 954, 963, 964, 965, 966, 968, 969, 973, 977, 996, 1002, 1020, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1049, 1050, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1074, 1075, 1076, 1077, 1078, 1079, 1082, 1083, 1084, 1085, 1088, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1101, 1106, 1108, 1109, 1110, 1111, 1115, 1116, 1121, 1123, 1124, 1126, 1127, 1129, 1131, 1132, 1133, 1135, 1136, 1139, 1140, 1141, 1142, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1165, 1166, 1167, 1168, 1169, 1172, 1173, 1177, 1178, 1179, 1180, 1182, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1207, 1208, 1210, 1211, 1213, 1216, 1218, 1219, 1220, 1236, 1239, 1243, 1244, 1245, 1246, 1247, 1248, 1254, 1255, 1256, 1259, 1261, 1263, 1264, 1273, 1282], "within": [2, 62, 141, 142, 143, 144, 187, 188, 189, 190, 191, 192, 193, 208, 235, 270, 301, 460, 581, 590, 617, 777, 816, 817, 819, 820, 825, 843, 889, 1044, 1273, 1281], "each": [2, 37, 40, 58, 62, 81, 119, 120, 136, 141, 142, 143, 144, 146, 165, 177, 186, 187, 188, 189, 190, 191, 192, 206, 208, 211, 224, 235, 239, 267, 269, 270, 278, 279, 282, 284, 286, 287, 295, 301, 380, 417, 431, 448, 469, 470, 473, 474, 502, 505, 506, 512, 522, 530, 537, 578, 581, 589, 595, 597, 599, 601, 604, 610, 617, 630, 636, 637, 638, 641, 653, 654, 699, 702, 706, 735, 736, 759, 767, 777, 798, 801, 812, 816, 817, 819, 820, 825, 839, 843, 860, 861, 869, 871, 872, 874, 876, 877, 885, 889, 946, 964, 1005, 1019, 1055, 1056, 1061, 1062, 1091, 1094, 1095, 1101, 1111, 1140, 1142, 1150, 1164, 1176, 1195, 1201, 1202, 1203, 1206, 1218, 1219, 1242, 1273, 1282], "exampl": [2, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 81, 82, 83, 84, 85, 89, 90, 91, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 123, 129, 132, 133, 134, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 180, 182, 183, 184, 185, 186, 187, 188, 193, 194, 195, 196, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 241, 244, 245, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 373, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 627, 628, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 645, 646, 647, 648, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 773, 777, 789, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 825, 826, 827, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 863, 864, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 894, 895, 896, 897, 898, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 937, 938, 939, 940, 942, 943, 944, 945, 946, 947, 948, 951, 952, 953, 954, 955, 956, 957, 958, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1039, 1040, 1041, 1044, 1045, 1046, 1047, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1097, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1110, 1111, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1145, 1146, 1147, 1148, 1149, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1168, 1170, 1171, 1172, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1207, 1208, 1210, 1211, 1212, 1213, 1216, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1239, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1264, 1273, 1281], "dtype": [2, 15, 40, 48, 72, 73, 84, 90, 91, 107, 109, 111, 113, 114, 118, 119, 120, 121, 127, 128, 129, 132, 145, 146, 147, 148, 150, 156, 160, 188, 189, 191, 192, 208, 235, 259, 260, 261, 268, 277, 301, 316, 357, 358, 372, 373, 434, 442, 455, 491, 500, 523, 531, 533, 535, 536, 537, 583, 584, 590, 593, 594, 595, 596, 597, 599, 600, 601, 609, 633, 634, 662, 677, 679, 683, 688, 697, 699, 727, 731, 735, 736, 738, 739, 740, 741, 742, 750, 753, 759, 768, 777, 795, 816, 817, 819, 820, 825, 843, 868, 889, 892, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 929, 931, 938, 939, 940, 942, 947, 957, 958, 965, 966, 1022, 1026, 1027, 1051, 1053, 1057, 1060, 1067, 1069, 1071, 1076, 1077, 1080, 1089, 1113, 1120, 1121, 1148, 1167, 1174, 1198, 1199, 1227, 1243, 1252, 1254, 1255, 1256, 1260, 1273, 1282], "method": [2, 3, 4, 5, 9, 36, 39, 40, 41, 42, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 62, 63, 64, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 88, 89, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 138, 145, 154, 157, 166, 169, 174, 178, 181, 187, 189, 190, 191, 192, 197, 199, 205, 211, 212, 214, 219, 222, 228, 232, 236, 237, 238, 245, 251, 254, 266, 274, 281, 287, 293, 301, 309, 312, 313, 316, 362, 374, 375, 376, 377, 378, 420, 423, 437, 438, 445, 452, 457, 459, 465, 469, 473, 476, 481, 484, 493, 506, 517, 523, 532, 533, 534, 536, 537, 552, 554, 556, 558, 559, 560, 561, 564, 565, 566, 569, 575, 576, 579, 581, 591, 593, 594, 595, 596, 597, 599, 600, 601, 607, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 658, 659, 660, 661, 665, 671, 675, 676, 679, 680, 685, 687, 692, 707, 742, 751, 769, 770, 772, 773, 777, 778, 779, 782, 783, 784, 785, 786, 789, 799, 802, 803, 805, 817, 818, 819, 820, 823, 829, 840, 849, 857, 859, 864, 871, 877, 883, 889, 898, 899, 941, 948, 959, 960, 961, 962, 965, 1008, 1011, 1033, 1034, 1049, 1055, 1061, 1082, 1095, 1106, 1112, 1121, 1122, 1141, 1142, 1151, 1157, 1167, 1169, 1172, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1230, 1236, 1245, 1246, 1256, 1263, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280], "attribut": [2, 5, 48, 49, 50, 51, 62, 73, 145, 301, 769, 770, 772, 773, 778, 779, 782, 784, 785, 786, 889, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280], "arg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 177, 225, 301, 574, 702, 730, 777, 812, 838, 889, 1122, 1254, 1273], "kwarg": [3, 4, 46, 47, 52, 53, 54, 55, 56, 57, 63, 64, 68, 71, 72, 74, 75, 76, 77, 78, 79, 120, 164, 177, 225, 261, 301, 574, 777, 812, 838, 889, 1255, 1273, 1281], "order": [5, 15, 40, 58, 59, 60, 61, 65, 67, 81, 87, 110, 120, 139, 141, 142, 159, 169, 177, 187, 188, 189, 190, 191, 192, 207, 224, 225, 226, 235, 239, 243, 249, 260, 264, 266, 270, 301, 326, 344, 348, 359, 384, 385, 448, 496, 512, 519, 526, 581, 590, 594, 595, 596, 597, 599, 601, 604, 605, 606, 616, 617, 648, 658, 659, 660, 661, 674, 686, 687, 689, 702, 767, 777, 788, 793, 805, 812, 815, 816, 817, 818, 819, 820, 824, 834, 843, 848, 853, 858, 859, 889, 908, 926, 930, 941, 943, 968, 969, 1037, 1068, 1085, 1101, 1108, 1115, 1142, 1148, 1164, 1166, 1170, 1182, 1213, 1240, 1258, 1259, 1261, 1273, 1282], "categoricalord": [5, 359, 941], "none": [5, 6, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 58, 59, 61, 63, 65, 66, 67, 68, 70, 81, 88, 91, 107, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 154, 157, 161, 165, 166, 169, 175, 176, 186, 188, 189, 191, 192, 193, 199, 203, 207, 208, 209, 211, 212, 214, 217, 219, 222, 223, 226, 235, 236, 239, 245, 246, 248, 249, 251, 256, 258, 261, 265, 266, 267, 268, 269, 270, 282, 286, 301, 312, 314, 315, 316, 328, 329, 330, 337, 338, 350, 362, 368, 369, 370, 373, 380, 384, 385, 392, 413, 416, 417, 431, 438, 439, 440, 441, 442, 445, 446, 447, 453, 460, 462, 465, 466, 475, 477, 478, 479, 485, 487, 488, 496, 501, 503, 505, 512, 513, 514, 515, 516, 518, 525, 533, 535, 536, 537, 545, 548, 550, 555, 565, 566, 567, 568, 571, 578, 581, 582, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 604, 607, 608, 609, 610, 611, 615, 616, 620, 621, 624, 626, 627, 630, 632, 633, 634, 635, 636, 637, 640, 642, 643, 644, 650, 651, 653, 654, 655, 656, 657, 658, 659, 662, 663, 664, 666, 668, 671, 672, 673, 674, 683, 693, 694, 695, 696, 697, 699, 704, 706, 708, 710, 714, 720, 721, 722, 723, 724, 725, 727, 728, 735, 736, 737, 738, 739, 740, 741, 742, 744, 748, 753, 754, 755, 759, 761, 763, 764, 765, 767, 777, 796, 797, 799, 801, 802, 805, 810, 811, 816, 817, 819, 820, 823, 824, 825, 827, 829, 830, 834, 837, 843, 847, 849, 850, 851, 852, 853, 859, 860, 861, 866, 871, 872, 876, 877, 889, 892, 896, 897, 899, 906, 907, 911, 912, 919, 920, 947, 948, 964, 965, 967, 968, 969, 976, 985, 986, 987, 993, 1004, 1005, 1019, 1025, 1028, 1029, 1030, 1034, 1035, 1036, 1044, 1046, 1048, 1049, 1050, 1060, 1065, 1066, 1069, 1072, 1073, 1074, 1076, 1077, 1080, 1085, 1090, 1092, 1094, 1101, 1102, 1103, 1104, 1105, 1107, 1114, 1121, 1122, 1123, 1124, 1125, 1126, 1135, 1140, 1141, 1142, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1164, 1165, 1168, 1169, 1172, 1173, 1176, 1177, 1180, 1181, 1184, 1185, 1186, 1189, 1191, 1192, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1205, 1207, 1208, 1209, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1231, 1233, 1236, 1239, 1251, 1252, 1253, 1255, 1256, 1262, 1273, 1281], "physic": [5, 72, 91, 118, 119, 208, 301, 359, 683, 777, 794, 824, 825, 889, 941, 942, 1256, 1273], "A": [5, 18, 37, 40, 51, 58, 65, 68, 87, 88, 114, 118, 119, 120, 121, 132, 134, 139, 152, 180, 188, 207, 208, 213, 215, 220, 226, 252, 256, 268, 269, 270, 274, 275, 301, 308, 384, 385, 389, 420, 423, 437, 438, 445, 457, 459, 468, 472, 475, 477, 484, 525, 532, 535, 546, 564, 565, 587, 592, 593, 594, 595, 596, 597, 599, 600, 601, 621, 622, 623, 624, 629, 630, 631, 632, 635, 645, 646, 647, 671, 705, 725, 726, 730, 777, 816, 824, 825, 841, 861, 864, 865, 889, 892, 968, 969, 973, 1008, 1011, 1034, 1152, 1153, 1154, 1156, 1159, 1160, 1161, 1186, 1187, 1188, 1189, 1194, 1195, 1196, 1197, 1200, 1210, 1211, 1212, 1236, 1273, 1281], "encod": [5, 51, 71, 118, 119, 132, 258, 301, 352, 454, 625, 673, 777, 933, 1190], "set": [5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 25, 30, 31, 32, 35, 37, 39, 40, 41, 42, 43, 44, 51, 58, 59, 60, 61, 81, 82, 87, 88, 108, 110, 113, 118, 119, 120, 123, 124, 126, 129, 130, 132, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 154, 156, 163, 169, 179, 187, 188, 189, 190, 191, 192, 193, 205, 208, 212, 214, 215, 217, 219, 235, 239, 241, 248, 251, 252, 258, 260, 265, 266, 268, 269, 274, 301, 312, 314, 316, 338, 362, 380, 434, 460, 471, 500, 503, 512, 513, 514, 515, 516, 518, 523, 525, 535, 536, 537, 574, 578, 585, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 604, 610, 614, 615, 620, 640, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 689, 693, 695, 699, 703, 706, 720, 721, 723, 724, 735, 736, 737, 750, 753, 754, 755, 759, 764, 765, 767, 768, 777, 789, 798, 799, 805, 807, 815, 816, 817, 818, 819, 820, 824, 825, 829, 830, 834, 843, 845, 847, 852, 859, 861, 864, 871, 877, 889, 896, 897, 920, 941, 948, 964, 1022, 1038, 1044, 1058, 1089, 1092, 1101, 1102, 1103, 1104, 1105, 1107, 1112, 1114, 1121, 1122, 1140, 1146, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1164, 1165, 1169, 1176, 1180, 1181, 1185, 1205, 1215, 1216, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1233, 1254, 1261, 1273, 1282], "lexic": [5, 359, 892, 941, 943], "appear": [5, 40, 110, 301, 687, 777, 1259, 1273], "default": [5, 9, 12, 14, 15, 19, 32, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 58, 61, 81, 87, 88, 89, 107, 109, 110, 111, 112, 113, 114, 118, 119, 121, 123, 124, 126, 127, 128, 129, 130, 132, 141, 143, 145, 146, 147, 148, 149, 150, 154, 166, 169, 172, 187, 188, 189, 190, 191, 192, 193, 205, 207, 208, 215, 217, 224, 226, 235, 236, 237, 238, 239, 245, 250, 252, 258, 266, 268, 269, 271, 276, 301, 311, 312, 314, 338, 359, 380, 416, 417, 431, 436, 438, 439, 440, 441, 460, 500, 503, 512, 517, 518, 520, 523, 525, 527, 528, 536, 545, 562, 563, 565, 571, 578, 581, 585, 590, 593, 594, 595, 596, 597, 599, 600, 601, 604, 607, 610, 619, 620, 629, 640, 644, 650, 651, 656, 657, 658, 659, 662, 663, 664, 666, 668, 689, 690, 693, 695, 699, 703, 706, 707, 709, 720, 721, 722, 723, 724, 728, 731, 735, 736, 737, 739, 750, 753, 758, 759, 764, 765, 766, 768, 777, 798, 799, 802, 805, 807, 815, 816, 817, 818, 819, 820, 824, 825, 834, 843, 847, 849, 854, 859, 861, 862, 867, 889, 896, 897, 920, 941, 948, 964, 965, 1004, 1005, 1019, 1025, 1027, 1028, 1029, 1030, 1044, 1089, 1092, 1101, 1106, 1107, 1112, 1114, 1121, 1131, 1132, 1136, 1140, 1142, 1146, 1164, 1172, 1176, 1184, 1185, 1186, 1194, 1197, 1205, 1209, 1215, 1216, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1231, 1233, 1261, 1262, 1273, 1282], "classmethod": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 454, 777, 803, 889], "activ": [6, 12, 13, 23, 24, 26, 27, 28, 29, 33, 34, 497, 630, 1086, 1195], "bool": [6, 12, 13, 14, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 81, 87, 88, 89, 90, 91, 107, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 153, 156, 159, 160, 161, 162, 166, 171, 176, 177, 179, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 215, 224, 226, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 269, 270, 272, 274, 283, 285, 288, 291, 301, 311, 312, 313, 314, 315, 316, 326, 329, 330, 333, 338, 344, 348, 351, 352, 354, 355, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 399, 416, 418, 431, 436, 437, 438, 439, 440, 441, 457, 459, 462, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 482, 484, 487, 488, 492, 497, 500, 503, 512, 519, 523, 526, 532, 533, 535, 537, 541, 542, 543, 544, 545, 548, 564, 565, 567, 569, 572, 573, 578, 581, 583, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 606, 609, 614, 616, 617, 620, 621, 622, 624, 625, 627, 632, 644, 645, 646, 647, 652, 653, 655, 662, 663, 664, 666, 668, 674, 686, 689, 692, 693, 694, 695, 696, 697, 699, 702, 703, 706, 707, 710, 711, 715, 720, 721, 722, 723, 724, 735, 736, 739, 742, 750, 753, 759, 764, 765, 767, 768, 777, 793, 795, 796, 798, 799, 802, 807, 809, 811, 812, 815, 816, 817, 818, 819, 820, 824, 825, 829, 830, 834, 839, 843, 848, 851, 853, 858, 859, 860, 861, 864, 873, 875, 878, 881, 889, 892, 896, 897, 899, 908, 911, 912, 915, 920, 926, 930, 933, 938, 940, 943, 947, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 983, 1004, 1006, 1019, 1025, 1026, 1028, 1029, 1030, 1037, 1043, 1046, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1076, 1077, 1081, 1082, 1086, 1089, 1092, 1101, 1108, 1112, 1115, 1122, 1134, 1137, 1138, 1140, 1142, 1143, 1144, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1167, 1168, 1169, 1170, 1175, 1180, 1182, 1185, 1186, 1187, 1189, 1190, 1192, 1197, 1209, 1210, 1211, 1212, 1217, 1218, 1220, 1227, 1228, 1229, 1231, 1233, 1253, 1254, 1255, 1258, 1261, 1263, 1273, 1281], "true": [6, 12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 65, 67, 69, 87, 88, 89, 107, 108, 112, 114, 116, 118, 119, 120, 122, 123, 124, 126, 129, 130, 132, 133, 135, 137, 138, 141, 142, 143, 144, 145, 146, 148, 149, 150, 154, 156, 159, 160, 161, 162, 166, 171, 176, 180, 181, 185, 186, 187, 188, 189, 190, 191, 192, 198, 200, 201, 202, 205, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 241, 249, 252, 256, 258, 260, 261, 264, 265, 266, 267, 268, 269, 270, 274, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 310, 311, 312, 313, 314, 315, 316, 327, 329, 330, 333, 338, 344, 351, 352, 354, 355, 357, 369, 370, 371, 372, 373, 380, 387, 390, 393, 396, 399, 409, 410, 413, 414, 416, 417, 418, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 455, 457, 458, 459, 462, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 482, 484, 487, 488, 492, 500, 503, 519, 523, 525, 532, 535, 537, 541, 542, 543, 544, 545, 546, 548, 549, 564, 565, 567, 569, 572, 573, 578, 583, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 609, 614, 616, 617, 620, 621, 622, 624, 625, 627, 632, 633, 635, 644, 652, 653, 655, 662, 663, 664, 666, 668, 672, 674, 686, 689, 692, 693, 694, 695, 696, 697, 699, 702, 703, 707, 720, 722, 723, 729, 735, 742, 750, 753, 759, 764, 767, 768, 777, 793, 795, 796, 797, 798, 799, 802, 807, 809, 811, 815, 816, 817, 818, 819, 820, 824, 825, 827, 829, 830, 834, 839, 843, 845, 847, 851, 853, 858, 859, 860, 861, 864, 870, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 892, 896, 897, 899, 909, 911, 912, 915, 920, 926, 933, 938, 940, 943, 946, 947, 964, 970, 971, 974, 977, 979, 980, 981, 983, 987, 988, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1025, 1026, 1028, 1029, 1030, 1037, 1043, 1046, 1050, 1051, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1076, 1077, 1081, 1089, 1092, 1108, 1112, 1122, 1128, 1134, 1137, 1138, 1140, 1144, 1158, 1167, 1180, 1182, 1185, 1186, 1187, 1189, 1190, 1192, 1197, 1198, 1200, 1209, 1217, 1218, 1220, 1227, 1228, 1229, 1231, 1233, 1254, 1255, 1261, 1263, 1264, 1273, 1282], "decim": [6, 14, 15, 16, 32, 33, 37, 40, 58, 260, 301, 602, 665, 777, 889, 1162, 1230, 1273], "temporari": 6, "remov": [6, 9, 92, 118, 119, 132, 156, 167, 212, 214, 219, 251, 258, 301, 316, 431, 442, 534, 557, 640, 650, 656, 657, 658, 659, 660, 661, 727, 777, 804, 889, 941, 964, 1005, 1019, 1140, 1205, 1215, 1221, 1222, 1223, 1224, 1225, 1226, 1229, 1263, 1273], "onc": [6, 68, 118, 119, 123, 152, 211, 237, 239, 279, 301, 512, 535, 537, 604, 660, 661, 777, 794, 869, 889, 1101, 1122, 1164, 1225, 1226, 1273], "stabil": [6, 193, 301, 460, 777, 1044, 1273], "current": [6, 7, 8, 10, 11, 35, 67, 114, 120, 121, 123, 130, 137, 161, 162, 207, 208, 301, 395, 525, 571, 777, 789, 796, 797, 824, 825, 889, 892, 947, 951, 970, 979, 1136, 1273, 1281], "consid": [6, 41, 49, 51, 58, 59, 60, 61, 87, 88, 90, 91, 118, 119, 132, 138, 141, 142, 143, 144, 169, 171, 181, 204, 211, 217, 237, 266, 268, 269, 301, 316, 362, 379, 380, 417, 462, 535, 537, 555, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 711, 729, 754, 755, 773, 777, 798, 799, 805, 821, 828, 834, 859, 861, 877, 889, 940, 943, 948, 963, 964, 1005, 1026, 1046, 1060, 1122, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1167, 1168, 1273], "beta": 6, "cfg": [7, 9, 22, 154], "previous": [7, 8], "save": [7, 8, 11, 188, 208, 235, 270, 301, 386, 395, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 773, 777, 789, 816, 825, 843, 889, 979, 1001, 1005, 1019], "option": [7, 8, 9, 10, 11, 35, 39, 40, 49, 81, 118, 120, 122, 123, 124, 126, 130, 133, 134, 135, 137, 138, 140, 145, 146, 147, 148, 149, 150, 151, 188, 203, 208, 217, 256, 260, 265, 269, 301, 482, 591, 593, 594, 595, 596, 597, 599, 600, 601, 614, 622, 647, 651, 689, 739, 759, 767, 777, 789, 816, 824, 825, 834, 847, 861, 889, 892, 1069, 1073, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1180, 1187, 1212, 1216, 1251, 1261, 1273], "from": [7, 8, 9, 10, 11, 15, 21, 33, 37, 39, 40, 58, 65, 66, 67, 73, 81, 89, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 160, 166, 167, 172, 174, 179, 186, 188, 191, 205, 206, 207, 208, 209, 217, 226, 230, 235, 236, 238, 239, 241, 242, 258, 265, 266, 268, 269, 270, 276, 301, 304, 380, 381, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 442, 454, 465, 482, 512, 525, 537, 562, 563, 565, 571, 574, 578, 580, 590, 592, 593, 594, 596, 599, 600, 601, 604, 617, 629, 630, 633, 634, 644, 657, 658, 659, 660, 661, 662, 663, 664, 668, 687, 700, 701, 704, 719, 720, 721, 722, 723, 724, 725, 753, 763, 764, 765, 773, 776, 777, 795, 802, 803, 804, 809, 816, 819, 824, 825, 834, 841, 843, 845, 846, 859, 861, 866, 867, 889, 892, 964, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1027, 1033, 1069, 1073, 1101, 1114, 1131, 1132, 1133, 1136, 1140, 1152, 1164, 1194, 1195, 1198, 1199, 1209, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1233, 1264, 1273, 1281, 1282], "json": [7, 8, 10, 11, 43, 44, 127, 128, 134, 136, 301, 454, 550, 633, 634, 635, 673, 777, 789, 803, 847, 889, 1198, 1199, 1200, 1239], "produc": [7, 8, 147, 148, 150, 207, 301, 334, 493, 494, 545, 741, 824, 829, 830, 889, 916, 1082, 1083], "load_from_fil": [7, 10, 11], "file": [7, 8, 10, 11, 36, 37, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 301, 550, 803, 847, 889, 1033, 1273], "path": [8, 11, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 301, 550, 606, 635, 777, 803, 847, 851, 889, 1170, 1200, 1273, 1282], "load": [8, 10, 11, 110, 112, 120, 122, 123, 129, 133, 134, 149, 151, 301, 777, 789, 821, 828, 889, 1282], "reset": [9, 154], "state": [9, 100, 711, 715, 789, 807, 809, 839, 851, 889], "note": [9, 15, 25, 39, 40, 65, 69, 70, 72, 81, 88, 90, 91, 107, 108, 109, 111, 113, 114, 118, 120, 121, 122, 123, 127, 128, 130, 133, 134, 138, 141, 143, 146, 148, 150, 152, 154, 156, 159, 164, 166, 175, 188, 189, 191, 192, 193, 203, 204, 205, 207, 208, 211, 222, 225, 226, 235, 236, 237, 238, 245, 257, 260, 261, 264, 265, 269, 270, 274, 276, 277, 301, 362, 372, 373, 384, 385, 390, 409, 410, 413, 417, 431, 460, 466, 475, 477, 481, 497, 500, 517, 523, 525, 537, 555, 556, 558, 559, 560, 561, 576, 585, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 614, 621, 629, 630, 631, 632, 636, 637, 645, 657, 658, 659, 662, 671, 676, 677, 685, 711, 720, 721, 723, 724, 725, 729, 739, 750, 752, 753, 764, 765, 767, 768, 773, 777, 788, 793, 799, 802, 809, 810, 816, 817, 819, 820, 821, 825, 828, 841, 843, 849, 851, 853, 858, 861, 864, 867, 868, 889, 948, 957, 958, 965, 968, 969, 974, 997, 998, 1001, 1005, 1019, 1043, 1044, 1086, 1089, 1106, 1112, 1122, 1146, 1158, 1165, 1168, 1172, 1175, 1180, 1186, 1194, 1195, 1196, 1197, 1201, 1202, 1210, 1222, 1223, 1224, 1227, 1236, 1243, 1254, 1255, 1273, 1277, 1281], "oper": [9, 39, 40, 72, 89, 91, 96, 97, 104, 107, 109, 110, 111, 112, 113, 118, 120, 130, 157, 162, 174, 177, 180, 187, 190, 197, 198, 209, 211, 218, 222, 224, 225, 229, 233, 235, 238, 239, 245, 255, 260, 261, 265, 268, 278, 279, 301, 309, 310, 313, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 437, 438, 452, 457, 459, 481, 484, 512, 513, 514, 515, 516, 517, 525, 532, 549, 552, 554, 555, 556, 558, 559, 564, 565, 566, 569, 575, 576, 583, 590, 604, 607, 675, 676, 685, 692, 693, 695, 705, 706, 710, 726, 767, 777, 789, 797, 802, 809, 815, 818, 821, 824, 828, 834, 835, 843, 849, 869, 889, 951, 955, 956, 957, 958, 959, 960, 961, 962, 963, 1033, 1101, 1102, 1103, 1104, 1105, 1106, 1144, 1164, 1172, 1249, 1253, 1254, 1255, 1263, 1273], "environ": [9, 35, 130, 137, 149, 152], "ani": [9, 37, 39, 40, 41, 45, 48, 49, 51, 58, 59, 60, 61, 86, 87, 88, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 145, 147, 148, 150, 154, 157, 164, 169, 174, 176, 177, 180, 203, 205, 206, 211, 215, 224, 225, 236, 237, 238, 252, 256, 257, 260, 261, 266, 268, 269, 277, 301, 309, 312, 313, 316, 338, 357, 379, 380, 417, 418, 437, 438, 447, 448, 452, 455, 457, 459, 462, 471, 484, 491, 497, 503, 532, 533, 535, 536, 537, 549, 552, 554, 558, 559, 564, 565, 569, 570, 574, 576, 578, 585, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 620, 622, 644, 658, 659, 660, 661, 662, 663, 664, 666, 668, 675, 676, 679, 685, 692, 693, 696, 697, 706, 707, 708, 739, 742, 754, 755, 767, 777, 798, 799, 805, 811, 812, 838, 859, 861, 868, 889, 892, 896, 899, 920, 943, 963, 964, 1005, 1006, 1033, 1036, 1040, 1046, 1058, 1072, 1080, 1086, 1092, 1121, 1122, 1140, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1166, 1169, 1185, 1187, 1209, 1227, 1228, 1229, 1231, 1233, 1245, 1253, 1254, 1255, 1273, 1281, 1282], "local": [9, 39, 120, 122, 133, 134, 137, 150, 301, 431, 572, 573, 777, 940, 942, 975, 976, 1005, 1009, 1019, 1137, 1138, 1273], "non": [9, 37, 39, 40, 49, 58, 81, 112, 139, 165, 189, 192, 206, 217, 235, 241, 242, 245, 265, 269, 274, 275, 301, 362, 368, 369, 466, 525, 536, 571, 585, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 623, 624, 630, 636, 671, 694, 696, 704, 705, 706, 708, 710, 714, 718, 725, 744, 748, 754, 755, 756, 759, 761, 777, 801, 817, 820, 834, 843, 845, 846, 849, 861, 864, 865, 889, 948, 965, 1050, 1114, 1136, 1146, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1172, 1188, 1189, 1195, 1201, 1236, 1254, 1273], "env": [9, 151], "back": [9, 81, 174, 261, 301, 570, 669, 777, 847, 889, 1033, 1234, 1255, 1273], "contain": [10, 37, 38, 39, 40, 58, 81, 86, 109, 112, 114, 120, 121, 122, 133, 134, 141, 142, 147, 159, 169, 188, 191, 206, 222, 226, 264, 269, 282, 301, 312, 314, 316, 338, 354, 355, 471, 503, 536, 537, 620, 627, 629, 631, 632, 635, 654, 655, 671, 693, 695, 706, 710, 742, 777, 793, 805, 816, 819, 839, 858, 861, 872, 876, 889, 892, 896, 897, 920, 964, 1038, 1092, 1121, 1128, 1140, 1185, 1192, 1194, 1196, 1197, 1200, 1219, 1220, 1236, 1249, 1273], "save_to_fil": 10, "json_str": 10, "written": [11, 36, 37, 40, 41, 42, 43, 44, 45, 58, 59, 60, 61, 301, 847, 889], "leav": [11, 217, 301, 525, 834, 889], "directli": [11, 35, 67, 88, 120, 148, 150, 154, 238, 301, 439, 440, 441, 585, 753, 777, 799, 889, 941, 1028, 1029, 1030, 1146, 1273, 1282], "json_fil": 11, "ascii": [12, 25, 622, 636, 637, 639, 647, 649, 671, 1187, 1201, 1202, 1204, 1212, 1214, 1236], "charact": [12, 14, 17, 25, 31, 32, 33, 37, 38, 58, 118, 119, 121, 132, 301, 413, 628, 630, 636, 637, 639, 640, 641, 642, 643, 649, 650, 652, 653, 656, 657, 658, 659, 660, 661, 671, 839, 889, 892, 1001, 1193, 1195, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1214, 1215, 1217, 1218, 1221, 1222, 1223, 1224, 1236], "displai": [12, 15, 16, 17, 18, 22, 24, 28, 30, 40, 166, 186, 301, 802, 889], "tabl": [12, 20, 21, 22, 24, 25, 26, 27, 28, 30, 31, 38, 39, 40, 66, 67, 68, 70, 107, 114, 118, 119, 122, 123, 132, 133, 134, 207, 226, 255, 261, 268, 269, 301, 824, 861, 889, 1281], "outlin": 12, "fals": [12, 13, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 37, 39, 40, 41, 43, 45, 58, 59, 60, 61, 81, 87, 88, 108, 112, 114, 118, 119, 120, 123, 124, 126, 128, 129, 130, 132, 135, 136, 137, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 156, 159, 160, 161, 162, 166, 171, 180, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 200, 201, 202, 205, 207, 208, 209, 214, 215, 221, 222, 224, 226, 227, 235, 236, 237, 238, 239, 243, 247, 249, 252, 256, 258, 260, 261, 264, 265, 266, 269, 270, 272, 274, 283, 285, 288, 289, 291, 294, 301, 312, 313, 314, 316, 326, 329, 330, 333, 338, 344, 348, 351, 354, 355, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 399, 416, 418, 431, 436, 437, 438, 439, 440, 441, 459, 462, 466, 467, 468, 470, 471, 472, 474, 475, 477, 478, 479, 480, 482, 484, 487, 488, 492, 497, 500, 503, 512, 519, 523, 526, 532, 533, 535, 537, 541, 544, 546, 548, 564, 565, 567, 569, 572, 573, 578, 581, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 606, 609, 614, 616, 617, 620, 621, 622, 624, 627, 632, 633, 644, 645, 646, 647, 652, 653, 655, 662, 663, 664, 666, 686, 689, 692, 693, 694, 695, 696, 699, 702, 703, 706, 707, 710, 711, 715, 720, 721, 722, 723, 724, 735, 736, 739, 750, 753, 759, 764, 765, 767, 768, 777, 793, 795, 796, 797, 798, 799, 802, 807, 809, 815, 816, 817, 818, 819, 820, 824, 825, 827, 829, 830, 839, 843, 848, 851, 853, 858, 859, 861, 864, 873, 875, 878, 879, 881, 884, 889, 892, 896, 897, 908, 911, 912, 915, 920, 926, 930, 938, 940, 943, 946, 947, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 983, 1004, 1006, 1019, 1025, 1026, 1028, 1029, 1030, 1037, 1043, 1050, 1051, 1052, 1054, 1056, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1068, 1069, 1070, 1073, 1076, 1077, 1081, 1086, 1089, 1092, 1101, 1108, 1112, 1115, 1128, 1134, 1137, 1138, 1140, 1142, 1143, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1167, 1170, 1175, 1180, 1182, 1185, 1186, 1187, 1189, 1192, 1197, 1198, 1209, 1210, 1211, 1212, 1217, 1218, 1220, 1227, 1228, 1229, 1231, 1254, 1255, 1258, 1261, 1263, 1264, 1273, 1281], "revert": [12, 14, 15], "utf8_full_condens": [12, 25, 114], "format": [12, 16, 20, 21, 25, 37, 40, 41, 42, 58, 117, 118, 119, 120, 132, 138, 173, 186, 205, 217, 237, 238, 257, 299, 301, 417, 420, 423, 548, 662, 663, 664, 668, 725, 808, 834, 847, 889, 1008, 1011, 1227, 1228, 1229, 1233, 1272], "style": [12, 25, 40, 120, 130, 226, 301], "abc": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 309, 630, 645, 658, 777, 892, 1195, 1210], "xyz": [12, 21, 23, 24, 25, 26, 27, 28, 29, 30, 309, 624, 630, 777, 1189, 1195, 1251, 1273], "f64": [12, 14, 15, 16, 20, 23, 24, 26, 27, 28, 29, 30, 32, 62, 65, 81, 83, 85, 89, 108, 110, 138, 148, 160, 161, 162, 164, 166, 167, 170, 175, 176, 180, 185, 186, 187, 188, 198, 199, 207, 208, 213, 214, 215, 216, 220, 226, 227, 228, 248, 249, 250, 252, 271, 274, 279, 283, 285, 288, 289, 290, 291, 293, 294, 301, 308, 311, 318, 319, 320, 321, 322, 323, 341, 345, 349, 357, 360, 361, 365, 366, 367, 379, 380, 381, 384, 385, 418, 436, 437, 438, 439, 440, 441, 442, 443, 446, 447, 451, 452, 457, 459, 465, 475, 477, 478, 479, 481, 482, 484, 497, 508, 509, 520, 527, 528, 529, 530, 532, 538, 539, 540, 551, 554, 556, 562, 563, 564, 565, 571, 575, 578, 579, 580, 581, 585, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 612, 613, 614, 618, 619, 681, 682, 685, 690, 700, 701, 704, 705, 707, 709, 726, 727, 742, 745, 746, 757, 758, 766, 773, 777, 795, 796, 802, 804, 810, 811, 815, 816, 823, 824, 825, 832, 833, 840, 853, 854, 862, 864, 866, 869, 873, 875, 878, 879, 880, 881, 883, 884, 889, 892, 900, 901, 902, 903, 904, 905, 923, 927, 931, 944, 945, 952, 953, 954, 963, 964, 965, 968, 969, 1006, 1028, 1029, 1030, 1031, 1035, 1039, 1046, 1049, 1086, 1097, 1117, 1118, 1119, 1136, 1140, 1142, 1146, 1152, 1154, 1155, 1157, 1158, 1159, 1161, 1162, 1163, 1178, 1179, 1183, 1247, 1248, 1260, 1273, 1282], "multi": [13, 40, 118, 119, 301, 442, 629, 777, 1194], "automat": [13, 67, 70, 107, 109, 110, 111, 113, 114, 118, 119, 120, 121, 123, 127, 128, 132, 136, 148, 150, 152, 241, 274, 301, 535, 536, 585, 657, 658, 659, 777, 845, 864, 889, 1121, 1146, 1222, 1223, 1224, 1273, 1281], "turn": [13, 58, 59, 60, 61, 87, 88, 118, 119, 132, 669, 798, 799, 807, 809, 829, 830, 839, 889, 1234], "struct": [13, 105, 114, 222, 241, 263, 267, 274, 301, 380, 462, 525, 578, 588, 589, 631, 633, 653, 654, 689, 711, 712, 714, 715, 716, 741, 777, 845, 860, 864, 877, 889, 964, 1114, 1140, 1149, 1150, 1196, 1198, 1216, 1218, 1219, 1273], "v": [13, 14, 45, 67, 68, 172, 301, 605, 777, 1166, 1273], "v2": [13, 124, 135], "out": [13, 19, 58, 59, 60, 61, 114, 140, 235, 238, 301, 337, 352, 500, 501, 523, 621, 625, 632, 767, 843, 889, 919, 933, 1089, 1090, 1112, 1186, 1190, 1197], "separ": [14, 15, 29, 32, 37, 58, 116, 118, 119, 132, 224, 226, 258, 265, 267, 301, 316, 335, 338, 498, 503, 537, 628, 706, 711, 712, 715, 716, 777, 860, 889, 917, 920, 1087, 1092, 1193, 1242, 1250, 1273], "set_thousands_separ": 14, "thousand": [14, 32], "group": [14, 32, 40, 45, 61, 65, 119, 160, 187, 188, 189, 190, 191, 192, 206, 222, 224, 226, 235, 238, 268, 270, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301, 310, 379, 444, 450, 455, 458, 497, 535, 537, 545, 547, 570, 581, 589, 590, 616, 617, 621, 629, 630, 631, 632, 645, 689, 742, 777, 795, 815, 816, 817, 818, 819, 820, 843, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889, 892, 963, 1086, 1150, 1186, 1194, 1195, 1196, 1197, 1210, 1261, 1273], "9876": 14, "54321": 14, "1010101": 14, "123456": [14, 892], "78": 14, "tbl_cell_numeric_align": [14, 15, 32], "right": [14, 15, 20, 21, 23, 32, 40, 118, 119, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 301, 380, 439, 440, 441, 466, 513, 514, 515, 516, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 614, 649, 704, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 824, 825, 843, 861, 889, 964, 1028, 1029, 1030, 1050, 1102, 1103, 1104, 1105, 1140, 1166, 1180, 1214, 1273], "thousands_separ": [14, 15, 32], "decimal_separ": [14, 32], "float_precis": [14, 15, 32, 37, 40, 58, 301, 889], "print": [14, 15, 16, 17, 18, 20, 21, 22, 24, 25, 30, 32, 33, 119, 140, 141, 143, 170, 186, 187, 206, 209, 259, 278, 301, 464, 548, 777, 798, 822, 889, 1058, 1252, 1273, 1282], "876": 14, "543": 14, "010": [14, 666, 1231], "101": [14, 32, 389, 666, 1231, 1282], "000": [14, 15, 32, 40, 301, 1282], "123": [14, 624, 630, 646, 671, 767, 892, 1189, 1195, 1211, 1236, 1251, 1273], "456": [14, 15, 389, 892, 973, 1251, 1273], "780": 14, "precis": [15, 16, 37, 40, 48, 49, 58, 120, 205, 237, 238, 257, 301, 387, 665, 889, 892, 971, 1230], "control": [15, 16, 40, 70, 88, 89, 146, 301, 585, 777, 799, 807, 889, 1146, 1273], "number": [15, 16, 17, 18, 19, 22, 30, 37, 38, 40, 45, 58, 61, 72, 81, 91, 101, 107, 109, 111, 113, 116, 118, 119, 121, 123, 127, 128, 129, 130, 132, 136, 137, 139, 146, 148, 149, 151, 152, 159, 161, 165, 172, 173, 175, 176, 186, 194, 205, 206, 209, 210, 221, 222, 239, 245, 246, 250, 253, 264, 268, 271, 282, 284, 286, 295, 301, 327, 350, 356, 368, 379, 380, 382, 388, 397, 400, 403, 406, 408, 418, 432, 433, 435, 439, 440, 441, 445, 447, 453, 461, 475, 477, 485, 486, 495, 502, 505, 506, 512, 517, 520, 522, 525, 527, 574, 578, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 607, 608, 610, 619, 636, 637, 638, 641, 645, 653, 654, 665, 678, 684, 690, 707, 708, 709, 725, 733, 738, 754, 755, 758, 762, 766, 777, 793, 796, 801, 808, 809, 810, 811, 821, 828, 839, 849, 850, 854, 856, 858, 862, 872, 874, 876, 885, 889, 937, 947, 963, 964, 966, 972, 981, 984, 990, 994, 996, 1006, 1020, 1021, 1023, 1027, 1028, 1029, 1030, 1034, 1036, 1045, 1057, 1074, 1075, 1084, 1091, 1094, 1095, 1101, 1106, 1111, 1114, 1128, 1129, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1164, 1172, 1173, 1176, 1184, 1201, 1202, 1203, 1206, 1210, 1218, 1219, 1230, 1244, 1257, 1262, 1273, 1282], "place": [15, 16, 37, 58, 159, 168, 174, 196, 197, 198, 226, 231, 233, 238, 246, 249, 264, 272, 301, 326, 338, 344, 503, 519, 608, 616, 777, 793, 850, 853, 858, 889, 898, 908, 920, 926, 1033, 1092, 1108, 1143, 1173, 1182, 1273], "float": [15, 16, 37, 40, 52, 53, 58, 123, 138, 141, 142, 143, 144, 145, 148, 150, 156, 166, 172, 175, 208, 228, 239, 246, 293, 301, 333, 361, 380, 384, 385, 418, 436, 437, 438, 439, 440, 441, 446, 451, 457, 459, 465, 468, 472, 475, 477, 478, 479, 484, 492, 512, 528, 532, 538, 551, 562, 563, 564, 565, 575, 578, 579, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 604, 685, 751, 753, 777, 802, 810, 825, 840, 850, 851, 883, 889, 892, 915, 938, 945, 964, 965, 967, 968, 969, 986, 987, 1006, 1025, 1027, 1028, 1029, 1030, 1035, 1039, 1046, 1057, 1073, 1081, 1082, 1101, 1117, 1131, 1132, 1139, 1140, 1141, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1164, 1166, 1168, 1169, 1180, 1184, 1243, 1254, 1262, 1273, 1282], "point": [15, 16, 40, 41, 49, 51, 52, 53, 58, 59, 60, 61, 87, 88, 138, 148, 150, 175, 188, 191, 209, 268, 269, 301, 361, 379, 380, 384, 417, 418, 446, 451, 462, 475, 477, 512, 537, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 754, 755, 777, 798, 799, 810, 816, 819, 829, 830, 841, 861, 889, 943, 945, 963, 964, 968, 1005, 1006, 1035, 1039, 1046, 1057, 1101, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1164, 1254, 1273], "standard": [15, 40, 250, 260, 301, 400, 440, 599, 614, 619, 635, 758, 773, 777, 854, 889, 984, 1029, 1180, 1184, 1200, 1273, 1282], "behaviour": [15, 81, 89, 169, 301, 621, 629, 630, 632, 645, 685, 777, 805, 889, 1186, 1194, 1195, 1197, 1210], "when": [15, 19, 22, 24, 28, 37, 40, 45, 48, 58, 61, 70, 72, 73, 90, 91, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 118, 119, 120, 121, 123, 124, 126, 129, 130, 132, 133, 135, 136, 138, 141, 142, 143, 144, 148, 150, 157, 159, 166, 170, 172, 174, 176, 180, 188, 189, 191, 192, 207, 211, 225, 235, 236, 238, 241, 242, 245, 249, 258, 260, 264, 266, 269, 275, 301, 362, 439, 440, 441, 447, 517, 525, 536, 546, 574, 585, 589, 590, 607, 616, 617, 622, 636, 637, 647, 657, 658, 659, 662, 702, 711, 715, 729, 777, 793, 802, 811, 816, 817, 819, 820, 824, 829, 830, 843, 845, 846, 849, 853, 858, 859, 861, 865, 889, 948, 965, 1027, 1028, 1029, 1030, 1033, 1036, 1106, 1121, 1146, 1150, 1165, 1168, 1172, 1187, 1201, 1202, 1212, 1222, 1223, 1224, 1227, 1250, 1273], "larger": [15, 58, 59, 60, 61, 87, 88, 707, 798, 799, 889], "should": [15, 38, 40, 58, 59, 60, 61, 89, 107, 109, 111, 113, 122, 127, 128, 130, 132, 136, 138, 145, 146, 150, 159, 167, 205, 208, 211, 236, 237, 238, 257, 258, 264, 267, 287, 301, 310, 359, 379, 434, 442, 475, 477, 497, 537, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 605, 614, 689, 725, 727, 739, 742, 754, 755, 767, 777, 793, 804, 809, 824, 825, 830, 847, 851, 853, 858, 860, 889, 892, 941, 963, 1022, 1086, 1122, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1166, 1180, 1261, 1273], "ensur": [15, 40, 121, 147, 148, 150, 187, 190, 224, 236, 301, 466, 535, 777, 815, 818, 829, 830, 889, 892, 1254, 1273], "awar": [15, 205, 237, 238, 257, 301, 622, 647, 809, 889, 1187, 1212, 1229], "both": [15, 30, 37, 58, 72, 90, 91, 188, 189, 191, 192, 207, 208, 218, 235, 236, 261, 269, 301, 315, 362, 380, 442, 466, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 773, 777, 788, 816, 817, 819, 820, 824, 825, 835, 843, 861, 889, 948, 1050, 1060, 1255, 1273], "limit": [15, 16, 61, 120, 121, 132, 176, 301, 350, 363, 364, 447, 453, 777, 811, 821, 889, 949, 950, 1036, 1273], "represent": [15, 43, 44, 259, 301, 359, 388, 393, 397, 400, 401, 403, 404, 406, 408, 411, 414, 415, 418, 432, 433, 435, 683, 777, 807, 827, 889, 941, 942, 972, 977, 981, 983, 984, 988, 990, 991, 994, 996, 999, 1002, 1003, 1006, 1020, 1021, 1023, 1252, 1256, 1273], "look": [15, 188, 301, 351, 525, 535, 777, 816, 889, 932], "appli": [15, 25, 37, 40, 58, 65, 89, 132, 145, 148, 150, 166, 180, 211, 225, 287, 301, 388, 391, 392, 393, 397, 399, 400, 401, 403, 404, 406, 408, 411, 414, 415, 418, 421, 432, 433, 435, 440, 441, 533, 535, 537, 574, 591, 593, 594, 596, 600, 645, 662, 663, 664, 668, 711, 712, 715, 716, 729, 740, 741, 742, 752, 767, 777, 802, 821, 828, 829, 830, 838, 877, 889, 948, 972, 975, 976, 977, 981, 983, 984, 988, 990, 991, 994, 996, 999, 1002, 1003, 1006, 1009, 1020, 1021, 1023, 1029, 1030, 1122, 1151, 1153, 1154, 1156, 1160, 1210, 1227, 1228, 1229, 1233, 1273], "float64": [15, 37, 40, 58, 110, 118, 148, 170, 172, 180, 240, 274, 301, 318, 319, 320, 321, 322, 323, 357, 365, 366, 367, 381, 418, 442, 475, 477, 580, 612, 613, 681, 682, 727, 750, 753, 768, 777, 806, 844, 864, 889, 892, 1006, 1255, 1260, 1273], "doe": [15, 37, 39, 58, 81, 89, 101, 107, 109, 110, 111, 113, 114, 118, 119, 120, 122, 123, 127, 128, 132, 133, 136, 138, 162, 174, 193, 206, 207, 236, 237, 238, 266, 274, 277, 301, 304, 434, 460, 525, 536, 658, 659, 687, 773, 777, 797, 802, 809, 824, 830, 859, 864, 868, 889, 951, 1022, 1033, 1043, 1044, 1121, 1175, 1263, 1273, 1277], "cover": 15, "nativ": [15, 118, 120, 123, 124, 126, 130, 146, 205, 211, 237, 238, 257, 287, 301, 537, 742, 777, 783, 877, 1122, 1273, 1282], "level": [15, 40, 45, 61, 132, 135, 136, 137, 148, 180, 211, 222, 301, 448, 777, 821, 828, 889], "larg": [15, 16, 19, 81, 120], "maximum": [15, 31, 37, 58, 118, 119, 132, 138, 146, 147, 148, 150, 186, 188, 212, 213, 301, 331, 489, 538, 562, 572, 581, 743, 744, 777, 816, 831, 889, 913, 985, 1078, 1123, 1131, 1137, 1142, 1273], "import": [15, 21, 33, 36, 37, 39, 40, 41, 42, 45, 48, 81, 107, 108, 111, 112, 118, 121, 132, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 166, 167, 169, 186, 188, 206, 208, 217, 224, 226, 258, 260, 268, 270, 301, 304, 381, 386, 387, 388, 389, 390, 391, 392, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 592, 593, 594, 596, 599, 600, 601, 700, 701, 720, 721, 723, 724, 725, 764, 765, 773, 777, 789, 795, 799, 802, 803, 804, 805, 816, 825, 830, 834, 847, 889, 952, 954, 970, 971, 972, 973, 974, 975, 976, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1054, 1059, 1063, 1064, 1069, 1152, 1178, 1247, 1273, 1277, 1282], "pi": [15, 381, 777, 952, 954, 1178, 1247, 1273], "e": [15, 36, 37, 39, 41, 42, 45, 58, 108, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 138, 186, 194, 204, 253, 255, 260, 268, 301, 309, 316, 436, 442, 466, 528, 537, 542, 543, 545, 546, 547, 548, 549, 609, 614, 632, 658, 659, 727, 742, 767, 777, 803, 827, 841, 889, 892, 1025, 1026, 1050, 1167, 1180, 1197, 1254, 1273, 1282], "const": 15, "15": [15, 40, 140, 147, 166, 188, 198, 211, 235, 301, 379, 382, 410, 417, 431, 574, 590, 600, 634, 712, 764, 777, 802, 816, 843, 889, 963, 966, 1005, 1019, 1199, 1273], "141592653589793": 15, "718281828459045": [15, 436, 528, 777, 1025, 1117, 1273], "align": [15, 20, 21, 40, 81, 89, 301], "numer": [15, 21, 37, 40, 58, 160, 167, 208, 217, 226, 261, 268, 301, 309, 362, 452, 466, 530, 552, 554, 575, 584, 609, 631, 671, 675, 685, 777, 789, 795, 804, 825, 834, 889, 892, 948, 965, 1026, 1050, 1067, 1167, 1174, 1196, 1236, 1254, 1273, 1282], "column": [15, 21, 22, 23, 26, 27, 29, 39, 40, 43, 48, 72, 73, 81, 82, 89, 91, 93, 95, 107, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 148, 159, 160, 164, 165, 167, 168, 169, 170, 173, 177, 178, 179, 183, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 203, 204, 205, 207, 208, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 235, 236, 237, 238, 240, 241, 242, 243, 249, 250, 251, 252, 256, 258, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 279, 301, 311, 312, 314, 326, 335, 343, 344, 347, 362, 368, 369, 380, 388, 389, 391, 392, 393, 397, 399, 400, 401, 403, 404, 406, 408, 411, 414, 415, 418, 420, 421, 423, 432, 433, 435, 442, 444, 448, 450, 462, 466, 481, 485, 491, 498, 500, 519, 523, 524, 525, 536, 537, 543, 545, 547, 556, 558, 559, 560, 561, 570, 576, 578, 582, 584, 586, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 609, 616, 617, 620, 628, 632, 653, 654, 662, 663, 664, 665, 666, 668, 673, 676, 691, 693, 694, 695, 696, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 777, 793, 795, 801, 804, 805, 806, 808, 812, 815, 816, 817, 818, 819, 820, 824, 825, 830, 831, 832, 833, 834, 836, 837, 838, 840, 841, 843, 844, 845, 846, 847, 848, 853, 854, 855, 858, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 877, 889, 892, 896, 897, 917, 925, 926, 929, 940, 942, 948, 964, 972, 975, 976, 977, 981, 983, 984, 988, 990, 991, 994, 996, 999, 1002, 1003, 1006, 1008, 1009, 1011, 1020, 1021, 1023, 1032, 1043, 1046, 1080, 1087, 1089, 1108, 1113, 1140, 1147, 1150, 1174, 1185, 1193, 1197, 1218, 1219, 1227, 1228, 1229, 1230, 1231, 1233, 1239, 1242, 1250, 1251, 1273, 1282], "cleanli": [15, 186, 301], "line": [15, 25, 40, 118, 119, 123, 132, 186, 200, 202, 301, 304, 629, 1194], "up": [15, 40, 73, 118, 119, 121, 132, 205, 208, 237, 238, 257, 301, 316, 361, 537, 777, 824, 825, 830, 889, 892, 945, 1273], "xx": [15, 82, 84, 147, 150, 166, 301, 802, 889, 892], "yy": [15, 82, 84, 147, 150, 166, 301, 802, 889, 892], "11111111": 15, "44444444444": 15, "100000": [15, 32], "987654321": 15, "23456789": 15, "11": [15, 21, 45, 61, 140, 148, 166, 235, 301, 311, 409, 410, 413, 417, 431, 465, 571, 581, 590, 592, 600, 615, 692, 760, 765, 777, 798, 799, 802, 821, 828, 839, 843, 856, 889, 892, 1001, 1005, 1019, 1122, 1152, 1273], "111": 15, "100": [15, 22, 32, 40, 110, 113, 118, 119, 127, 132, 136, 245, 301, 585, 607, 622, 633, 634, 647, 665, 724, 777, 849, 889, 1118, 1146, 1153, 1154, 1156, 1172, 1187, 1198, 1199, 1212, 1230, 1273, 1282], "988": 15, "44": [15, 218, 301, 383, 777, 835, 889], "444": 15, "23": [15, 140, 166, 188, 235, 301, 389, 393, 397, 414, 417, 433, 590, 593, 594, 596, 599, 600, 601, 722, 725, 763, 764, 765, 777, 802, 816, 843, 889, 892, 973, 981, 1282], "789": [15, 892], "fmt": [16, 464, 730, 777, 822, 889], "floatfmt": 16, "mix": [16, 965, 1229, 1273], "how": [16, 39, 40, 81, 89, 110, 113, 121, 130, 137, 169, 207, 226, 268, 269, 301, 334, 359, 382, 416, 417, 431, 465, 493, 494, 495, 570, 584, 598, 633, 634, 662, 664, 722, 767, 777, 805, 824, 861, 889, 916, 941, 966, 1004, 1005, 1019, 1082, 1083, 1084, 1158, 1198, 1199, 1227, 1229, 1273], "full": [16, 48, 81, 86, 89, 118, 119, 122, 132, 133, 134, 138, 188, 189, 191, 192, 235, 301, 590, 662, 663, 664, 668, 777, 816, 817, 819, 820, 829, 830, 843, 889, 892, 1227, 1228, 1229, 1233, 1282], "scientif": 16, "notat": [16, 40, 301], "small": [16, 121, 147, 209, 301, 417, 809, 889, 1282], "2304980958725870923": 16, "1e6": 16, "1e": [16, 141, 142, 143, 144], "230498": 16, "0000e": 16, "230498095872587": 16, "1000000": [16, 1017], "00000001": [16, 692, 777], "plai": [17, 706], "sam": 17, "As": [17, 72, 90, 91, 107, 109, 110, 111, 113, 123, 127, 128, 136, 301, 525, 767, 889], "time": [17, 39, 48, 50, 65, 70, 86, 87, 88, 130, 132, 166, 174, 188, 189, 191, 192, 208, 235, 270, 301, 333, 356, 386, 387, 389, 390, 391, 395, 396, 413, 416, 417, 420, 422, 423, 431, 434, 491, 492, 525, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 610, 662, 664, 668, 683, 684, 705, 706, 720, 721, 722, 723, 724, 725, 731, 764, 765, 777, 798, 799, 802, 816, 817, 819, 820, 825, 839, 843, 889, 892, 915, 937, 970, 971, 973, 974, 979, 980, 1001, 1004, 1005, 1008, 1010, 1011, 1019, 1022, 1033, 1080, 1081, 1082, 1150, 1176, 1227, 1229, 1233, 1256, 1257, 1273, 1282], "goe": 17, "By": [17, 19, 35, 81, 118, 119, 132, 188, 207, 208, 235, 245, 250, 269, 270, 271, 301, 413, 417, 431, 517, 520, 527, 590, 593, 594, 595, 596, 597, 599, 600, 601, 607, 619, 690, 707, 709, 720, 721, 723, 724, 725, 739, 758, 764, 765, 766, 777, 798, 816, 824, 825, 843, 849, 854, 862, 889, 1001, 1005, 1019, 1106, 1172, 1184, 1254, 1262, 1273], "begin": [17, 40, 301, 439, 440, 441, 629, 777, 1028, 1029, 1030, 1194, 1273], "beauti": 17, "friendship": 17, "len_byt": [17, 637, 638, 1202, 1203], "len": [17, 40, 146, 148, 206, 226, 277, 287, 301, 368, 506, 537, 545, 547, 708, 735, 777, 868, 877, 889, 1095, 1273], "u32": [17, 65, 120, 158, 160, 165, 223, 276, 277, 282, 286, 292, 294, 301, 310, 317, 324, 325, 326, 327, 328, 331, 332, 334, 368, 369, 462, 485, 489, 490, 494, 505, 555, 568, 581, 589, 593, 594, 596, 599, 600, 601, 605, 624, 632, 636, 637, 683, 687, 693, 698, 702, 703, 708, 710, 735, 738, 749, 777, 792, 795, 801, 837, 867, 868, 872, 876, 882, 884, 889, 908, 909, 910, 913, 914, 916, 938, 942, 1046, 1078, 1079, 1083, 1094, 1142, 1150, 1189, 1197, 1201, 1202, 1256, 1259, 1261, 1273], "37": [17, 600, 777], "beaut": 17, "48": [17, 235, 301, 590, 777, 843, 889], "fmt_str_length": [17, 721, 724], "50": [17, 32, 40, 166, 174, 186, 301, 362, 417, 431, 721, 777, 802, 889, 948, 965, 1019, 1273], "element": [18, 19, 30, 147, 150, 159, 165, 203, 226, 236, 250, 264, 271, 301, 316, 318, 319, 320, 321, 322, 323, 334, 335, 356, 360, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 384, 385, 443, 444, 448, 460, 471, 485, 493, 494, 496, 497, 498, 505, 506, 513, 514, 515, 516, 520, 527, 529, 530, 537, 570, 571, 581, 584, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 611, 612, 613, 618, 619, 653, 654, 665, 681, 682, 684, 690, 707, 709, 754, 755, 758, 766, 777, 793, 801, 853, 854, 858, 862, 889, 899, 900, 901, 902, 903, 904, 905, 916, 917, 937, 944, 947, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 968, 969, 1031, 1032, 1037, 1045, 1058, 1072, 1074, 1075, 1082, 1083, 1085, 1086, 1087, 1094, 1095, 1102, 1103, 1104, 1105, 1118, 1119, 1122, 1136, 1142, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1166, 1177, 1178, 1179, 1183, 1184, 1218, 1219, 1230, 1244, 1247, 1248, 1252, 1257, 1258, 1262, 1273], "empti": [18, 36, 37, 58, 97, 110, 118, 119, 123, 129, 132, 161, 162, 188, 201, 217, 301, 739, 756, 796, 797, 816, 834, 889, 892, 947, 951, 1053, 1273], "alwai": [18, 37, 39, 49, 51, 58, 65, 118, 147, 187, 190, 211, 287, 301, 545, 662, 720, 767, 830, 889, 1122, 1227, 1273, 1281, 1282], "neg": [18, 49, 118, 119, 124, 126, 130, 139, 188, 189, 191, 192, 194, 210, 235, 245, 246, 248, 253, 277, 301, 517, 518, 574, 590, 607, 608, 615, 651, 777, 816, 817, 819, 820, 843, 849, 850, 852, 867, 868, 889, 1045, 1075, 1106, 1107, 1172, 1173, 1181, 1216, 1244, 1273], "result": [18, 37, 43, 44, 45, 58, 59, 60, 61, 81, 89, 111, 113, 120, 121, 122, 123, 132, 135, 137, 138, 150, 174, 188, 191, 193, 207, 222, 226, 235, 238, 245, 246, 261, 270, 277, 279, 301, 417, 420, 423, 431, 439, 440, 441, 445, 460, 482, 524, 525, 535, 537, 570, 578, 585, 586, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 606, 607, 608, 652, 653, 664, 685, 710, 711, 712, 715, 716, 720, 721, 722, 723, 724, 725, 741, 750, 753, 754, 755, 768, 777, 794, 798, 802, 816, 817, 819, 820, 824, 829, 830, 839, 843, 847, 849, 850, 868, 869, 889, 898, 964, 1005, 1008, 1011, 1019, 1028, 1029, 1030, 1033, 1044, 1073, 1113, 1122, 1140, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1170, 1172, 1173, 1217, 1218, 1229, 1254, 1255, 1273, 1281, 1282], "being": [18, 41, 49, 51, 58, 59, 60, 61, 87, 88, 118, 119, 120, 132, 138, 160, 173, 258, 268, 269, 301, 316, 379, 380, 417, 462, 537, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 726, 754, 755, 777, 795, 798, 799, 808, 809, 861, 889, 943, 963, 964, 1005, 1046, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273, 1282], "content": [18, 610, 777, 1176, 1273], "final": [18, 40, 81, 137, 301, 439, 440, 441, 777, 802, 809, 889, 1028, 1029, 1030, 1273], "item": [18, 89, 119, 186, 236, 239, 301, 333, 337, 338, 382, 444, 492, 495, 501, 503, 512, 604, 654, 777, 915, 919, 920, 966, 1032, 1081, 1084, 1090, 1092, 1101, 1164, 1219, 1273], "num": [18, 40, 263, 301, 466, 777, 1050, 1273], "fmt_table_cell_list_len": 18, "10": [18, 21, 22, 32, 36, 37, 39, 40, 41, 42, 45, 61, 65, 81, 89, 114, 121, 132, 140, 148, 150, 162, 166, 174, 185, 186, 188, 194, 196, 198, 199, 204, 221, 225, 226, 227, 231, 233, 235, 241, 253, 274, 279, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 311, 315, 324, 325, 326, 328, 362, 370, 373, 382, 386, 388, 389, 391, 392, 395, 397, 401, 403, 404, 406, 409, 410, 411, 416, 417, 418, 421, 431, 434, 460, 461, 465, 471, 481, 486, 495, 502, 509, 518, 520, 522, 527, 529, 545, 547, 556, 568, 571, 574, 585, 590, 615, 666, 678, 692, 704, 711, 720, 723, 726, 729, 731, 733, 739, 741, 762, 765, 777, 798, 799, 802, 816, 821, 823, 828, 838, 839, 843, 845, 855, 856, 864, 869, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 892, 948, 966, 970, 972, 973, 979, 990, 1004, 1019, 1022, 1025, 1045, 1058, 1075, 1084, 1091, 1107, 1111, 1118, 1122, 1136, 1146, 1165, 1168, 1231, 1244, 1273, 1282], "size": [19, 45, 61, 118, 119, 120, 146, 147, 148, 150, 152, 172, 268, 301, 586, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 699, 735, 736, 754, 755, 777, 798, 889, 1027, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273, 1282], "overwrit": [19, 38, 39, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 136, 156, 269, 301, 311, 777, 809, 889], "chunk": [19, 61, 116, 118, 119, 130, 132, 135, 136, 137, 148, 150, 174, 206, 221, 301, 315, 582, 777, 889, 898, 946, 1033, 1042, 1128, 1143, 1249, 1273], "stream": [19, 41, 42, 58, 59, 60, 61, 87, 88, 126, 159, 187, 190, 207, 264, 266, 301, 535, 777, 793, 798, 799, 807, 809, 815, 818, 824, 829, 830, 834, 839, 851, 853, 858, 859, 889], "engin": [19, 38, 120, 121, 123, 152, 187, 190, 207, 211, 266, 287, 301, 535, 777, 815, 818, 824, 829, 830, 834, 859, 877, 889, 1122, 1273], "determin": [19, 37, 40, 58, 79, 81, 89, 110, 113, 118, 119, 120, 123, 129, 130, 132, 137, 139, 157, 180, 188, 191, 205, 206, 211, 226, 235, 265, 270, 301, 359, 399, 416, 417, 431, 462, 525, 536, 545, 578, 584, 585, 593, 594, 595, 596, 597, 599, 600, 601, 614, 622, 633, 634, 662, 664, 665, 722, 750, 753, 768, 777, 816, 819, 843, 889, 941, 983, 1004, 1005, 1019, 1046, 1114, 1121, 1140, 1146, 1180, 1187, 1198, 1199, 1227, 1229, 1230, 1273], "thread": [19, 37, 58, 88, 116, 118, 119, 121, 152, 301, 316, 497, 537, 777, 799, 889, 1086], "pool": [19, 88, 152, 799, 889], "For": [19, 39, 40, 118, 119, 121, 122, 123, 132, 133, 134, 169, 174, 207, 208, 235, 287, 301, 304, 439, 440, 441, 525, 537, 546, 583, 614, 621, 629, 630, 631, 632, 645, 711, 715, 725, 729, 730, 773, 777, 805, 825, 843, 877, 889, 1028, 1029, 1030, 1033, 1060, 1144, 1180, 1186, 1194, 1195, 1196, 1197, 1210, 1254, 1273, 1277], "some": [19, 35, 40, 72, 91, 110, 118, 119, 120, 123, 132, 156, 169, 301, 773, 805, 889, 1058, 1273, 1282], "dataset": [19, 45, 51, 118, 119, 130, 132, 138, 207, 301, 482, 777, 789, 824, 829, 830, 889, 1073, 1273], "esp": 19, "have": [19, 35, 39, 40, 48, 72, 81, 91, 108, 117, 118, 119, 121, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 148, 150, 174, 205, 207, 229, 235, 237, 238, 257, 277, 301, 379, 439, 440, 441, 537, 546, 581, 585, 590, 631, 777, 803, 824, 834, 843, 851, 867, 868, 889, 892, 963, 965, 1028, 1029, 1030, 1033, 1043, 1142, 1146, 1229, 1273, 1282], "too": [19, 589, 777, 809, 889], "optimist": 19, "lead": [19, 45, 114, 138, 188, 189, 191, 192, 215, 235, 245, 252, 301, 455, 458, 517, 535, 537, 590, 606, 607, 640, 656, 657, 659, 679, 707, 777, 816, 817, 819, 820, 829, 830, 843, 849, 871, 877, 889, 1106, 1122, 1170, 1172, 1205, 1221, 1222, 1224, 1273], "memori": [19, 61, 87, 88, 89, 107, 108, 111, 112, 113, 118, 119, 120, 123, 124, 130, 132, 135, 136, 137, 156, 174, 211, 238, 247, 287, 301, 570, 582, 609, 777, 798, 799, 889, 1033, 1122, 1143, 1174, 1175, 1273], "error": [19, 39, 88, 99, 102, 118, 119, 132, 160, 226, 236, 301, 311, 338, 352, 357, 481, 500, 503, 523, 556, 621, 625, 629, 631, 632, 633, 635, 662, 663, 664, 668, 777, 795, 799, 871, 877, 889, 920, 933, 938, 1089, 1092, 1112, 1186, 1190, 1194, 1196, 1197, 1198, 1200, 1227, 1228, 1229, 1233, 1273], "row": [19, 25, 30, 37, 38, 40, 43, 45, 58, 61, 81, 82, 84, 89, 98, 101, 106, 110, 111, 113, 114, 118, 119, 120, 123, 124, 126, 127, 130, 132, 135, 136, 137, 138, 141, 142, 146, 148, 157, 159, 161, 169, 174, 177, 180, 182, 186, 187, 188, 190, 193, 194, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 217, 222, 238, 239, 248, 253, 254, 257, 259, 264, 266, 268, 269, 276, 277, 282, 284, 286, 287, 295, 301, 327, 335, 444, 456, 461, 486, 498, 525, 570, 571, 586, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 615, 617, 628, 633, 634, 678, 680, 699, 702, 706, 708, 710, 715, 716, 729, 733, 735, 736, 738, 752, 754, 755, 762, 767, 777, 793, 796, 798, 805, 809, 812, 813, 814, 816, 821, 824, 825, 826, 828, 830, 834, 852, 856, 857, 858, 859, 861, 867, 868, 872, 874, 876, 877, 885, 889, 917, 1032, 1033, 1041, 1045, 1087, 1136, 1147, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1181, 1193, 1198, 1199, 1244, 1246, 1273, 1282], "per": [19, 37, 40, 58, 146, 148, 159, 186, 222, 223, 242, 249, 264, 275, 290, 292, 293, 301, 316, 337, 497, 500, 501, 523, 535, 537, 617, 689, 702, 777, 793, 846, 853, 858, 865, 880, 882, 883, 889, 919, 1086, 1089, 1090, 1112, 1261, 1273], "everi": [19, 37, 58, 118, 119, 132, 182, 188, 191, 254, 257, 270, 301, 329, 330, 331, 332, 335, 337, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 417, 431, 444, 456, 489, 490, 495, 498, 501, 502, 513, 518, 522, 589, 628, 680, 711, 712, 715, 716, 777, 809, 814, 816, 819, 857, 889, 911, 912, 913, 914, 917, 919, 955, 956, 957, 958, 959, 960, 961, 962, 963, 1005, 1019, 1032, 1041, 1043, 1078, 1079, 1084, 1087, 1090, 1091, 1102, 1107, 1111, 1150, 1193, 1246, 1273], "process": [19, 37, 58, 59, 60, 61, 87, 88, 118, 119, 120, 132, 152, 301, 798, 799, 889], "liter": [20, 21, 25, 39, 120, 149, 150, 151, 241, 242, 245, 269, 274, 275, 301, 311, 351, 362, 389, 437, 438, 445, 452, 457, 459, 466, 484, 532, 536, 552, 554, 564, 565, 575, 585, 621, 624, 632, 645, 646, 675, 685, 694, 696, 699, 704, 705, 706, 714, 718, 719, 722, 735, 739, 744, 748, 756, 759, 761, 763, 777, 811, 845, 846, 849, 861, 864, 865, 889, 892, 932, 948, 973, 1034, 1050, 1146, 1165, 1168, 1172, 1186, 1189, 1197, 1210, 1211, 1273], "left": [20, 21, 40, 67, 81, 141, 142, 143, 144, 188, 189, 191, 192, 207, 208, 235, 269, 301, 380, 439, 440, 441, 465, 466, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 639, 683, 704, 711, 712, 715, 716, 720, 721, 723, 724, 729, 752, 764, 765, 767, 777, 816, 817, 819, 820, 824, 825, 843, 861, 889, 964, 1028, 1029, 1030, 1050, 1140, 1166, 1204, 1256, 1273], "center": [20, 21, 40, 301, 439, 440, 441, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 777, 1028, 1029, 1030, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "cell": [20, 21, 40, 301], "valueerror": [20, 25], "recognis": [20, 21, 25, 145], "column_abc": 20, "column_xyz": 20, "keyerror": 21, "datetim": [21, 37, 40, 58, 81, 114, 123, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 270, 301, 304, 333, 386, 387, 388, 389, 390, 391, 393, 395, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 492, 590, 593, 594, 595, 596, 597, 599, 600, 601, 662, 664, 683, 720, 721, 723, 724, 725, 731, 739, 764, 765, 777, 795, 802, 816, 817, 819, 820, 825, 843, 889, 892, 915, 970, 971, 972, 973, 974, 975, 977, 979, 980, 981, 983, 984, 985, 986, 987, 988, 990, 991, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1069, 1081, 1082, 1131, 1132, 1169, 1227, 1229, 1256, 1273], "date": [21, 40, 48, 81, 118, 119, 121, 123, 129, 132, 138, 148, 160, 166, 186, 188, 189, 191, 192, 206, 208, 235, 301, 304, 333, 387, 388, 389, 390, 393, 396, 399, 400, 403, 408, 409, 410, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 492, 590, 593, 594, 595, 596, 597, 599, 600, 601, 662, 663, 683, 720, 721, 723, 724, 731, 739, 763, 777, 795, 802, 816, 817, 819, 820, 825, 843, 889, 892, 915, 971, 972, 973, 974, 977, 980, 981, 983, 984, 985, 987, 988, 990, 993, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1023, 1069, 1081, 1082, 1131, 1132, 1169, 1227, 1228, 1256, 1273], "333": [21, 603, 777, 1163, 1273], "mno": [21, 25], "2023": [21, 40, 114, 140, 206, 301, 389, 725, 739, 892, 973], "29": [21, 148, 386, 409, 970, 997], "2001": [21, 387, 388, 393, 396, 399, 403, 408, 413, 414, 415, 417, 422, 431, 432, 433, 434, 593, 594, 596, 599, 600, 601, 662, 777, 892, 971, 972, 977, 980, 981, 983, 985, 986, 987, 988, 990, 991, 993, 994, 996, 999, 1001, 1002, 1003, 1005, 1010, 1019, 1020, 1021, 1022, 1023, 1227], "null": [21, 37, 39, 58, 67, 81, 89, 110, 118, 119, 128, 132, 136, 138, 156, 159, 161, 165, 166, 169, 171, 176, 180, 181, 199, 207, 214, 215, 216, 223, 226, 228, 245, 246, 249, 250, 251, 252, 256, 261, 264, 267, 269, 271, 274, 282, 301, 312, 314, 315, 316, 326, 329, 330, 337, 338, 344, 350, 352, 362, 368, 369, 370, 373, 382, 384, 385, 413, 424, 425, 426, 427, 428, 429, 430, 438, 439, 440, 441, 442, 445, 446, 447, 453, 465, 475, 477, 478, 479, 485, 487, 488, 495, 496, 499, 500, 501, 503, 504, 505, 513, 514, 515, 516, 517, 519, 523, 525, 537, 555, 565, 566, 567, 568, 571, 582, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 607, 608, 609, 611, 616, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 635, 636, 637, 642, 643, 644, 651, 653, 654, 655, 666, 671, 672, 673, 674, 683, 693, 694, 695, 696, 704, 705, 706, 708, 710, 714, 727, 738, 739, 744, 748, 754, 755, 759, 761, 767, 777, 793, 796, 801, 802, 805, 811, 823, 824, 837, 847, 849, 850, 853, 858, 860, 861, 864, 866, 872, 876, 889, 896, 897, 899, 908, 911, 912, 919, 920, 926, 933, 947, 948, 966, 968, 969, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1026, 1028, 1029, 1030, 1034, 1036, 1043, 1049, 1065, 1066, 1074, 1076, 1077, 1080, 1084, 1085, 1088, 1089, 1090, 1092, 1093, 1094, 1103, 1105, 1106, 1108, 1112, 1114, 1122, 1135, 1136, 1149, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1167, 1172, 1173, 1177, 1182, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1200, 1201, 1202, 1207, 1208, 1209, 1216, 1218, 1219, 1220, 1231, 1236, 1252, 1254, 1255, 1256, 1263, 1273, 1281, 1282], "07": [21, 118, 166, 301, 388, 389, 403, 416, 417, 431, 662, 720, 723, 731, 802, 889, 892, 973, 1004, 1227], "05": [21, 138, 141, 142, 143, 144, 148, 160, 166, 208, 270, 301, 388, 389, 390, 391, 392, 397, 401, 403, 404, 406, 409, 410, 411, 416, 418, 420, 421, 423, 424, 720, 723, 795, 802, 825, 889, 892, 973, 974, 975, 976, 1004, 1005, 1008, 1009, 1011, 1012, 1019], "visibl": [22, 172, 301, 1027, 1273], "eg": [22, 30, 40, 89, 121, 154, 301, 417, 662, 664, 685, 777, 1043, 1227, 1229, 1273], "low": [22, 120, 152, 578, 777, 1140, 1273], "rang": [22, 40, 120, 121, 166, 172, 188, 206, 301, 317, 381, 393, 408, 414, 415, 417, 431, 432, 465, 699, 705, 719, 720, 721, 722, 723, 724, 735, 736, 763, 764, 765, 777, 802, 816, 889, 965, 977, 996, 1002, 1003, 1005, 1019, 1020, 1027, 1136, 1273], "98": [22, 198, 301, 356, 455, 458, 616, 665, 684, 777, 1230], "99": [22, 40, 175, 176, 198, 201, 269, 301, 310, 356, 445, 447, 455, 458, 616, 684, 767, 777, 810, 811, 861, 889, 1025, 1034, 1273], "tbl_col": 22, "95": [22, 310, 777], "96": [22, 166, 301, 310, 777, 802, 889], "97": [22, 198, 301, 310, 777], "move": [23, 238, 301, 439, 440, 441, 593, 594, 596, 600, 777, 1028, 1029, 1030, 1153, 1154, 1156, 1160, 1273], "inlin": [23, 238, 301, 621, 629, 630, 632, 645, 1186, 1194, 1195, 1197, 1210], "parenthes": 23, "inform": [24, 28, 38, 86, 122, 130, 133, 134, 137, 141, 143, 164, 166, 301, 304, 482, 614, 621, 629, 630, 632, 645, 777, 802, 839, 889, 942, 1073, 1180, 1186, 1194, 1195, 1197, 1210, 1273, 1277], "below": [24, 39, 122, 133, 134, 169, 188, 226, 301, 447, 720, 721, 723, 724, 764, 765, 767, 773, 777, 805, 816, 889], "ascii_ful": 25, "ascii_full_condens": 25, "ascii_no_bord": 25, "ascii_borders_onli": 25, "ascii_borders_only_condens": 25, "ascii_horizontal_onli": 25, "ascii_markdown": 25, "utf8_ful": [25, 81, 114], "utf8_no_bord": 25, "utf8_borders_onli": 25, "utf8_horizontal_onli": 25, "noth": [25, 629, 635, 1194, 1200], "rounded_corn": 25, "border": 25, "includ": [25, 35, 37, 39, 40, 58, 86, 120, 122, 133, 134, 148, 159, 166, 172, 224, 238, 264, 265, 268, 269, 301, 380, 418, 462, 466, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 652, 653, 657, 658, 711, 715, 754, 755, 777, 793, 802, 858, 861, 889, 892, 964, 965, 1006, 1027, 1046, 1050, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1217, 1218, 1222, 1263, 1273], "divid": [25, 380, 417, 431, 439, 440, 441, 482, 578, 777, 964, 1005, 1019, 1028, 1029, 1030, 1073, 1140, 1273], "same": [25, 39, 40, 69, 72, 81, 87, 88, 89, 90, 91, 124, 132, 141, 142, 143, 144, 146, 154, 177, 187, 207, 211, 226, 238, 249, 266, 274, 275, 279, 287, 301, 308, 315, 347, 384, 385, 448, 455, 458, 524, 541, 544, 570, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 617, 636, 674, 777, 798, 799, 812, 815, 824, 829, 830, 853, 859, 864, 865, 869, 889, 894, 899, 929, 964, 968, 969, 973, 1113, 1122, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1201, 1264, 1273], "dens": [25, 186, 301, 581, 777, 1142, 1273], "space": [25, 188, 301, 816, 889], "horizont": [25, 89, 180, 196, 212, 213, 214, 215, 219, 220, 251, 252, 268, 301, 694, 696, 705, 706, 711, 712, 714, 715, 716, 718, 726, 729, 744, 748, 752, 761], "markdown": 25, "compat": [25, 40, 45, 61, 301, 621, 623, 624, 629, 630, 631, 632, 645, 646, 889, 892, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1210, 1211], "utf8": [25, 118, 119, 132], "No": [25, 669, 1234], "round": [25, 40, 83, 114, 120, 301, 361, 367, 451, 603, 681, 777, 945, 1039, 1163, 1273], "corner": [25, 40, 114, 301], "op": [25, 150, 301, 584, 777, 889, 1229, 1273], "one": [25, 37, 38, 40, 58, 70, 81, 98, 107, 109, 110, 111, 112, 113, 118, 119, 123, 127, 128, 129, 132, 149, 150, 151, 154, 160, 176, 177, 186, 187, 188, 189, 191, 192, 205, 217, 226, 235, 236, 237, 243, 245, 260, 263, 280, 301, 310, 380, 447, 448, 455, 458, 517, 525, 530, 589, 590, 607, 616, 629, 630, 631, 647, 742, 757, 767, 773, 777, 795, 811, 812, 815, 816, 817, 819, 820, 834, 843, 848, 849, 866, 870, 889, 898, 964, 1036, 1069, 1106, 1114, 1119, 1140, 1150, 1172, 1194, 1195, 1196, 1212, 1237, 1273, 1277], "more": [25, 40, 43, 45, 61, 70, 81, 89, 90, 91, 106, 107, 108, 109, 110, 111, 112, 113, 120, 121, 122, 123, 127, 128, 129, 130, 133, 134, 141, 143, 148, 150, 154, 164, 166, 177, 204, 205, 209, 211, 217, 222, 236, 237, 239, 260, 266, 287, 301, 304, 313, 316, 348, 448, 482, 512, 526, 530, 535, 537, 569, 604, 614, 630, 636, 662, 663, 664, 686, 698, 708, 728, 734, 737, 745, 746, 749, 757, 767, 777, 802, 834, 859, 889, 892, 899, 930, 942, 965, 1069, 1073, 1101, 1115, 1122, 1164, 1180, 1195, 1201, 1227, 1228, 1229, 1258, 1273, 1277, 1282], "semigraph": 25, "box": [25, 211, 301], "draw": [25, 30, 147, 1282], "found": [25, 37, 40, 58, 67, 93, 103, 105, 110, 114, 170, 301, 605, 632, 635, 660, 661, 662, 664, 777, 889, 1166, 1197, 1200, 1225, 1226, 1227, 1229, 1273, 1281], "unicod": 25, "block": [25, 88, 187, 190, 266, 301, 767, 799, 815, 818, 841, 859, 867, 868, 877, 889, 1165, 1168, 1273], "http": [25, 40, 41, 42, 108, 120, 121, 156, 164, 301, 629, 631, 1194, 1196], "en": [25, 40, 301], "wikipedia": 25, "org": [25, 41, 42, 108, 120, 121, 156, 164, 301], "wiki": 25, "drawing_charact": 25, "box_draw": 25, "tbl_format": 25, "tbl_hide_column_data_typ": 25, "tbl_hide_dataframe_shap": 25, "hide": [26, 27, 28, 29, 40, 301], "etc": [26, 39, 40, 118, 122, 124, 126, 133, 134, 135, 301, 777, 892, 1165, 1168, 1273], "between": [29, 89, 145, 146, 148, 150, 164, 228, 293, 301, 338, 357, 382, 383, 466, 495, 503, 513, 514, 515, 516, 571, 578, 579, 597, 620, 700, 701, 707, 709, 751, 754, 755, 777, 840, 883, 889, 920, 938, 942, 966, 967, 1050, 1084, 1092, 1102, 1103, 1104, 1105, 1136, 1140, 1141, 1157, 1185, 1273], "set_tbl_column_data_type_inlin": 29, "max": [30, 40, 45, 61, 65, 152, 166, 176, 187, 213, 226, 235, 301, 363, 370, 375, 447, 525, 535, 570, 581, 585, 590, 593, 606, 654, 744, 757, 777, 802, 811, 815, 843, 889, 949, 955, 959, 965, 1036, 1114, 1142, 1153, 1170, 1219, 1273], "tbl_row": 30, "also": [32, 37, 40, 58, 70, 72, 110, 120, 123, 129, 132, 146, 147, 148, 149, 150, 154, 170, 187, 188, 189, 191, 192, 218, 222, 235, 237, 241, 249, 269, 274, 277, 301, 370, 373, 413, 416, 448, 466, 537, 581, 585, 593, 594, 595, 596, 597, 599, 600, 601, 617, 657, 658, 711, 712, 715, 716, 720, 729, 731, 752, 767, 776, 777, 783, 815, 816, 817, 819, 820, 835, 843, 845, 853, 861, 864, 866, 868, 889, 892, 1004, 1050, 1142, 1146, 1188, 1189, 1222, 1273, 1277], "char": [32, 630, 1195], "omit": [32, 110, 114, 146, 148, 150, 154, 222, 238, 301, 735, 736, 764, 765, 892], "set_decimal_separ": 32, "x": [32, 67, 68, 73, 81, 89, 108, 114, 118, 119, 121, 132, 146, 148, 156, 172, 196, 200, 202, 207, 217, 226, 237, 238, 265, 268, 301, 304, 309, 311, 313, 333, 338, 369, 381, 437, 438, 452, 457, 459, 460, 484, 491, 503, 530, 532, 534, 535, 537, 552, 554, 555, 557, 558, 559, 560, 561, 564, 565, 569, 575, 576, 584, 585, 589, 611, 614, 653, 675, 676, 683, 685, 692, 694, 696, 700, 701, 711, 712, 714, 729, 739, 741, 744, 748, 752, 761, 767, 777, 824, 830, 834, 852, 889, 892, 920, 942, 1036, 1071, 1122, 1146, 1177, 1180, 1218, 1256, 1273, 1281], "1234567": 32, "987654": [32, 892], "10101": 32, "y": [32, 73, 81, 89, 108, 114, 146, 148, 156, 172, 200, 202, 207, 217, 226, 237, 238, 265, 268, 301, 304, 309, 311, 313, 333, 338, 420, 423, 437, 438, 457, 459, 484, 491, 503, 532, 534, 537, 555, 557, 558, 559, 560, 561, 564, 565, 569, 576, 584, 585, 589, 662, 663, 664, 676, 685, 692, 694, 696, 700, 701, 714, 725, 739, 744, 748, 761, 777, 824, 834, 852, 889, 892, 920, 942, 1008, 1011, 1146, 1227, 1228, 1229, 1273], "1234": [32, 603, 777, 1163, 1273], "7654321": 32, "234": 32, "567": 32, "987": 32, "654": 32, "00": [32, 40, 148, 160, 188, 208, 270, 301, 386, 387, 390, 395, 409, 410, 413, 416, 417, 420, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 593, 594, 596, 599, 600, 601, 662, 664, 668, 723, 724, 725, 764, 765, 777, 795, 816, 825, 889, 892, 970, 971, 974, 975, 976, 979, 980, 981, 987, 988, 994, 997, 998, 999, 1001, 1004, 1005, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1227, 1229, 1233], "321": [32, 1282], "strip": [33, 640, 650, 657, 658, 659, 660, 661, 1205, 1215, 1222, 1223, 1224], "trail": [33, 186, 301, 650, 656, 657, 658, 1215, 1221, 1222, 1223], "zero": [33, 40, 107, 108, 117, 118, 119, 124, 126, 130, 147, 156, 176, 205, 236, 255, 261, 301, 447, 525, 530, 605, 614, 671, 685, 777, 796, 811, 889, 947, 1036, 1114, 1180, 1236, 1249, 1254, 1255, 1273], "enabl": [33, 34, 72, 90, 91, 141, 142, 143, 144, 153, 241, 261, 274, 301, 312, 314, 585, 606, 622, 647, 689, 773, 777, 798, 845, 864, 889, 896, 897, 1146, 1170, 1187, 1212, 1255, 1261, 1273], "d": [33, 36, 37, 39, 40, 41, 42, 45, 110, 138, 186, 188, 193, 194, 198, 207, 253, 255, 268, 272, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 309, 311, 369, 396, 420, 423, 466, 574, 609, 624, 630, 653, 662, 663, 664, 704, 725, 731, 777, 816, 824, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 942, 980, 1008, 1011, 1050, 1080, 1189, 1195, 1218, 1227, 1228, 1229, 1273], "01": [33, 81, 148, 160, 166, 186, 188, 235, 270, 301, 386, 387, 388, 389, 390, 391, 392, 396, 397, 399, 400, 401, 403, 404, 406, 408, 409, 410, 411, 413, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 590, 593, 594, 596, 599, 600, 601, 662, 663, 664, 668, 720, 721, 723, 724, 725, 777, 795, 802, 816, 843, 889, 892, 971, 973, 974, 975, 976, 980, 981, 987, 988, 994, 997, 998, 999, 1001, 1004, 1005, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1227, 1228, 1229, 1233], "6789": 33, "scale": [33, 49, 172, 301, 537, 574, 665, 777, 1027, 1230, 1273], "trim_decimal_zero": 33, "01000": 33, "67890": 33, "addit": [34, 39, 40, 110, 122, 123, 133, 134, 146, 169, 173, 187, 190, 224, 241, 242, 243, 249, 261, 267, 274, 275, 279, 301, 309, 395, 442, 445, 570, 617, 621, 629, 630, 632, 645, 702, 704, 705, 706, 727, 756, 759, 777, 808, 815, 818, 845, 846, 848, 853, 860, 864, 865, 869, 889, 970, 979, 1034, 1186, 1194, 1195, 1197, 1210, 1255, 1273, 1277], "verbos": [34, 141, 143, 154, 630, 1195], "debug": [34, 798, 809, 829, 830, 889, 1282], "log": [34, 83, 356, 436, 530, 554, 575, 684, 777, 937, 1025, 1257, 1273], "do_polars_oper": 34, "if_set": 35, "env_onli": 35, "dict": [35, 39, 40, 45, 68, 82, 84, 86, 107, 109, 110, 111, 112, 113, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 148, 179, 205, 224, 230, 236, 237, 238, 240, 256, 257, 265, 301, 536, 589, 777, 841, 844, 889, 1038, 1121, 1273], "show": [35, 40, 69, 166, 169, 186, 209, 223, 301, 462, 777, 802, 805, 839, 851, 889, 1046, 1273], "variabl": [35, 62, 67, 130, 137, 149, 152, 217, 258, 301, 834, 889, 1250, 1273, 1281], "chang": [35, 41, 49, 51, 58, 59, 60, 61, 81, 87, 88, 118, 119, 120, 138, 268, 269, 270, 276, 301, 316, 379, 380, 382, 417, 462, 536, 537, 571, 578, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 777, 798, 799, 861, 867, 889, 941, 942, 943, 963, 964, 1005, 1046, 1121, 1136, 1140, 1150, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1175, 1273], "restrict": [35, 654, 1219], "dictionari": [35, 40, 73, 107, 109, 110, 111, 113, 118, 119, 120, 121, 125, 127, 128, 131, 132, 136, 205, 224, 236, 237, 238, 256, 257, 301, 536, 777, 889, 1038, 1121, 1273], "those": [35, 40, 118, 123, 238, 261, 269, 301, 581, 629, 742, 777, 861, 889, 892, 1142, 1194, 1255, 1273], "been": [35, 40, 156, 157, 178, 181, 189, 190, 191, 192, 197, 232, 254, 281, 301, 316, 374, 375, 376, 377, 378, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 537, 576, 581, 591, 593, 594, 595, 596, 597, 599, 600, 601, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 676, 679, 680, 697, 717, 718, 740, 777, 817, 818, 819, 820, 829, 857, 871, 889, 899, 959, 960, 961, 962, 1055, 1061, 1082, 1095, 1112, 1121, 1142, 1151, 1167, 1169, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1245, 1246, 1273], "set_fmt_float": 35, "via": [35, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 205, 237, 301, 316, 537, 631, 777, 803, 889, 1196], "set_stat": 35, "all_stat": 35, "binaryio": [36, 41, 42, 117, 118, 123, 124, 126, 129, 301], "bytesio": [36, 37, 40, 41, 42, 45, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 301, 803, 889], "compress": [36, 41, 42, 45, 59, 61, 301, 889], "avrocompress": [36, 301], "uncompress": [36, 41, 42, 45, 61, 124, 135, 301, 889], "write": [36, 37, 38, 39, 40, 41, 42, 43, 45, 58, 59, 60, 61, 119, 124, 154, 301, 362, 550, 777, 827, 851, 889, 948, 1273], "apach": [36, 41, 42, 45, 117, 120, 121, 134, 301, 789], "avro": [36, 117, 301, 789], "writeabl": [36, 37, 41, 42, 43, 44, 45, 301], "like": [36, 37, 39, 41, 42, 43, 44, 45, 88, 108, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 188, 200, 202, 207, 260, 301, 386, 497, 549, 581, 629, 658, 659, 689, 773, 777, 799, 803, 816, 889, 970, 1086, 1142, 1194, 1261, 1273], "object": [36, 37, 39, 40, 41, 42, 43, 44, 45, 70, 73, 89, 96, 108, 109, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 134, 146, 148, 150, 156, 187, 188, 190, 191, 208, 209, 235, 238, 260, 261, 301, 720, 721, 723, 724, 739, 764, 765, 789, 803, 816, 817, 819, 820, 825, 843, 889, 892, 1249, 1273], "snappi": [36, 45, 61, 301, 889], "deflat": [36, 301], "pathlib": [36, 37, 41, 42, 45, 132, 301], "foo": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 193, 194, 195, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 244, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 265, 266, 267, 271, 272, 273, 278, 301, 358, 380, 413, 456, 461, 464, 486, 541, 544, 545, 546, 547, 548, 549, 578, 586, 620, 624, 626, 628, 630, 631, 648, 652, 654, 657, 658, 659, 660, 661, 667, 670, 678, 698, 707, 708, 709, 728, 732, 733, 734, 737, 738, 743, 745, 746, 747, 749, 751, 756, 758, 762, 766, 767, 773, 777, 795, 800, 804, 805, 806, 812, 822, 823, 824, 837, 841, 844, 845, 859, 860, 863, 866, 889, 892, 939, 964, 1001, 1092, 1140, 1147, 1189, 1191, 1193, 1195, 1196, 1213, 1219, 1225, 1226, 1232, 1235, 1273], "bar": [36, 37, 39, 41, 42, 43, 44, 45, 69, 160, 163, 164, 167, 168, 169, 170, 171, 174, 177, 180, 183, 184, 185, 194, 196, 198, 199, 201, 207, 211, 212, 213, 214, 215, 216, 219, 220, 223, 226, 228, 230, 231, 233, 236, 239, 240, 241, 248, 250, 251, 252, 253, 255, 257, 258, 259, 260, 261, 262, 266, 267, 271, 272, 278, 301, 358, 464, 541, 542, 543, 544, 545, 546, 547, 548, 549, 614, 624, 626, 628, 630, 631, 648, 652, 654, 660, 661, 698, 707, 708, 709, 728, 733, 734, 737, 738, 743, 745, 746, 747, 749, 756, 758, 762, 766, 767, 773, 777, 795, 800, 804, 805, 806, 812, 822, 823, 824, 837, 841, 844, 845, 859, 860, 863, 889, 892, 939, 1092, 1180, 1189, 1191, 1193, 1195, 1196, 1213, 1219, 1225, 1226, 1273], "ham": [36, 37, 39, 41, 42, 45, 160, 163, 164, 167, 168, 169, 170, 171, 177, 184, 193, 194, 196, 207, 212, 214, 216, 219, 223, 228, 230, 233, 236, 239, 240, 241, 248, 250, 251, 253, 258, 259, 260, 261, 262, 266, 271, 272, 301, 358, 548, 795, 800, 804, 805, 806, 812, 824, 837, 841, 844, 845, 859, 866, 889, 939], "dirpath": [36, 37, 41, 42, 45, 132, 301], "new_fil": [36, 37, 41, 42, 45, 301], "textiowrapp": [37, 301], "include_bom": [37, 58, 301, 889], "include_head": [37, 40, 58, 119, 265, 301, 889], "line_termin": [37, 58, 301, 889], "quote_char": [37, 58, 118, 119, 132, 301, 889], "batch_siz": [37, 58, 118, 119, 120, 136, 138, 301, 889], "1024": [37, 45, 58, 61, 118, 119, 120, 136, 301, 889], "datetime_format": [37, 58, 301, 889], "date_format": [37, 58, 301, 889], "time_format": [37, 58, 301, 889], "null_valu": [37, 58, 118, 119, 132, 301, 889], "quote_styl": [37, 58, 301, 889], "csvquotestyl": [37, 58, 301, 889], "comma": [37, 301], "csv": [37, 58, 59, 60, 61, 118, 119, 123, 132, 301, 789, 889], "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 58, 61, 65, 72, 86, 87, 88, 89, 107, 108, 109, 110, 111, 112, 113, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 137, 138, 141, 142, 143, 144, 149, 156, 157, 159, 169, 174, 186, 188, 189, 191, 192, 194, 203, 204, 205, 208, 210, 211, 215, 222, 224, 226, 235, 237, 238, 239, 245, 248, 252, 253, 257, 258, 260, 264, 265, 266, 268, 269, 278, 301, 312, 314, 316, 338, 389, 390, 409, 410, 420, 423, 448, 462, 482, 503, 512, 517, 518, 525, 535, 537, 548, 570, 578, 581, 583, 585, 586, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 604, 605, 607, 610, 614, 615, 620, 630, 631, 632, 633, 634, 640, 650, 651, 652, 653, 654, 656, 657, 658, 659, 662, 663, 664, 668, 671, 689, 693, 695, 697, 699, 703, 706, 707, 710, 711, 720, 721, 723, 724, 725, 728, 729, 735, 736, 737, 739, 742, 750, 753, 754, 755, 759, 764, 765, 767, 768, 777, 793, 798, 799, 805, 807, 816, 817, 819, 820, 824, 825, 830, 834, 841, 843, 847, 849, 852, 858, 859, 861, 871, 877, 889, 892, 896, 897, 899, 920, 948, 964, 973, 974, 997, 998, 1008, 1011, 1033, 1043, 1045, 1046, 1072, 1073, 1075, 1092, 1101, 1106, 1107, 1114, 1122, 1140, 1142, 1144, 1146, 1147, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1164, 1166, 1170, 1172, 1176, 1180, 1181, 1185, 1195, 1196, 1197, 1198, 1199, 1205, 1215, 1216, 1217, 1218, 1219, 1221, 1222, 1223, 1224, 1227, 1228, 1229, 1233, 1236, 1244, 1249, 1254, 1261, 1263, 1273, 1281], "instead": [37, 43, 44, 65, 69, 81, 88, 89, 118, 119, 120, 123, 129, 130, 132, 138, 148, 186, 188, 204, 205, 211, 222, 224, 236, 237, 238, 241, 242, 245, 246, 261, 274, 275, 276, 278, 301, 304, 326, 363, 364, 380, 392, 394, 398, 402, 405, 407, 412, 416, 419, 431, 442, 517, 535, 578, 607, 608, 636, 637, 640, 650, 656, 657, 658, 659, 660, 661, 662, 664, 671, 691, 699, 703, 708, 720, 721, 722, 723, 724, 725, 728, 735, 736, 737, 750, 753, 759, 764, 765, 768, 777, 799, 810, 816, 845, 846, 847, 849, 850, 864, 865, 867, 889, 892, 908, 949, 950, 964, 976, 978, 982, 989, 992, 995, 1000, 1004, 1007, 1019, 1051, 1057, 1060, 1067, 1069, 1071, 1106, 1140, 1165, 1168, 1172, 1173, 1182, 1201, 1202, 1205, 1215, 1221, 1222, 1223, 1224, 1227, 1229, 1236, 1255, 1273, 1277, 1281], "whether": [37, 58, 111, 113, 150, 153, 159, 171, 181, 204, 243, 264, 301, 312, 314, 329, 330, 399, 418, 487, 488, 606, 777, 793, 829, 830, 848, 853, 858, 889, 892, 896, 897, 911, 912, 940, 943, 983, 1006, 1026, 1076, 1077, 1167, 1273, 1281], "utf": [37, 58, 71, 301, 889], "bom": [37, 58, 301, 889], "header": [37, 40, 45, 58, 61, 114, 118, 119, 123, 132, 170, 226, 265, 301, 889], "field": [37, 39, 58, 73, 103, 105, 110, 260, 267, 301, 525, 588, 630, 631, 633, 653, 654, 674, 711, 712, 715, 716, 741, 759, 777, 860, 889, 964, 1114, 1140, 1149, 1196, 1216, 1218, 1219, 1240, 1242, 1273], "symbol": [37, 58, 118, 119, 132, 301, 777, 889], "end": [37, 40, 58, 118, 119, 130, 132, 188, 301, 351, 354, 355, 386, 417, 442, 518, 621, 627, 630, 642, 651, 655, 657, 658, 661, 699, 720, 721, 723, 724, 727, 735, 736, 764, 765, 767, 777, 816, 821, 828, 839, 889, 892, 935, 970, 1005, 1107, 1192, 1195, 1207, 1216, 1220, 1222, 1223], "byte": [37, 45, 58, 61, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 172, 301, 636, 638, 889, 1027, 1201, 1203, 1273], "quot": [37, 38, 58, 118, 119, 121, 132, 301, 889], "specifi": [37, 40, 58, 81, 93, 103, 105, 123, 129, 148, 159, 160, 172, 173, 176, 187, 188, 189, 190, 191, 192, 207, 224, 235, 236, 238, 241, 242, 243, 245, 249, 264, 267, 274, 275, 279, 301, 362, 439, 440, 441, 442, 447, 570, 584, 585, 593, 594, 595, 596, 597, 599, 600, 601, 607, 617, 702, 704, 705, 706, 720, 721, 723, 724, 727, 756, 759, 764, 765, 777, 793, 795, 808, 811, 815, 816, 817, 818, 819, 820, 824, 843, 845, 846, 848, 849, 853, 858, 860, 864, 865, 869, 889, 948, 1027, 1028, 1029, 1030, 1036, 1146, 1172, 1273], "defin": [37, 40, 48, 58, 120, 145, 146, 148, 157, 160, 169, 173, 188, 189, 191, 192, 211, 222, 225, 235, 269, 281, 287, 301, 316, 466, 500, 523, 537, 574, 578, 589, 590, 593, 594, 595, 596, 597, 599, 600, 601, 697, 720, 721, 723, 724, 739, 742, 759, 764, 765, 777, 795, 805, 808, 816, 817, 819, 820, 838, 843, 861, 871, 877, 889, 892, 899, 1050, 1089, 1122, 1140, 1150, 1273], "chrono": [37, 58, 301, 420, 423, 662, 663, 664, 668, 889, 1008, 1011, 1227, 1228, 1229, 1233], "rust": [37, 45, 58, 100, 120, 124, 126, 130, 211, 287, 301, 631, 889, 1122, 1196, 1273], "crate": [37, 58, 301, 621, 623, 624, 629, 630, 631, 632, 645, 646, 662, 663, 664, 668, 889, 892, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1210, 1211, 1227, 1228, 1229, 1233], "fraction": [37, 58, 141, 142, 143, 144, 239, 301, 418, 512, 571, 604, 662, 664, 777, 889, 1006, 1101, 1136, 1164, 1227, 1229, 1273], "second": [37, 58, 141, 142, 143, 144, 147, 188, 208, 235, 270, 301, 397, 401, 404, 406, 411, 413, 417, 430, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 662, 664, 720, 721, 722, 723, 724, 725, 763, 764, 765, 767, 777, 816, 825, 843, 889, 892, 1001, 1005, 1018, 1019, 1227, 1229, 1282], "infer": [37, 58, 73, 107, 109, 110, 111, 112, 113, 118, 119, 120, 123, 127, 128, 130, 132, 136, 137, 157, 211, 301, 431, 586, 633, 634, 662, 663, 664, 665, 668, 753, 777, 889, 1005, 1019, 1147, 1198, 1199, 1227, 1228, 1229, 1230, 1233, 1273], "timeunit": [37, 48, 50, 58, 301, 387, 389, 422, 434, 664, 720, 721, 722, 723, 724, 725, 889, 892, 971, 973, 1010, 1022, 1229], "frame": [37, 38, 40, 58, 65, 66, 67, 68, 69, 70, 81, 88, 89, 110, 119, 123, 129, 141, 142, 148, 160, 161, 166, 205, 206, 211, 218, 222, 225, 236, 237, 238, 268, 269, 301, 795, 796, 802, 835, 838, 861, 889, 892, 947, 1273, 1281, 1282], "repres": [37, 40, 58, 63, 79, 107, 109, 111, 112, 113, 120, 123, 250, 271, 278, 301, 475, 477, 520, 527, 535, 619, 690, 693, 707, 709, 725, 727, 739, 741, 742, 754, 755, 758, 766, 773, 777, 854, 862, 889, 1165, 1169, 1184, 1262, 1273], "necessari": [37, 58, 72, 91, 123, 260, 301, 889], "non_numer": [37, 58, 301, 889], "never": [37, 58, 120, 207, 236, 301, 824, 889], "strategi": [37, 58, 81, 89, 118, 145, 146, 147, 148, 150, 176, 188, 191, 207, 208, 221, 269, 301, 316, 447, 525, 537, 777, 811, 816, 819, 824, 825, 861, 889, 1036, 1114, 1273], "put": [37, 58, 301, 889], "around": [37, 58, 301, 889], "thei": [37, 40, 58, 72, 88, 89, 90, 91, 110, 132, 154, 209, 238, 301, 647, 658, 659, 777, 799, 889, 892], "record": [37, 42, 58, 126, 138, 208, 260, 301, 825, 889], "termin": [37, 58, 301, 889], "indistinguish": [37, 58, 301, 889], "even": [37, 58, 118, 301, 574, 578, 777, 889, 1140, 1273], "invalid": [37, 58, 118, 119, 132, 301, 633, 635, 666, 685, 777, 889, 1198, 1200, 1231], "g": [37, 58, 117, 118, 119, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 138, 156, 204, 260, 268, 301, 309, 316, 442, 537, 609, 727, 777, 803, 841, 889, 1026, 1167, 1254, 1273, 1282], "pars": [37, 58, 65, 118, 119, 121, 123, 128, 132, 135, 136, 159, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 301, 362, 466, 536, 570, 585, 617, 633, 634, 644, 665, 666, 694, 696, 702, 704, 705, 706, 714, 718, 731, 744, 748, 756, 757, 759, 761, 767, 777, 793, 815, 818, 845, 846, 849, 853, 858, 864, 865, 869, 889, 948, 1050, 1146, 1172, 1198, 1199, 1209, 1229, 1230, 1231, 1273], "valid": [37, 40, 48, 51, 58, 65, 120, 124, 126, 130, 150, 154, 172, 207, 301, 379, 621, 623, 624, 629, 630, 631, 632, 635, 645, 646, 767, 777, 824, 889, 892, 963, 1027, 1043, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1200, 1210, 1211, 1273], "integ": [37, 40, 54, 55, 56, 57, 58, 75, 76, 77, 78, 139, 146, 148, 149, 151, 169, 188, 235, 258, 301, 313, 361, 418, 451, 452, 569, 578, 583, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 644, 666, 692, 699, 731, 735, 736, 753, 777, 805, 816, 843, 889, 892, 945, 1006, 1039, 1060, 1140, 1144, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1169, 1209, 1231, 1273, 1281, 1282], "aren": [37, 58, 301, 889], "t": [37, 39, 58, 67, 68, 89, 118, 123, 129, 132, 188, 211, 225, 266, 268, 301, 316, 379, 386, 395, 416, 436, 439, 440, 441, 497, 537, 570, 574, 629, 632, 659, 662, 664, 767, 777, 816, 838, 859, 889, 892, 963, 1004, 1025, 1026, 1028, 1029, 1030, 1086, 1122, 1167, 1194, 1197, 1223, 1224, 1227, 1229, 1254, 1263, 1273], "strictli": [37, 58, 72, 91, 301, 809, 889], "table_nam": [38, 40, 301], "connect": [38, 118, 120, 121, 124, 126, 130, 135, 137, 138, 301, 790], "if_table_exist": [38, 301], "dbwritemod": [38, 301], "fail": [38, 39, 108, 122, 124, 128, 130, 133, 136, 137, 141, 142, 156, 266, 301, 327, 421, 525, 662, 663, 664, 668, 777, 859, 889, 1122, 1227, 1228, 1229, 1233, 1273], "dbwriteengin": [38, 301], "sqlalchemi": [38, 120, 140, 301], "databas": [38, 120, 121, 301, 789], "qualifi": [38, 301], "creat": [38, 40, 72, 91, 107, 111, 113, 118, 119, 120, 121, 124, 126, 130, 133, 134, 146, 147, 148, 149, 150, 151, 161, 162, 188, 189, 192, 223, 226, 235, 270, 274, 277, 301, 389, 417, 431, 525, 582, 590, 593, 594, 596, 599, 600, 601, 651, 705, 719, 720, 721, 722, 723, 724, 725, 763, 764, 765, 773, 777, 796, 797, 802, 807, 816, 817, 820, 843, 864, 868, 889, 947, 951, 964, 973, 1005, 1019, 1133, 1140, 1143, 1216, 1254, 1273, 1281, 1282], "append": [38, 39, 148, 174, 207, 208, 301, 582, 767, 777, 824, 825, 889, 1033, 1273], "your": [38, 40, 72, 81, 91, 118, 119, 120, 121, 123, 138, 205, 211, 237, 238, 241, 257, 274, 279, 287, 301, 316, 390, 537, 631, 662, 663, 664, 671, 742, 777, 821, 828, 830, 845, 864, 869, 877, 889, 974, 1122, 1196, 1227, 1228, 1229, 1236, 1273, 1282], "special": [38, 118, 119, 121, 132, 277, 301, 592, 630, 777, 868, 889, 899, 1122, 1152, 1195, 1273], "uri": [38, 39, 120, 121, 122, 133, 134, 301], "postgresql": [38, 120, 121, 301, 570, 777], "user": [38, 120, 121, 157, 211, 225, 281, 287, 301, 316, 535, 537, 574, 606, 697, 742, 777, 838, 871, 877, 889, 899, 1122, 1170, 1273], "pass": [38, 39, 40, 45, 68, 81, 109, 120, 121, 123, 130, 132, 137, 138, 141, 143, 146, 148, 150, 159, 164, 167, 187, 188, 191, 194, 210, 224, 225, 235, 241, 245, 249, 253, 261, 264, 270, 274, 278, 279, 301, 304, 316, 396, 413, 416, 445, 464, 517, 536, 537, 570, 574, 585, 590, 593, 594, 595, 596, 597, 599, 600, 601, 607, 617, 657, 658, 659, 693, 702, 710, 720, 731, 759, 767, 773, 777, 793, 804, 815, 816, 817, 819, 820, 822, 829, 830, 838, 843, 845, 849, 851, 853, 858, 864, 869, 877, 889, 899, 980, 1004, 1034, 1045, 1075, 1106, 1121, 1122, 1146, 1172, 1222, 1223, 1224, 1244, 1255, 1273, 1277], "server": [38, 120, 121, 301], "port": [38, 118, 120, 121, 124, 126, 135, 301], "sqlite": [38, 120, 301], "db": [38, 121, 301], "replac": [38, 39, 118, 119, 132, 175, 176, 232, 233, 265, 274, 275, 301, 389, 416, 535, 536, 646, 647, 777, 810, 864, 865, 889, 973, 1004, 1121, 1165, 1168, 1169, 1211, 1212, 1273], "insert": [38, 118, 119, 124, 126, 130, 132, 135, 136, 137, 197, 198, 231, 265, 267, 301, 605, 620, 671, 777, 860, 889, 1166, 1185, 1236, 1273], "mode": [38, 39, 58, 59, 60, 61, 65, 87, 88, 141, 143, 226, 301, 630, 750, 753, 768, 777, 798, 799, 889, 1195, 1273, 1281], "new": [38, 39, 40, 123, 132, 154, 182, 196, 197, 198, 211, 222, 223, 230, 231, 254, 265, 267, 268, 269, 274, 275, 301, 311, 389, 444, 456, 465, 534, 557, 585, 589, 645, 646, 653, 654, 672, 674, 680, 773, 777, 789, 814, 841, 857, 860, 861, 864, 865, 871, 877, 889, 895, 973, 1032, 1041, 1133, 1145, 1146, 1150, 1210, 1211, 1218, 1219, 1237, 1240, 1246, 1251, 1273, 1281], "alreadi": [38, 39, 301, 379, 497, 689, 777, 963, 1086, 1261, 1273], "adbc": [38, 120, 121, 301], "affect": [38, 141, 142, 143, 144, 301], "driver": [38, 120, 121, 301], "provid": [38, 40, 68, 118, 119, 121, 122, 130, 132, 133, 134, 137, 148, 150, 177, 203, 301, 352, 353, 442, 462, 525, 535, 537, 625, 626, 629, 633, 635, 658, 659, 660, 661, 728, 731, 759, 777, 789, 812, 889, 933, 934, 1046, 1072, 1122, 1190, 1191, 1194, 1198, 1200, 1273, 1281, 1282], "otherwis": [38, 86, 120, 123, 147, 152, 211, 218, 238, 241, 287, 301, 352, 362, 380, 439, 440, 441, 525, 537, 545, 574, 578, 583, 594, 595, 596, 597, 599, 601, 621, 625, 632, 693, 742, 767, 777, 835, 845, 877, 889, 933, 948, 964, 1028, 1029, 1030, 1114, 1122, 1140, 1144, 1165, 1168, 1186, 1190, 1197, 1273], "deltalak": [39, 122, 133, 140, 301], "deltat": [39, 301], "ignor": [39, 147, 148, 150, 214, 215, 251, 252, 269, 301, 312, 314, 338, 382, 416, 439, 440, 441, 495, 503, 562, 563, 620, 693, 695, 706, 777, 896, 897, 920, 966, 1004, 1028, 1029, 1030, 1084, 1092, 1131, 1132, 1185, 1273], "merg": [39, 218, 301, 835, 889], "overwrite_schema": [39, 301], "storage_opt": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 301], "delta_write_opt": [39, 301], "delta_merge_opt": [39, 301], "tablemerg": [39, 301], "delta": [39, 50, 122, 133, 250, 271, 301, 520, 527, 599, 601, 619, 690, 707, 709, 754, 755, 758, 766, 777, 789, 854, 862, 889, 1159, 1161, 1184, 1262, 1273], "handl": [39, 87, 88, 89, 114, 118, 119, 132, 138, 301, 382, 495, 671, 777, 798, 799, 889, 966, 1084, 1236, 1273], "throw": [39, 160, 301, 357, 633, 635, 777, 795, 889, 938, 1198, 1200, 1273], "add": [39, 40, 119, 174, 188, 191, 211, 274, 275, 276, 277, 301, 380, 558, 559, 576, 578, 676, 725, 729, 767, 777, 816, 819, 824, 864, 865, 866, 867, 868, 889, 1033, 1273], "anyth": [39, 236, 301], "updat": [39, 166, 301, 802, 889], "extra": [39, 45, 61, 118, 119, 122, 123, 124, 126, 132, 133, 134, 135, 174, 188, 301, 777, 816, 889, 1033, 1273], "storag": [39, 118, 122, 124, 126, 130, 133, 134, 135, 137, 301], "backend": [39, 120, 121, 122, 133, 134, 301], "cloud": [39, 120, 122, 130, 133, 134, 137, 138, 301], "configur": [39, 122, 133, 134, 154, 301], "authent": [39, 122, 133, 134, 301], "see": [39, 40, 41, 42, 48, 87, 88, 120, 121, 122, 123, 130, 133, 134, 137, 141, 142, 143, 144, 148, 150, 164, 188, 207, 225, 226, 301, 304, 362, 447, 482, 535, 614, 621, 629, 630, 632, 645, 720, 721, 723, 724, 752, 764, 765, 773, 777, 798, 799, 816, 889, 892, 942, 948, 1073, 1180, 1186, 1194, 1195, 1197, 1210, 1273, 1277, 1282], "here": [39, 40, 45, 107, 109, 110, 111, 113, 120, 121, 122, 127, 128, 130, 133, 134, 136, 137, 146, 148, 150, 301, 537, 631, 635, 777, 889, 1200], "gc": [39, 122, 133, 134, 301], "azur": [39, 122, 130, 133, 134, 137, 301], "keyword": [39, 68, 122, 130, 133, 164, 225, 236, 241, 242, 261, 274, 275, 279, 301, 448, 574, 756, 759, 767, 777, 838, 845, 846, 864, 865, 869, 889, 1255, 1273], "argument": [39, 45, 91, 118, 122, 130, 132, 133, 164, 167, 173, 187, 188, 189, 190, 191, 192, 212, 214, 219, 224, 225, 226, 235, 241, 242, 243, 249, 251, 261, 267, 270, 274, 275, 279, 301, 417, 431, 442, 448, 466, 570, 574, 590, 593, 594, 595, 596, 597, 599, 600, 601, 617, 657, 658, 659, 693, 700, 701, 702, 704, 705, 706, 708, 710, 727, 756, 759, 767, 777, 804, 808, 815, 816, 817, 818, 819, 820, 838, 843, 845, 846, 848, 853, 860, 864, 865, 869, 889, 1005, 1019, 1050, 1222, 1223, 1224, 1255, 1273], "while": [39, 88, 119, 122, 123, 133, 148, 150, 154, 205, 217, 265, 269, 301, 637, 799, 834, 861, 889, 1043, 1202, 1273], "lake": [39, 122, 133, 301, 789], "typeerror": [39, 301], "unsupport": [39, 301], "arrowinvaliderror": [39, 301], "could": [39, 79, 94, 123, 160, 301, 357, 711, 715, 725, 729, 777, 795, 802, 805, 889, 938, 1043, 1273], "primit": [39, 301, 471, 777, 1254, 1273], "tablenotfounderror": [39, 301], "doesn": [39, 118, 132, 188, 301, 436, 777, 816, 889, 1025, 1263, 1273], "action": [39, 301], "trigger": [39, 261, 301, 777, 1255, 1273], "categor": [39, 51, 72, 90, 91, 141, 142, 143, 144, 207, 258, 301, 358, 359, 380, 578, 585, 683, 777, 892, 939, 940, 941, 942, 943, 964, 1140, 1146, 1256, 1273], "protocol": [39, 108, 121, 156, 301], "nullabl": [39, 301], "To": [39, 88, 175, 212, 214, 219, 251, 301, 362, 384, 385, 447, 621, 629, 630, 632, 645, 658, 659, 660, 661, 669, 777, 810, 889, 948, 968, 969, 1043, 1186, 1194, 1195, 1197, 1210, 1234, 1254, 1273], "pyarrow": [39, 45, 107, 112, 118, 121, 122, 124, 126, 130, 133, 138, 140, 255, 260, 261, 301, 790, 1249, 1253, 1254, 1255, 1273], "ha": [39, 40, 81, 88, 120, 123, 132, 156, 157, 178, 181, 188, 189, 190, 191, 192, 197, 232, 235, 254, 270, 276, 281, 301, 316, 356, 374, 375, 376, 377, 378, 379, 469, 473, 476, 481, 493, 506, 523, 533, 534, 535, 536, 546, 576, 590, 591, 593, 594, 595, 596, 597, 599, 600, 601, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 676, 679, 680, 684, 697, 717, 718, 728, 737, 740, 773, 777, 799, 816, 817, 818, 819, 820, 829, 843, 857, 867, 871, 877, 889, 899, 937, 947, 959, 960, 961, 962, 963, 965, 1043, 1055, 1057, 1061, 1082, 1095, 1112, 1121, 1151, 1167, 1169, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1245, 1246, 1257, 1273], "last": [39, 141, 142, 143, 144, 159, 194, 208, 210, 226, 238, 249, 253, 264, 266, 295, 301, 326, 337, 344, 379, 393, 409, 414, 432, 473, 474, 481, 501, 519, 522, 525, 556, 558, 559, 560, 561, 576, 616, 654, 676, 678, 762, 777, 793, 825, 853, 856, 858, 859, 885, 889, 892, 908, 919, 926, 963, 977, 997, 1002, 1020, 1045, 1061, 1062, 1075, 1090, 1108, 1111, 1182, 1219, 1244, 1273], "filesystem": [39, 122, 133, 134, 301], "table_path": [39, 122, 133, 134, 301], "match": [39, 40, 48, 89, 101, 107, 109, 110, 111, 113, 127, 128, 136, 141, 142, 143, 144, 160, 176, 207, 208, 236, 269, 301, 543, 585, 598, 621, 622, 623, 624, 627, 629, 630, 632, 633, 635, 645, 646, 647, 655, 662, 663, 664, 767, 777, 795, 811, 824, 825, 861, 889, 892, 1060, 1069, 1146, 1158, 1186, 1187, 1188, 1189, 1192, 1194, 1195, 1197, 1198, 1200, 1210, 1211, 1212, 1220, 1227, 1228, 1229, 1273], "version": [39, 86, 91, 122, 123, 133, 140, 156, 157, 178, 181, 188, 189, 190, 191, 192, 193, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 301, 316, 363, 364, 374, 375, 376, 377, 378, 392, 394, 398, 402, 405, 407, 409, 410, 412, 416, 419, 431, 434, 460, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 576, 591, 608, 622, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 662, 664, 676, 679, 680, 691, 697, 717, 718, 720, 722, 740, 752, 777, 816, 817, 818, 819, 820, 829, 850, 857, 867, 871, 889, 899, 941, 949, 950, 959, 960, 961, 962, 964, 976, 978, 982, 989, 992, 995, 997, 998, 1000, 1004, 1005, 1007, 1019, 1022, 1044, 1051, 1055, 1057, 1060, 1061, 1067, 1069, 1071, 1082, 1095, 1112, 1121, 1140, 1151, 1167, 1169, 1173, 1187, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1227, 1229, 1245, 1246, 1263, 1273], "old": [39, 230, 301, 585, 777, 841, 889, 1146, 1273], "existing_table_path": [39, 301], "store": [39, 118, 130, 134, 174, 205, 237, 301, 358, 939, 1033, 1273], "bucket": [39, 122, 133, 134, 137, 301, 417, 431, 462, 777, 1005, 1019, 1046, 1273], "prefix": [39, 154, 301, 311, 355, 534, 557, 559, 560, 561, 655, 659, 660, 671, 676, 777, 892, 936, 1220, 1225, 1236], "aws_region": [39, 133, 137, 301], "the_aws_region": [39, 301], "aws_access_key_id": [39, 122, 133, 137, 301], "the_aws_access_key_id": [39, 122, 133, 134, 301], "aws_secret_access_kei": [39, 122, 133, 137, 301], "the_aws_secret_access_kei": [39, 122, 133, 134, 301], "pa": [39, 107, 138, 301], "check": [39, 48, 118, 119, 132, 141, 142, 143, 144, 153, 171, 181, 188, 189, 191, 192, 201, 203, 207, 235, 301, 333, 351, 354, 355, 466, 471, 492, 590, 621, 627, 632, 655, 777, 816, 817, 819, 820, 824, 829, 830, 843, 889, 915, 932, 935, 936, 1026, 1051, 1053, 1057, 1058, 1060, 1067, 1068, 1069, 1071, 1072, 1081, 1167, 1186, 1192, 1197, 1220, 1273], "doc": [39, 41, 42, 121, 141, 143, 164, 301], "evolut": [39, 301], "yet": [39, 301], "packag": [39, 120, 123, 301], "therefor": [39, 172, 301, 537, 767, 777, 1027, 1273], "effect": [39, 40, 180, 188, 191, 260, 301, 395, 537, 720, 721, 777, 816, 819, 867, 868, 889, 970, 979], "predic": [39, 58, 59, 60, 61, 87, 88, 132, 135, 136, 137, 138, 177, 203, 236, 301, 448, 691, 729, 767, 777, 798, 799, 807, 809, 812, 829, 830, 839, 841, 851, 867, 868, 889, 1037, 1165, 1168, 1273], "source_alia": [39, 301], "target_alia": [39, 301], "when_matched_update_al": [39, 301], "when_not_matched_insert_al": [39, 301], "execut": [39, 66, 67, 69, 72, 89, 120, 209, 301, 497, 689, 777, 794, 829, 830, 839, 889, 1086, 1261, 1273, 1281], "workbook": [40, 123, 301], "worksheet": [40, 123, 129, 301], "posit": [40, 167, 173, 187, 190, 224, 241, 242, 243, 245, 249, 267, 274, 275, 279, 301, 439, 440, 441, 442, 517, 570, 578, 607, 617, 631, 632, 644, 666, 700, 701, 702, 704, 705, 706, 727, 756, 759, 777, 804, 808, 815, 818, 845, 846, 848, 849, 853, 860, 864, 865, 869, 889, 1028, 1029, 1030, 1106, 1140, 1172, 1196, 1209, 1231, 1273], "tupl": [40, 121, 123, 129, 157, 205, 211, 224, 236, 237, 238, 244, 278, 301, 586, 777, 839, 851, 889, 892, 1147, 1273], "a1": [40, 82, 84, 301], "table_styl": [40, 301], "column_format": [40, 301], "columnformatdict": [40, 301], "dtype_format": [40, 301], "oneormoredatatyp": [40, 146, 301, 1069, 1273], "conditional_format": [40, 301], "conditionalformatdict": [40, 301], "header_format": [40, 301], "column_tot": [40, 301], "columntotalsdefinit": [40, 301], "column_width": [40, 301], "columnwidthsdefinit": [40, 301], "row_tot": [40, 301], "rowtotalsdefinit": [40, 301], "row_height": [40, 301], "sparklin": [40, 301], "sequenc": [40, 73, 81, 107, 109, 110, 111, 113, 118, 119, 120, 123, 127, 128, 129, 132, 136, 146, 147, 148, 159, 166, 173, 174, 207, 208, 217, 222, 224, 225, 226, 238, 249, 258, 264, 268, 269, 270, 301, 380, 471, 525, 533, 535, 574, 578, 585, 617, 660, 661, 674, 697, 702, 711, 712, 715, 716, 729, 731, 740, 741, 742, 752, 757, 777, 793, 802, 808, 824, 825, 834, 838, 853, 858, 861, 889, 964, 965, 1033, 1114, 1140, 1146, 1169, 1240, 1273], "formula": [40, 301, 436, 777, 1025, 1273], "autofilt": [40, 301], "autofit": [40, 301], "hidden_column": [40, 301], "selectortyp": [40, 301, 892], "hide_gridlin": [40, 301], "sheet_zoom": [40, 301], "freeze_pan": [40, 301], "excel": [40, 123, 301], "open": [40, 117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 135, 137, 301, 803, 889], "xlsxwriter": [40, 140, 301], "close": [40, 120, 188, 189, 191, 192, 235, 301, 380, 466, 530, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 614, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 843, 889, 964, 1050, 1140, 1180, 1273], "xlsx": [40, 123, 301], "work": [40, 49, 51, 119, 138, 231, 242, 275, 301, 312, 314, 316, 348, 361, 362, 442, 451, 497, 526, 535, 537, 570, 589, 636, 637, 686, 777, 846, 865, 889, 892, 896, 897, 930, 945, 948, 1039, 1086, 1115, 1201, 1202, 1258, 1273], "directori": [40, 45, 130, 301], "sheet1": [40, 301], "medium": [40, 301], "kei": [40, 81, 86, 89, 130, 134, 137, 188, 205, 207, 208, 218, 224, 226, 230, 234, 237, 238, 269, 278, 301, 448, 537, 585, 759, 777, 809, 816, 824, 825, 835, 841, 842, 861, 889, 1146, 1273], "follow": [40, 45, 86, 118, 119, 122, 132, 133, 134, 141, 188, 208, 211, 225, 235, 270, 301, 413, 417, 431, 535, 574, 581, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601, 674, 685, 720, 721, 723, 724, 742, 764, 765, 767, 769, 770, 772, 777, 778, 779, 782, 784, 785, 786, 816, 825, 838, 843, 889, 1001, 1005, 1019, 1142, 1165, 1168, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280, 1282], "first_column": [40, 301], "last_column": [40, 301], "banded_column": [40, 301], "banded_row": [40, 301], "sheet": [40, 123, 129, 301], "chart": [40, 301, 839, 889], "subsequ": [40, 70, 229, 261, 301, 525, 767, 807, 889, 1255, 1273], "colnam": [40, 132, 148, 170, 301, 806, 889], "given": [40, 65, 66, 81, 96, 107, 109, 110, 111, 113, 118, 119, 120, 121, 123, 124, 126, 127, 128, 129, 130, 132, 136, 137, 143, 144, 145, 146, 148, 149, 150, 151, 157, 159, 172, 173, 175, 188, 189, 191, 192, 203, 211, 224, 225, 235, 236, 238, 245, 246, 249, 264, 269, 301, 333, 362, 386, 390, 420, 422, 423, 436, 462, 466, 492, 517, 525, 528, 537, 570, 574, 581, 584, 586, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 605, 607, 608, 630, 631, 642, 643, 662, 664, 671, 674, 697, 727, 740, 741, 742, 753, 754, 755, 777, 793, 808, 816, 817, 819, 820, 829, 830, 838, 843, 849, 850, 853, 858, 861, 871, 877, 889, 892, 899, 915, 948, 970, 974, 1008, 1010, 1011, 1025, 1027, 1046, 1050, 1072, 1081, 1106, 1114, 1117, 1120, 1122, 1133, 1142, 1147, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1166, 1172, 1173, 1195, 1196, 1207, 1208, 1227, 1229, 1236, 1260, 1264, 1273, 1281, 1282], "dd": [40, 301], "mm": [40, 301], "yyyi": [40, 301], "overridden": [40, 107, 109, 111, 113, 127, 128, 152, 301, 889], "basi": [40, 148, 301], "param": [40, 107, 109, 110, 111, 113, 118, 119, 127, 128, 132, 147, 148, 150, 236, 301, 889], "It": [40, 41, 49, 51, 58, 59, 60, 61, 72, 87, 88, 91, 138, 166, 218, 225, 268, 269, 277, 287, 301, 379, 380, 417, 462, 537, 545, 578, 589, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 773, 777, 798, 799, 802, 829, 830, 835, 861, 868, 877, 889, 943, 963, 964, 1005, 1046, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1165, 1168, 1273], "float_dtyp": [40, 301], "simplifi": [40, 58, 59, 60, 61, 87, 88, 301, 798, 799, 807, 809, 839, 851, 889], "uniform": [40, 301, 578, 777, 1140, 1273], "condit": [40, 169, 177, 236, 301, 448, 627, 655, 703, 729, 767, 777, 805, 812, 889], "suppli": [40, 107, 109, 110, 111, 113, 120, 127, 128, 136, 177, 236, 301, 448, 574, 777, 812, 889], "typenam": [40, 301], "3_color_scal": [40, 301], "data_bar": [40, 301], "make": [40, 73, 89, 107, 112, 118, 119, 124, 126, 130, 135, 218, 222, 229, 270, 301, 440, 441, 462, 560, 561, 570, 584, 653, 777, 835, 889, 1029, 1030, 1046, 1218, 1273, 1282], "icon": [40, 301], "multipl": [40, 68, 87, 88, 89, 118, 119, 123, 129, 132, 135, 136, 137, 146, 150, 159, 167, 172, 174, 177, 187, 188, 196, 206, 224, 226, 238, 241, 243, 249, 264, 269, 274, 279, 301, 500, 523, 542, 546, 553, 554, 570, 585, 586, 589, 593, 594, 595, 596, 597, 599, 600, 601, 617, 702, 708, 715, 716, 729, 740, 741, 743, 747, 752, 757, 760, 767, 773, 777, 793, 798, 799, 804, 812, 815, 816, 845, 848, 853, 858, 861, 864, 869, 877, 889, 898, 1027, 1033, 1089, 1112, 1127, 1146, 1147, 1273], "singl": [40, 66, 81, 87, 88, 89, 118, 119, 120, 121, 123, 130, 132, 137, 146, 160, 167, 168, 169, 174, 183, 193, 203, 207, 211, 224, 236, 238, 249, 278, 301, 316, 334, 362, 413, 455, 458, 460, 493, 494, 500, 523, 535, 537, 582, 585, 586, 617, 620, 691, 697, 702, 705, 706, 736, 741, 742, 757, 765, 777, 795, 798, 799, 804, 805, 824, 853, 889, 916, 948, 1001, 1033, 1044, 1082, 1083, 1089, 1143, 1146, 1147, 1185, 1249, 1273], "across": [40, 81, 121, 193, 213, 215, 220, 252, 301, 460, 694, 696, 711, 712, 714, 718, 744, 748, 761, 777, 1044, 1273], "heatmap": [40, 301], "min": [40, 45, 61, 166, 176, 220, 226, 235, 301, 364, 371, 376, 447, 570, 581, 590, 596, 748, 756, 777, 802, 811, 843, 889, 950, 956, 960, 965, 1036, 1142, 1156, 1273, 1282], "entir": [40, 87, 88, 301, 798, 799, 889], "made": [40, 120, 301, 1254, 1273], "abov": [40, 141, 226, 301, 767], "than": [40, 58, 59, 60, 61, 87, 88, 106, 111, 113, 118, 119, 120, 123, 129, 132, 138, 148, 150, 161, 187, 190, 205, 208, 211, 224, 236, 237, 239, 268, 287, 301, 457, 459, 484, 512, 532, 535, 537, 548, 578, 589, 604, 614, 636, 642, 643, 654, 671, 707, 720, 742, 777, 798, 799, 815, 818, 825, 877, 889, 1101, 1122, 1140, 1150, 1164, 1180, 1201, 1207, 1208, 1219, 1236, 1273, 1282], "bold": [40, 301], "font_color": [40, 301], "702963": [40, 301], "total": [40, 172, 282, 301, 394, 398, 402, 405, 407, 412, 419, 424, 425, 426, 427, 428, 429, 430, 485, 505, 777, 872, 876, 978, 982, 989, 992, 995, 1000, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1027, 1074, 1094, 1273], "export": [40, 205, 206, 237, 238, 257, 260, 301, 773], "associ": [40, 66, 68, 81, 121, 147, 238, 301], "sum": [40, 65, 172, 180, 187, 188, 203, 226, 235, 252, 279, 301, 372, 373, 378, 436, 448, 525, 537, 545, 547, 548, 549, 585, 590, 600, 691, 693, 711, 713, 714, 715, 717, 718, 729, 742, 752, 761, 777, 798, 799, 803, 807, 809, 815, 816, 837, 839, 843, 847, 851, 869, 889, 892, 957, 958, 962, 1025, 1027, 1160, 1273], "must": [40, 108, 109, 122, 133, 134, 138, 166, 173, 188, 189, 191, 192, 208, 218, 235, 236, 301, 380, 525, 535, 578, 585, 590, 593, 594, 595, 596, 597, 599, 600, 601, 767, 777, 802, 808, 816, 817, 819, 820, 825, 829, 830, 835, 843, 889, 964, 965, 1140, 1146, 1273], "funcnam": [40, 301], "averag": [40, 301, 439, 440, 441, 581, 777, 1028, 1029, 1030, 1142, 1273], "count_num": [40, 301], "count": [40, 65, 138, 158, 166, 188, 208, 222, 223, 235, 265, 270, 276, 292, 301, 317, 334, 369, 374, 413, 462, 485, 493, 494, 505, 537, 555, 568, 590, 593, 594, 595, 596, 597, 599, 600, 601, 623, 624, 687, 689, 698, 710, 738, 749, 777, 792, 802, 816, 825, 837, 843, 867, 876, 882, 889, 916, 965, 1001, 1046, 1074, 1082, 1083, 1094, 1129, 1135, 1188, 1189, 1259, 1261, 1273], "std_dev": [40, 301], "var": [40, 151, 301, 601, 777, 889, 1273], "pixel": [40, 301], "unit": [40, 48, 50, 141, 142, 143, 144, 148, 150, 172, 301, 387, 389, 396, 422, 434, 531, 546, 662, 664, 688, 720, 721, 722, 723, 724, 725, 731, 777, 839, 889, 892, 971, 973, 980, 1010, 1022, 1027, 1120, 1227, 1229, 1260, 1273, 1282], "hand": [40, 118, 119, 132, 301, 513, 514, 515, 516, 1102, 1103, 1104, 1105], "side": [40, 188, 189, 191, 192, 235, 301, 466, 513, 514, 515, 516, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 843, 889, 1050, 1102, 1103, 1104, 1105, 1166, 1273], "call": [40, 69, 72, 91, 119, 120, 141, 142, 143, 144, 148, 150, 154, 187, 188, 191, 209, 211, 235, 300, 301, 316, 370, 373, 481, 537, 556, 558, 559, 560, 561, 576, 610, 676, 708, 773, 777, 790, 815, 816, 817, 819, 820, 843, 888, 889, 892, 899, 1122, 1176, 1273], "ad": [40, 110, 123, 188, 191, 265, 269, 274, 275, 301, 315, 445, 711, 712, 715, 716, 777, 816, 819, 861, 864, 865, 889, 964, 1034, 1140, 1273], "wise": [40, 81, 120, 180, 301, 318, 319, 320, 321, 322, 323, 365, 366, 367, 443, 529, 611, 612, 613, 681, 682, 715, 716, 729, 752, 777, 900, 901, 902, 903, 904, 905, 952, 953, 954, 1031, 1118, 1119, 1177, 1178, 1179, 1247, 1248, 1273], "particip": [40, 301], "distinct": [40, 150, 224, 278, 301, 348, 469, 470, 473, 474, 526, 581, 589, 725, 777, 930, 1055, 1056, 1061, 1062, 1115, 1142, 1150, 1273, 1282], "referenc": [40, 301, 674], "differ": [40, 118, 138, 141, 143, 174, 188, 193, 205, 235, 237, 238, 257, 265, 301, 382, 393, 413, 414, 416, 432, 438, 460, 495, 513, 515, 525, 537, 562, 563, 565, 585, 662, 687, 728, 731, 737, 777, 807, 816, 843, 889, 892, 942, 966, 977, 1001, 1002, 1004, 1020, 1026, 1033, 1044, 1084, 1102, 1104, 1122, 1131, 1132, 1146, 1167, 1227, 1273], "row_index": [40, 301], "height": [40, 169, 301], "intersect": [40, 301, 514, 892, 1103], "bodi": [40, 301], "start": [40, 117, 118, 119, 120, 121, 124, 126, 129, 130, 132, 135, 136, 137, 152, 182, 187, 188, 190, 191, 209, 248, 254, 270, 276, 277, 301, 351, 354, 355, 393, 408, 414, 417, 431, 432, 442, 456, 518, 593, 594, 596, 599, 600, 601, 615, 621, 627, 630, 643, 651, 655, 657, 659, 660, 671, 680, 699, 711, 715, 720, 721, 723, 724, 727, 729, 735, 736, 764, 765, 767, 777, 814, 815, 816, 818, 819, 839, 852, 857, 867, 868, 889, 892, 936, 971, 974, 977, 980, 981, 988, 991, 994, 996, 999, 1002, 1005, 1010, 1019, 1020, 1041, 1107, 1181, 1192, 1195, 1208, 1216, 1220, 1222, 1224, 1236, 1246, 1273, 1282], "unless": [40, 81, 109, 301, 657, 658, 753, 889, 1222, 1263, 1273], "marker": [40, 301], "compliant": [40, 301], "case": [40, 72, 81, 88, 107, 109, 110, 111, 113, 120, 127, 128, 136, 137, 152, 157, 174, 188, 189, 191, 192, 205, 211, 235, 237, 238, 257, 301, 386, 534, 535, 545, 546, 557, 590, 621, 622, 630, 632, 645, 647, 777, 799, 816, 817, 819, 820, 843, 889, 892, 970, 1033, 1186, 1187, 1195, 1197, 1210, 1212, 1273], "three": [40, 263, 301, 380, 578, 605, 777, 964, 1114, 1140, 1273], "avail": [40, 41, 116, 120, 121, 122, 133, 134, 146, 154, 226, 300, 301, 581, 769, 770, 772, 776, 777, 778, 779, 782, 783, 784, 785, 786, 789, 790, 809, 888, 889, 892, 965, 1142, 1265, 1267, 1269, 1273, 1274, 1278, 1279, 1280], "insert_befor": [40, 301], "insert_aft": [40, 301], "respect": [40, 301, 622, 647, 892, 1187, 1212], "direct": [40, 121, 130, 134, 137, 141, 245, 268, 301, 517, 607, 777, 849, 889, 1106, 1172, 1273], "far": [40, 301], "strongli": [40, 152, 211, 236, 287, 301, 537, 777, 1122, 1273], "advis": [40, 72, 91, 209, 301], "structur": [40, 41, 96, 97, 104, 174, 225, 238, 260, 301, 574, 777, 838, 889, 1033, 1273], "wherev": [40, 211, 287, 301, 537, 777, 1122, 1273], "possibl": [40, 96, 118, 159, 187, 190, 205, 211, 237, 264, 266, 287, 301, 531, 537, 545, 592, 654, 688, 777, 793, 815, 818, 853, 858, 859, 889, 1122, 1152, 1219, 1273], "simpl": [40, 150, 222, 301], "colx": [40, 70, 301, 560, 561, 892, 1282], "coli": [40, 301, 560, 561, 892, 1282], "after": [40, 70, 89, 110, 117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 267, 300, 301, 442, 536, 570, 581, 671, 777, 860, 889, 1033, 1121, 1142, 1236, 1273], "befor": [40, 118, 120, 123, 132, 138, 141, 142, 143, 144, 152, 154, 174, 188, 191, 208, 267, 301, 372, 373, 379, 535, 536, 570, 571, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 671, 677, 754, 755, 777, 816, 819, 822, 825, 860, 889, 957, 958, 963, 1033, 1121, 1136, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1236, 1243, 1273], "most": [40, 67, 107, 118, 119, 121, 132, 141, 142, 143, 144, 301, 546, 553, 571, 654, 777, 1127, 1136, 1219, 1273, 1281], "mandatori": [40, 301], "return_dtyp": [40, 157, 211, 301, 316, 533, 535, 536, 537, 585, 697, 740, 741, 742, 777, 899, 1121, 1122, 1146, 1273], "latter": [40, 174, 301, 1033, 1273], "appropri": [40, 138, 260, 301, 581, 777, 1142, 1273], "pure": [40, 301, 1254, 1273], "actual": [40, 110, 148, 150, 238, 301, 1175, 1273], "indic": [40, 117, 118, 119, 120, 124, 126, 130, 132, 137, 145, 146, 150, 188, 189, 191, 192, 235, 238, 243, 245, 258, 301, 327, 455, 462, 467, 468, 469, 470, 472, 473, 474, 475, 477, 478, 479, 500, 517, 523, 541, 542, 543, 544, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 607, 611, 679, 702, 703, 777, 816, 817, 819, 820, 843, 848, 849, 889, 892, 1040, 1046, 1054, 1055, 1056, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1089, 1106, 1112, 1165, 1166, 1169, 1172, 1177, 1245, 1250, 1273, 1282], "calcul": [40, 81, 166, 188, 250, 271, 301, 382, 439, 440, 441, 482, 495, 513, 520, 527, 531, 598, 614, 619, 688, 690, 707, 709, 754, 755, 758, 766, 777, 802, 816, 854, 862, 889, 965, 966, 1028, 1029, 1030, 1073, 1084, 1102, 1158, 1180, 1184, 1262, 1273], "individu": [40, 61, 148, 154, 235, 260, 301, 537, 630, 777, 798, 843, 889, 946, 1195, 1273], "gridlin": [40, 301], "zoom": [40, 301], "freez": [40, 301], "pane": [40, 301], "top": [40, 264, 301, 858, 889], "index": [40, 108, 112, 115, 118, 119, 124, 126, 130, 132, 135, 136, 137, 140, 156, 178, 182, 184, 188, 189, 191, 192, 197, 198, 203, 205, 208, 226, 232, 233, 235, 236, 237, 245, 248, 254, 260, 262, 269, 270, 276, 277, 301, 310, 324, 325, 326, 328, 331, 332, 337, 413, 455, 456, 458, 489, 490, 500, 501, 517, 518, 523, 525, 590, 593, 594, 595, 596, 597, 599, 600, 601, 605, 607, 615, 621, 629, 632, 651, 679, 680, 735, 738, 777, 814, 816, 817, 819, 820, 825, 843, 849, 852, 857, 861, 867, 868, 889, 906, 907, 908, 909, 910, 913, 914, 919, 1001, 1040, 1041, 1072, 1078, 1079, 1089, 1090, 1106, 1107, 1112, 1114, 1133, 1165, 1166, 1169, 1172, 1181, 1194, 1197, 1216, 1245, 1246, 1273], "thu": [40, 174, 301, 707, 1033, 1273], "altern": [40, 301, 773], "a2": [40, 82, 84, 301], "occur": [40, 87, 88, 301, 334, 493, 494, 553, 581, 777, 798, 799, 807, 809, 839, 851, 889, 916, 1082, 1083, 1127, 1142, 1273], "equival": [40, 107, 109, 110, 111, 113, 122, 127, 128, 136, 188, 203, 222, 301, 309, 313, 437, 438, 452, 457, 459, 484, 532, 552, 554, 564, 565, 566, 569, 575, 637, 675, 685, 692, 728, 737, 777, 816, 889, 1072, 1202, 1232, 1234, 1235, 1273], "top_row": [40, 301], "top_col": [40, 301], "base": [40, 46, 99, 169, 177, 188, 189, 191, 192, 235, 301, 386, 395, 436, 439, 440, 441, 448, 462, 528, 529, 578, 585, 590, 644, 666, 777, 805, 812, 816, 817, 819, 820, 843, 889, 892, 970, 979, 1025, 1028, 1029, 1030, 1046, 1117, 1118, 1140, 1146, 1209, 1231, 1264, 1273, 1282], "scroll": [40, 301], "region": [40, 134, 301], "initit": [40, 301], "5th": [40, 301], "properti": [40, 156, 163, 170, 179, 195, 240, 244, 273, 277, 301, 800, 806, 844, 863, 868, 889, 892, 1273, 1282], "readthedoc": [40, 301], "io": [40, 118, 125, 130, 131, 134, 301, 803, 847, 889], "html": [40, 41, 42, 108, 120, 156, 164, 301], "definit": [40, 146, 301, 482, 777, 1073, 1273], "take": [40, 123, 129, 148, 154, 180, 182, 188, 191, 215, 218, 225, 226, 230, 254, 260, 301, 413, 448, 455, 456, 500, 617, 680, 720, 721, 726, 728, 737, 777, 814, 816, 819, 835, 841, 857, 889, 1001, 1040, 1041, 1089, 1246, 1264, 1273], "care": [40, 301, 316, 537, 606, 777, 1170, 1273], "rel": [40, 121, 122, 133, 134, 141, 142, 143, 144, 301, 413, 439, 440, 441, 595, 597, 599, 601, 777, 1001, 1028, 1029, 1030, 1273], "working_with_conditional_format": [40, 301], "similarli": [40, 110, 188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "well": [40, 118, 119, 120, 132, 226, 301, 466, 777, 1050, 1273], "adjac": [40, 301], "two": [40, 70, 72, 90, 91, 109, 111, 113, 121, 180, 217, 218, 226, 263, 280, 287, 301, 310, 383, 389, 455, 458, 525, 578, 616, 700, 701, 707, 709, 754, 755, 777, 834, 835, 870, 877, 889, 967, 973, 1114, 1140, 1273], "help": [40, 141, 142, 143, 144, 301, 304, 809, 889, 1273, 1277], "where": [40, 65, 81, 120, 121, 147, 169, 174, 188, 205, 217, 237, 250, 269, 271, 301, 327, 433, 436, 438, 520, 527, 565, 584, 605, 614, 617, 619, 647, 690, 703, 707, 709, 754, 755, 758, 766, 767, 777, 805, 816, 834, 854, 861, 862, 889, 909, 1021, 1025, 1033, 1166, 1180, 1184, 1212, 1262, 1264, 1273, 1281], "working_with_sparklin": [40, 301], "inject": [40, 81, 301], "locat": [40, 174, 232, 233, 262, 267, 301, 605, 777, 860, 889, 1033, 1040, 1165, 1166, 1169, 1245, 1273], "syntax": [40, 177, 211, 222, 301, 621, 629, 630, 632, 645, 735, 736, 773, 812, 851, 889, 1186, 1194, 1195, 1197, 1210, 1273], "correctli": [40, 123, 301, 535, 777], "microsoft": [40, 301], "com": [40, 121, 301, 439, 440, 441, 629, 630, 631, 777, 1028, 1029, 1030, 1194, 1195, 1196, 1273], "u": [40, 48, 50, 68, 137, 301, 387, 389, 396, 422, 434, 662, 664, 720, 721, 722, 723, 724, 725, 731, 892, 971, 973, 980, 1010, 1022, 1227, 1229], "offic": [40, 301], "f5ed2452": [40, 301], "2337": [40, 301], "4f71": [40, 301], "bed3": [40, 301], "c8ae6d2b276": [40, 301], "instanti": [40, 120, 241, 274, 301, 845, 864, 889], "basic": [40, 301, 1282], "random": [40, 41, 139, 146, 148, 150, 193, 239, 301, 460, 512, 581, 604, 610, 689, 777, 789, 1044, 1101, 1142, 1164, 1176, 1261, 1273], "dtm": [40, 301, 389, 892, 973], "500": [40, 269, 301, 391, 392, 397, 401, 404, 406, 411, 418, 421, 809, 861, 889, 988, 991, 999, 1153, 1154, 1156, 1273], "val": [40, 234, 301, 537, 574, 683, 767, 777, 842, 889], "10_000": [40, 301], "20_000": [40, 301], "30_000": [40, 301], "increas": [40, 81, 118, 130, 137, 301, 379, 589, 777, 963, 1150, 1273], "b4": [40, 301], "light": [40, 301], "twice": [40, 123, 301], "titl": [40, 65, 301], "explicit": [40, 120, 132, 146, 269, 301, 752, 861, 889], "integr": [40, 301, 1282], "multi_fram": [40, 301], "wb": [40, 301], "coordin": [40, 301], "advanc": [40, 123, 226, 301, 525, 1114, 1282], "min_color": [40, 301], "76933c": [40, 301], "mid_color": [40, 301], "c4d79b": [40, 301], "max_color": [40, 301], "ebf1d": [40, 301], "data_bar_2010": [40, 301], "bar_color": [40, 301], "9bbb59": [40, 301], "bar_negative_color_sam": [40, 301], "bar_negative_border_color_sam": [40, 301], "white": [40, 301], "w": [40, 67, 68, 188, 191, 238, 301, 624, 629, 631, 694, 696, 816, 819, 889, 892, 1189, 1194, 1196, 1223], "get_worksheet_by_nam": [40, 301], "fmt_titl": [40, 301], "add_format": [40, 301], "4f6228": [40, 301], "font_siz": [40, 301], "12": [40, 81, 114, 118, 147, 148, 166, 188, 204, 208, 235, 246, 270, 301, 311, 363, 364, 372, 386, 388, 389, 393, 403, 408, 409, 410, 413, 414, 415, 417, 431, 432, 433, 465, 481, 534, 571, 576, 580, 590, 600, 608, 609, 624, 639, 649, 665, 676, 712, 719, 720, 721, 722, 723, 724, 741, 764, 765, 777, 802, 816, 821, 825, 828, 843, 850, 851, 856, 889, 892, 949, 950, 970, 972, 973, 990, 996, 1005, 1019, 1122, 1162, 1173, 1189, 1204, 1214, 1230, 1273, 1282], "ital": [40, 301], "customis": [40, 301], "trend": [40, 301], "win_loss": [40, 301], "subtl": [40, 301], "tone": [40, 301], "hidden": [40, 301], "id": [40, 89, 118, 134, 265, 277, 287, 301, 589, 645, 646, 687, 777, 868, 877, 889, 1150, 1259, 1273, 1282], "q1": [40, 301], "55": [40, 83, 301], "20": [40, 118, 123, 148, 166, 174, 196, 198, 218, 225, 227, 231, 233, 301, 324, 325, 326, 382, 388, 391, 392, 397, 401, 403, 404, 406, 411, 417, 418, 421, 431, 434, 460, 465, 574, 593, 594, 596, 599, 600, 601, 691, 731, 739, 764, 777, 802, 835, 838, 889, 892, 966, 972, 976, 990, 1005, 1019, 1022, 1031, 1273], "35": [40, 301, 382, 777, 966, 1273], "q2": [40, 301], "30": [40, 166, 174, 188, 196, 225, 231, 233, 256, 274, 301, 324, 325, 326, 382, 389, 391, 392, 397, 401, 404, 406, 408, 409, 411, 415, 416, 417, 418, 421, 424, 431, 432, 460, 609, 739, 764, 777, 802, 816, 838, 864, 889, 892, 966, 973, 997, 1004, 1005, 1012, 1019, 1273, 1282], "60": [40, 174, 301, 397, 404, 406, 418, 430, 600, 662, 777, 1002, 1006, 1018, 1227], "q3": [40, 301], "40": [40, 140, 166, 174, 225, 301, 417, 431, 460, 527, 665, 777, 802, 838, 889, 984, 1019, 1230], "80": [40, 301], "q4": [40, 301], "75": [40, 166, 301, 313, 569, 578, 593, 594, 595, 596, 599, 600, 601, 742, 777, 802, 889, 965, 1046, 1140, 1273, 1282], "account": [40, 114, 121, 134, 301, 413, 439, 440, 441, 777, 1001, 1028, 1029, 1030, 1273], "flavour": [40, 120, 301], "integer_dtyp": [40, 241, 301, 845, 889, 892], "0_": [40, 301], "just": [40, 132, 217, 301, 834, 889], "unifi": [40, 301, 892], "2_color_scal": [40, 301], "95b3d7": [40, 301], "ffffff": [40, 301], "standardis": [40, 301], "z": [40, 67, 73, 89, 114, 146, 148, 172, 200, 202, 207, 217, 237, 238, 265, 268, 301, 309, 311, 313, 460, 491, 534, 537, 557, 558, 559, 560, 561, 569, 576, 584, 585, 622, 630, 647, 662, 664, 676, 694, 696, 714, 744, 748, 753, 761, 777, 824, 834, 852, 889, 892, 1036, 1146, 1187, 1195, 1212, 1227, 1229, 1273, 1281], "score": [40, 301], "conjunct": [40, 90, 123, 129, 301, 735, 738], "a123": [40, 301], "b345": [40, 301], "c567": [40, 301], "d789": [40, 301], "e101": [40, 301], "45": [40, 140, 166, 235, 301, 389, 417, 431, 590, 600, 624, 630, 673, 700, 701, 739, 764, 777, 802, 843, 889, 892, 973, 1005, 1019, 1189, 1195, 1239, 1282], "85": [40, 301, 1282], "font": [40, 301], "consola": [40, 301], "stdev": [40, 301], "ipccompress": [41, 42, 301], "futur": [41, 88, 156, 166, 212, 214, 219, 251, 301, 720, 799, 802, 889, 1263, 1273], "arrow": [41, 42, 59, 107, 120, 121, 124, 126, 135, 205, 237, 238, 255, 257, 301, 889, 1249, 1254, 1273], "ipc": [41, 42, 59, 124, 125, 126, 135, 138, 301, 789, 889], "binari": [41, 120, 123, 301, 351, 353, 354, 355, 892, 932, 935, 936], "feather": [41, 124, 135, 301, 789], "access": [41, 82, 83, 84, 85, 130, 134, 137, 156, 205, 236, 237, 301, 631, 866, 889, 1196, 1282], "python": [41, 42, 64, 108, 118, 119, 120, 140, 141, 143, 156, 205, 211, 237, 238, 257, 287, 301, 316, 389, 533, 535, 537, 631, 720, 721, 723, 724, 764, 765, 767, 777, 783, 877, 899, 973, 985, 986, 987, 993, 1122, 1196, 1253, 1273], "lz4": [41, 42, 45, 59, 61, 301, 889], "zstd": [41, 42, 45, 59, 61, 301, 889], "intern": [41, 120, 139, 205, 301], "might": [41, 118, 119, 132, 152, 159, 260, 264, 301, 316, 537, 687, 777, 793, 853, 858, 889], "implement": [41, 45, 108, 120, 156, 193, 211, 287, 301, 304, 460, 481, 537, 556, 558, 559, 560, 561, 576, 676, 742, 777, 877, 1044, 1122, 1165, 1168, 1273, 1277], "unstabl": [41, 49, 51, 58, 59, 60, 61, 87, 88, 138, 268, 269, 301, 379, 380, 417, 462, 537, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 777, 798, 799, 861, 889, 943, 963, 964, 1005, 1046, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273], "break": [41, 49, 51, 58, 59, 60, 61, 87, 88, 138, 268, 269, 301, 316, 379, 380, 417, 462, 537, 578, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 777, 798, 799, 861, 889, 941, 943, 963, 964, 1005, 1046, 1140, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273], "batch": [42, 87, 88, 116, 119, 120, 126, 136, 138, 301, 798, 799, 829, 830, 889], "iobas": [43, 44, 127, 128, 301, 550, 803, 847, 889], "pretti": [43, 301], "row_ori": [43, 301], "serial": [43, 44, 301, 803, 889], "orient": [43, 82, 84, 111, 113, 301, 889], "slower": [43, 111, 113, 123, 187, 190, 211, 224, 270, 287, 301, 537, 742, 777, 815, 818, 877, 889, 1122, 1273], "common": [43, 81, 87, 88, 89, 269, 301, 534, 557, 777, 783, 798, 799, 807, 809, 839, 851, 861, 889], "write_ndjson": [43, 301], "bit_set": [43, 301, 847, 889], "newlin": [44, 128, 136, 301], "delimit": [44, 58, 128, 136, 226, 258, 301, 620, 889, 1185, 1250, 1273], "parquetcompress": [45, 301], "compression_level": [45, 61, 301, 889], "statist": [45, 61, 118, 119, 130, 137, 166, 301, 440, 441, 482, 593, 594, 595, 596, 597, 598, 599, 600, 601, 614, 777, 802, 889, 965, 1029, 1030, 1073, 1158, 1180, 1273], "row_group_s": [45, 61, 301, 889], "data_page_s": [45, 301], "use_pyarrow": [45, 118, 124, 126, 130, 260, 301, 1253, 1254, 1273], "pyarrow_opt": [45, 122, 130, 133, 301], "parquet": [45, 61, 130, 131, 137, 301, 789, 889], "gzip": [45, 61, 301, 889], "lzo": [45, 61, 301, 889], "brotli": [45, 61, 301, 889], "choos": [45, 59, 61, 188, 226, 301, 816, 889], "good": [45, 59, 61, 205, 301, 889], "perform": [45, 59, 61, 81, 94, 97, 104, 108, 118, 119, 120, 124, 130, 132, 135, 136, 137, 156, 159, 187, 188, 189, 190, 191, 192, 208, 211, 212, 214, 219, 229, 235, 238, 251, 264, 287, 301, 316, 525, 535, 537, 570, 590, 622, 636, 637, 647, 662, 663, 664, 777, 793, 816, 817, 819, 820, 825, 843, 853, 858, 867, 868, 889, 1122, 1187, 1201, 1202, 1212, 1227, 1228, 1229, 1273], "fast": [45, 59, 61, 149, 151, 301, 445, 606, 777, 889, 1034, 1170, 1273, 1282], "decompress": [45, 59, 61, 301, 889], "backward": [45, 61, 176, 208, 301, 350, 410, 447, 777, 811, 825, 889, 998, 1036, 1273], "guarante": [45, 61, 118, 119, 166, 193, 266, 301, 460, 777, 802, 809, 859, 889, 1043, 1044, 1273], "deal": [45, 61, 205, 301, 312, 314, 416, 417, 431, 581, 662, 664, 693, 695, 722, 777, 889, 896, 897, 1004, 1005, 1019, 1142, 1227, 1229, 1273], "older": [45, 61, 301, 889], "reader": [45, 61, 116, 118, 119, 124, 126, 130, 301, 790, 889], "higher": [45, 61, 166, 228, 293, 301, 579, 597, 751, 777, 802, 840, 883, 889, 965, 1141, 1157, 1273], "mean": [45, 61, 118, 119, 124, 130, 132, 166, 176, 187, 188, 208, 215, 226, 235, 270, 279, 301, 413, 417, 431, 444, 447, 590, 593, 594, 595, 596, 597, 599, 600, 601, 614, 620, 629, 720, 721, 723, 724, 725, 764, 765, 767, 777, 802, 811, 815, 816, 825, 829, 830, 843, 869, 889, 965, 1001, 1005, 1019, 1032, 1036, 1043, 1154, 1180, 1185, 1194, 1273], "smaller": [45, 61, 172, 301, 809, 889, 1027, 1273], "disk": [45, 58, 59, 60, 61, 124, 301, 851, 889], "22": [45, 61, 147, 301, 393, 414, 417, 431, 433, 434, 592, 593, 594, 596, 599, 600, 601, 662, 777, 889, 892, 1005, 1019, 1022, 1152, 1227, 1273, 1282], "comput": [45, 61, 87, 89, 94, 172, 187, 208, 261, 266, 279, 293, 301, 308, 318, 319, 320, 321, 322, 323, 340, 341, 342, 345, 346, 349, 360, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 383, 436, 443, 482, 507, 508, 509, 510, 513, 514, 515, 516, 520, 527, 528, 529, 530, 553, 570, 571, 577, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 611, 612, 613, 614, 618, 681, 682, 689, 694, 696, 700, 701, 702, 707, 709, 726, 754, 755, 767, 777, 798, 815, 822, 824, 825, 859, 866, 869, 883, 889, 894, 900, 901, 902, 903, 904, 905, 922, 923, 924, 927, 928, 931, 944, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 967, 1025, 1027, 1031, 1073, 1096, 1097, 1098, 1099, 1102, 1103, 1104, 1105, 1109, 1116, 1117, 1118, 1119, 1127, 1136, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1177, 1178, 1179, 1180, 1183, 1247, 1248, 1255, 1261, 1273], "512": [45, 120, 205, 301, 575, 777, 1136, 1273], "page": [45, 61, 124, 130, 135, 137, 301, 777, 789, 889, 1273], "At": [45, 301], "moment": [45, 164, 301, 482, 614, 777, 1073, 1180, 1273], "write_t": [45, 301], "partition_col": [45, 121, 301], "write_to_dataset": [45, 301], "similar": [45, 152, 180, 208, 245, 301, 420, 423, 517, 570, 607, 738, 767, 777, 809, 825, 849, 889, 1008, 1011, 1106, 1172, 1273], "spark": [45, 301], "partit": [45, 121, 122, 130, 133, 137, 138, 206, 224, 301], "we": [45, 117, 118, 119, 120, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 166, 188, 208, 235, 270, 301, 413, 417, 431, 462, 497, 525, 535, 537, 590, 593, 594, 595, 596, 597, 599, 600, 601, 631, 644, 666, 720, 721, 723, 724, 739, 764, 765, 767, 777, 802, 803, 816, 825, 829, 830, 843, 889, 899, 1001, 1005, 1019, 1046, 1086, 1122, 1196, 1209, 1231, 1273], "use_pyarrow_write_to_dataset": [45, 301], "first": [45, 81, 118, 119, 123, 124, 126, 127, 130, 132, 136, 141, 142, 143, 144, 147, 157, 186, 188, 191, 194, 208, 210, 211, 221, 225, 226, 253, 258, 259, 265, 266, 270, 277, 284, 301, 326, 328, 337, 379, 382, 410, 413, 417, 434, 461, 469, 470, 486, 495, 497, 501, 502, 525, 536, 546, 574, 605, 617, 621, 629, 632, 633, 635, 645, 646, 704, 711, 729, 733, 767, 777, 798, 816, 819, 821, 825, 828, 838, 859, 866, 868, 874, 889, 892, 908, 919, 963, 965, 966, 998, 1001, 1005, 1022, 1045, 1055, 1056, 1075, 1084, 1086, 1090, 1091, 1114, 1121, 1166, 1182, 1194, 1196, 1197, 1198, 1200, 1210, 1211, 1244, 1252, 1273, 1282], "watermark": [45, 301], "partitioned_object": [45, 301], "calendar": [47, 48, 188, 208, 235, 270, 301, 388, 400, 403, 413, 417, 431, 435, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 972, 984, 990, 1001, 1005, 1019, 1023], "time_unit": [48, 50, 387, 389, 396, 422, 434, 664, 720, 721, 722, 723, 724, 725, 731, 892, 971, 973, 980, 1010, 1022, 1229], "time_zon": [48, 390, 392, 416, 664, 720, 721, 722, 723, 724, 892, 970, 974, 979, 1004, 1229], "timezon": [48, 392, 892], "m": [48, 50, 68, 207, 301, 386, 387, 389, 395, 396, 420, 422, 423, 434, 629, 662, 663, 664, 668, 720, 721, 722, 723, 724, 725, 731, 824, 889, 892, 970, 971, 973, 979, 980, 1008, 1010, 1011, 1022, 1194, 1227, 1228, 1229, 1233], "zone": [48, 386, 390, 416, 664, 720, 721, 722, 723, 724, 892, 970, 974, 1004, 1229], "zoneinfo": [48, 892], "run": [48, 58, 59, 60, 61, 87, 88, 149, 151, 187, 190, 209, 211, 226, 242, 266, 275, 287, 301, 316, 379, 497, 535, 537, 588, 589, 637, 756, 777, 798, 799, 807, 809, 815, 818, 829, 830, 834, 839, 846, 851, 859, 865, 889, 892, 963, 1086, 1122, 1149, 1150, 1202, 1273, 1281, 1282], "available_timezon": [48, 892], "128": [49, 83, 1136, 1273], "bit": [49, 52, 53, 54, 55, 56, 57, 75, 76, 77, 78, 583, 621, 777, 1144, 1186, 1273], "progress": [49, 51], "expect": [49, 51, 98, 101, 106, 118, 120, 132, 525, 537, 739, 777, 827, 829, 830, 889], "categori": [51, 72, 91, 258, 301, 358, 359, 380, 462, 578, 777, 939, 941, 964, 1046, 1140, 1273], "iter": [51, 87, 88, 89, 107, 120, 149, 151, 159, 167, 177, 187, 188, 189, 190, 191, 192, 204, 205, 206, 235, 236, 237, 238, 241, 242, 243, 249, 264, 265, 274, 275, 278, 279, 301, 379, 448, 570, 617, 694, 696, 702, 704, 705, 706, 714, 718, 744, 748, 756, 759, 761, 767, 773, 777, 793, 804, 812, 815, 816, 817, 818, 819, 820, 843, 845, 846, 848, 853, 858, 864, 865, 869, 889, 963, 1165, 1273, 1282], "32": [52, 55, 76, 83, 203, 235, 301, 554, 590, 609, 777, 843, 889, 967, 1002, 1136, 1157, 1273], "sign": [54, 55, 56, 57, 413, 583, 671, 777, 892, 1001, 1060, 1144, 1236, 1273], "maintain_ord": [58, 59, 60, 61, 159, 187, 190, 224, 226, 264, 266, 270, 280, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 310, 348, 455, 458, 526, 537, 686, 777, 793, 799, 807, 809, 815, 818, 839, 851, 853, 858, 859, 870, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 930, 1115, 1258, 1273], "type_coercion": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 839, 851, 889], "predicate_pushdown": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 829, 830, 839, 851, 889], "projection_pushdown": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 829, 830, 839, 851, 889], "simplify_express": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 839, 851, 889], "slice_pushdown": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 829, 830, 839, 851, 889], "no_optim": [58, 59, 60, 61, 87, 88, 798, 799, 809, 829, 830, 839, 889], "evalu": [58, 59, 60, 61, 175, 177, 208, 301, 313, 327, 329, 330, 379, 448, 464, 487, 488, 525, 569, 693, 695, 699, 703, 720, 721, 723, 724, 726, 735, 736, 750, 753, 759, 764, 765, 767, 768, 777, 798, 812, 822, 824, 825, 889, 909, 911, 912, 963, 1076, 1077, 1264, 1273], "queri": [58, 59, 60, 61, 65, 67, 87, 88, 120, 121, 124, 132, 135, 136, 137, 174, 209, 225, 301, 535, 537, 635, 777, 798, 799, 807, 809, 821, 828, 839, 851, 867, 868, 871, 877, 889, 1033, 1122, 1200, 1273, 1281], "ram": [58, 59, 60, 61, 889], "maintain": [58, 59, 60, 61, 159, 264, 301, 348, 526, 605, 686, 777, 793, 802, 853, 858, 889, 930, 1115, 1166, 1258, 1273], "slightli": [58, 59, 60, 61, 123, 889], "faster": [58, 59, 60, 61, 120, 123, 174, 260, 268, 301, 316, 537, 687, 777, 889, 899, 1033, 1122, 1273], "coercion": [58, 59, 60, 61, 87, 88, 584, 777, 798, 799, 807, 809, 839, 851, 889], "optim": [58, 59, 60, 61, 87, 88, 130, 132, 135, 136, 137, 205, 209, 225, 229, 237, 266, 301, 798, 799, 807, 809, 829, 830, 839, 851, 859, 867, 868, 877, 889, 944, 1165, 1273], "pushdown": [58, 59, 60, 61, 87, 88, 798, 799, 807, 809, 829, 830, 839, 841, 851, 867, 868, 889, 1165, 1168, 1273], "project": [58, 59, 60, 61, 87, 88, 132, 134, 135, 136, 137, 316, 616, 617, 777, 798, 799, 807, 809, 829, 830, 839, 841, 847, 851, 889], "slice": [58, 59, 60, 61, 82, 87, 88, 172, 194, 206, 253, 301, 502, 522, 537, 545, 547, 591, 593, 594, 595, 596, 597, 599, 600, 601, 777, 798, 799, 807, 809, 829, 830, 839, 851, 889, 1027, 1045, 1091, 1111, 1151, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1244, 1273], "off": [58, 59, 60, 61, 87, 88, 118, 119, 132, 798, 799, 807, 809, 829, 830, 839, 889], "certain": [58, 59, 60, 61, 88, 122, 133, 197, 198, 270, 301, 658, 659, 798, 799, 839, 889, 1273], "lf": [58, 59, 60, 61, 792, 793, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 822, 823, 824, 826, 827, 828, 830, 831, 832, 833, 834, 836, 837, 838, 839, 840, 841, 842, 844, 845, 847, 849, 851, 852, 853, 854, 855, 856, 858, 859, 861, 862, 863, 864, 866, 867, 868, 872, 876, 889, 1281, 1282], "scan_csv": [58, 59, 60, 61, 118, 119, 889], "my_larger_than_ram_fil": [58, 59, 60, 61, 889], "ndjson": [60, 889], "data_pagesize_limit": [61, 889], "reduc": [61, 118, 119, 130, 132, 135, 136, 137, 288, 289, 291, 294, 609, 712, 729, 777, 878, 879, 881, 884, 889, 1124, 1139, 1174, 1243, 1273], "pressur": [61, 118, 119, 130, 132, 136, 137, 609, 777, 889, 1174, 1273], "improv": [61, 124, 135, 535, 777, 889], "speed": [61, 316, 537, 777, 889, 1282], "integer_list": 62, "float_list": 62, "wrap": [64, 114, 466, 777], "arbitrari": [64, 148, 892], "eager": [65, 66, 67, 68, 69, 70, 188, 226, 268, 301, 387, 390, 393, 396, 409, 410, 413, 414, 416, 417, 422, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 593, 594, 596, 599, 600, 601, 699, 703, 720, 721, 723, 724, 731, 735, 736, 750, 753, 759, 764, 765, 768, 776, 777, 816, 830, 889, 970, 971, 974, 977, 979, 980, 981, 987, 988, 991, 994, 996, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1281], "against": [65, 96, 118, 120, 497, 632, 889, 1086, 1197, 1281, 1282], "eagerli": [65, 525], "unset": [65, 147, 416, 525, 1004], "init": [65, 154], "eager_execut": [65, 1281], "itself": [65, 146, 301, 304, 537, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 777, 827, 889, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273, 1277, 1281], "impact": [65, 188, 191, 301, 816, 819, 889, 1281], "declar": [65, 107, 109, 110, 111, 113, 120, 127, 128, 136, 301, 889], "godfath": 65, "1972": 65, "6_000_000": 65, "134_821_952": 65, "dark": 65, "knight": 65, "2008": 65, "185_000_000": 65, "533_316_061": 65, "schindler": 65, "1993": 65, "22_000_000": 65, "96_067_179": 65, "pulp": 65, "fiction": 65, "1994": 65, "8_000_000": 65, "107_930_000": 65, "shawshank": 65, "redempt": 65, "25_000_000": 65, "28_341_469": 65, "release_year": 65, "budget": 65, "gross": 65, "imdb_scor": 65, "ctx": [65, 66, 67, 68, 69, 70], "film": 65, "1990": [65, 118], "BY": [65, 67], "desc": [65, 67], "AS": [65, 757, 1281], "decad": 65, "total_gross": 65, "n_film": 65, "2000": [65, 388, 399, 403, 409, 410, 413, 892, 972, 983, 990, 997, 998, 1001, 1006], "533316061": 65, "232338648": 65, "1970": [65, 138], "134821952": 65, "register_glob": [66, 68, 70, 1281], "register_mani": [66, 67, 70], "unregist": [66, 67, 68, 1281], "frame_data": [66, 69], "collect": [66, 67, 70, 84, 87, 88, 132, 133, 134, 138, 148, 150, 169, 209, 226, 255, 266, 267, 301, 442, 471, 537, 705, 727, 731, 759, 777, 792, 793, 795, 799, 801, 802, 803, 804, 805, 808, 809, 810, 811, 812, 813, 814, 815, 816, 821, 823, 824, 825, 826, 828, 830, 831, 832, 833, 834, 835, 836, 837, 838, 840, 841, 842, 843, 845, 847, 849, 852, 853, 854, 855, 856, 858, 859, 860, 861, 862, 864, 866, 867, 868, 869, 870, 872, 873, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 889, 892, 1058, 1273, 1281, 1282], "global": [67, 72, 90, 91, 139, 148, 153, 260, 301, 585, 777, 940, 942, 1146, 1273, 1281], "scope": [67, 70, 154, 788, 892, 1281], "map": [67, 68, 73, 109, 110, 118, 119, 120, 121, 124, 125, 130, 131, 132, 135, 160, 170, 179, 205, 211, 230, 236, 237, 238, 256, 301, 311, 417, 431, 534, 535, 536, 537, 556, 570, 585, 689, 741, 777, 795, 806, 841, 889, 892, 965, 1005, 1019, 1121, 1122, 1146, 1261, 1273, 1281], "recent": [67, 141, 142, 143, 144, 571, 777, 1136, 1273, 1281], "df1": [67, 69, 70, 81, 89, 141, 142, 171, 174, 218, 272, 301, 835, 889], "df2": [67, 69, 70, 81, 89, 141, 142, 171, 174, 272, 301], "join": [67, 72, 81, 87, 88, 89, 91, 177, 208, 269, 301, 448, 465, 570, 777, 798, 799, 807, 809, 812, 825, 839, 851, 861, 866, 889], "named_fram": [68, 1281], "lf1": [68, 70], "o": [68, 124, 135, 356, 379, 628, 684, 777, 937, 963, 1193, 1222, 1257, 1273], "lf2": [68, 70, 889], "p": [68, 83, 225, 301, 574, 759, 777, 838, 889, 1197], "q": [68, 238, 301, 759], "r": [68, 118, 119, 132, 574, 624, 628, 629, 630, 631, 645, 777, 892, 1189, 1193, 1194, 1195, 1196, 1210], "lf3": [68, 889], "lf4": [68, 889], "either": [68, 73, 148, 203, 207, 208, 209, 212, 214, 219, 224, 235, 236, 251, 260, 301, 578, 585, 590, 662, 693, 702, 759, 777, 824, 825, 827, 843, 889, 892, 1140, 1146, 1227, 1273, 1282], "tbl1": [68, 70], "tbl2": [68, 70], "tbl3": 68, "tbl4": 68, "statement": [69, 767], "hello_world": 69, "baz": [69, 198, 199, 226, 267, 301, 631, 652, 654, 728, 737, 773, 823, 860, 889, 892, 1196, 1219], "hello_data": 69, "foo_bar": [69, 541, 544, 652, 739], "registr": [70, 789], "lifetim": [70, 154, 788], "context": [70, 72, 90, 91, 152, 222, 301, 310, 316, 448, 497, 535, 537, 545, 616, 617, 689, 697, 708, 710, 728, 731, 737, 738, 742, 753, 756, 776, 777, 788, 789, 866, 889, 1086, 1261, 1273, 1281], "manag": [70, 72, 90, 91, 788, 789, 1281], "often": [70, 121, 154, 188, 189, 191, 192, 235, 301, 334, 493, 494, 584, 590, 777, 816, 817, 819, 820, 843, 889, 916, 1082, 1083], "want": [70, 88, 110, 174, 211, 222, 301, 448, 535, 537, 589, 593, 594, 595, 596, 597, 599, 600, 601, 622, 636, 647, 711, 720, 729, 750, 753, 768, 777, 799, 821, 828, 889, 892, 1033, 1122, 1150, 1187, 1201, 1212, 1273], "df0": [70, 218, 301, 835, 889], "exit": [70, 72, 90, 154, 1281], "construct": [70, 72, 90, 91, 107, 109, 110, 111, 112, 113, 120, 301, 454, 750, 753, 768, 773, 777, 803, 889, 940, 1273], "persist": 70, "through": [70, 108, 120, 773, 892, 1273], "tbl0": 70, "remain": [70, 118, 119, 132, 169, 172, 177, 301, 384, 385, 448, 496, 585, 653, 654, 777, 805, 812, 829, 830, 889, 968, 969, 1027, 1037, 1085, 1146, 1218, 1219, 1273], "text": [70, 120, 636, 637, 645, 646, 648, 757, 1201, 1202, 1213, 1282], "misc": 70, "testing1234": 70, "test1": 70, "test2": 70, "test3": 70, "disabl": [72, 90, 91, 205, 301, 798, 889], "cach": [72, 87, 88, 90, 91, 124, 132, 135, 137, 141, 142, 143, 144, 153, 585, 593, 594, 595, 596, 597, 599, 600, 601, 662, 663, 664, 668, 777, 788, 798, 799, 807, 809, 839, 851, 889, 940, 1146, 1227, 1228, 1229, 1233, 1273], "under": [72, 82, 83, 84, 85, 90, 91, 769, 770, 772, 773, 778, 779, 782, 784, 785, 786, 1265, 1267, 1269, 1274, 1278, 1279, 1280], "equal": [72, 91, 118, 119, 120, 132, 141, 142, 143, 144, 159, 181, 188, 191, 208, 218, 264, 301, 380, 431, 437, 438, 457, 484, 525, 565, 578, 584, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 642, 643, 671, 754, 755, 767, 773, 777, 793, 816, 819, 825, 835, 853, 858, 889, 964, 1005, 1114, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1167, 1207, 1208, 1236, 1273, 1282], "concaten": [72, 89, 90, 91, 180, 225, 301, 574, 620, 705, 706, 777, 838, 889, 946, 1128, 1185, 1273], "introduc": [72, 91, 662, 663, 664, 1227, 1228, 1229], "overhead": [72, 91, 132, 135, 136, 137], "amount": [72, 91, 316, 537, 725, 777], "depend": [72, 86, 91, 120, 140, 331, 332, 489, 490, 537, 545, 578, 581, 725, 728, 731, 737, 777, 913, 914, 1078, 1079, 1140, 1142, 1273, 1282], "nest": [72, 114, 130, 172, 301, 789, 1027, 1273, 1281, 1282], "clear": [72, 90, 162, 301, 797, 889, 951, 1273], "outermost": 72, "s1": [72, 90, 91, 143, 144, 180, 301, 1026, 1072, 1080, 1114, 1264, 1273], "color": [72, 90, 91, 287, 351, 353, 354, 355, 689, 777, 877, 1261, 1273], "red": [72, 90, 91, 287, 689, 777, 877, 1261, 1273], "green": [72, 90, 91, 287, 689, 777, 877, 1261, 1273], "blue": [72, 90, 91, 351, 353, 354, 355, 689, 777, 1261, 1273], "concat": [72, 90, 91, 119, 946, 1128, 1273], "cat": [72, 90, 91, 380, 578, 621, 624, 667, 670, 683, 706, 772, 777, 892, 964, 1046, 1140, 1186, 1189, 1232, 1235, 1269, 1273], "decor": [72, 82, 83, 84, 85, 148, 150, 211, 301, 537, 777, 788, 789, 1122, 1273], "dure": [72, 118, 119, 132, 154, 174, 301, 1033, 1273], "afterward": [72, 767], "construct_categor": 72, "schemadict": [73, 107, 109, 110, 111, 112, 113, 118, 120, 121, 123, 129, 132, 301, 759, 829, 830, 871, 877, 889], "composit": [73, 147, 1282], "initi": [73, 154, 711, 715, 729, 767, 1281], "dai": [74, 188, 191, 206, 208, 235, 270, 301, 409, 410, 413, 414, 417, 420, 423, 424, 431, 433, 590, 593, 594, 595, 596, 597, 599, 600, 601, 719, 720, 721, 722, 723, 724, 725, 764, 765, 777, 816, 819, 825, 843, 889, 892, 997, 998, 1001, 1002, 1005, 1008, 1011, 1012, 1019, 1021], "unsign": [75, 76, 77, 78, 583, 777, 892, 1060, 1144, 1273], "static": [79, 871, 877], "frametyp": [81, 1281], "joinstrategi": [81, 207, 301, 824, 889], "outer": [81, 89, 207, 269, 301, 824, 861, 889], "descend": [81, 159, 243, 249, 264, 301, 326, 344, 519, 581, 606, 616, 617, 689, 702, 777, 793, 848, 853, 858, 889, 908, 926, 1068, 1108, 1142, 1170, 1182, 1261, 1273], "fill": [81, 89, 161, 175, 176, 245, 246, 268, 301, 350, 370, 373, 446, 447, 453, 465, 593, 594, 596, 600, 607, 608, 639, 649, 730, 750, 753, 768, 777, 810, 811, 849, 850, 866, 889, 1035, 1036, 1049, 1133, 1153, 1154, 1156, 1159, 1160, 1161, 1172, 1173, 1204, 1214, 1273], "sort": [81, 82, 141, 142, 147, 159, 188, 189, 191, 192, 208, 218, 225, 226, 235, 243, 264, 270, 284, 295, 301, 326, 359, 448, 537, 570, 590, 593, 594, 595, 596, 597, 599, 600, 601, 606, 617, 689, 691, 702, 742, 777, 793, 807, 816, 817, 819, 820, 825, 835, 838, 839, 843, 848, 851, 858, 874, 885, 889, 892, 908, 941, 1068, 1170, 1258, 1261, 1273, 1282], "origin": [81, 118, 119, 132, 169, 177, 266, 301, 384, 385, 416, 417, 431, 448, 481, 496, 536, 556, 570, 583, 584, 585, 586, 623, 624, 629, 635, 700, 701, 777, 805, 812, 859, 889, 964, 968, 969, 1004, 1005, 1019, 1037, 1085, 1121, 1140, 1146, 1147, 1188, 1189, 1194, 1200, 1273], "In": [81, 88, 120, 122, 133, 134, 137, 148, 150, 154, 172, 174, 188, 189, 191, 192, 211, 222, 235, 260, 301, 535, 537, 590, 720, 777, 799, 816, 817, 819, 820, 843, 889, 1027, 1033, 1143, 1273], "duplic": [81, 95, 200, 207, 208, 266, 269, 301, 311, 467, 481, 556, 578, 777, 824, 825, 859, 861, 889, 1052, 1140, 1273], "suitabl": [81, 89, 120, 146, 211, 301, 537, 605, 777, 1122, 1166, 1273, 1282], "get": [81, 88, 115, 125, 131, 138, 152, 159, 163, 170, 179, 183, 185, 188, 189, 191, 192, 194, 195, 200, 202, 203, 210, 213, 220, 221, 226, 235, 236, 240, 244, 248, 253, 261, 264, 273, 284, 295, 301, 310, 324, 325, 326, 328, 336, 339, 348, 358, 370, 371, 372, 373, 374, 375, 376, 377, 378, 396, 449, 455, 461, 480, 483, 486, 499, 504, 526, 538, 539, 540, 545, 547, 551, 562, 563, 572, 573, 579, 588, 589, 590, 615, 619, 677, 678, 686, 690, 728, 733, 737, 742, 743, 744, 745, 746, 747, 748, 758, 762, 766, 777, 793, 798, 799, 800, 806, 813, 816, 817, 819, 820, 821, 826, 828, 843, 844, 852, 856, 858, 863, 874, 885, 889, 906, 907, 908, 909, 910, 918, 921, 930, 939, 946, 955, 956, 957, 958, 959, 960, 961, 962, 980, 1024, 1038, 1042, 1045, 1050, 1052, 1070, 1075, 1088, 1093, 1115, 1123, 1125, 1126, 1128, 1130, 1131, 1132, 1137, 1138, 1141, 1149, 1150, 1181, 1184, 1244, 1249, 1250, 1255, 1258, 1262, 1263, 1273], "speedup": [81, 205, 211, 301, 537, 777, 1122, 1273], "receiv": [81, 120, 132, 211, 225, 287, 301, 537, 574, 777, 838, 889, 1282], "now": [81, 235, 301, 431, 843, 889, 1005, 1019, 1229], "One": [81, 166, 222, 226, 301, 313, 569, 698, 708, 728, 734, 737, 745, 746, 749, 757, 777, 802, 889, 892, 965, 1273], "whose": [81, 208, 226, 301, 442, 727, 777, 825, 889, 892], "uniqu": [81, 145, 146, 147, 150, 158, 202, 207, 222, 226, 238, 292, 301, 317, 328, 380, 480, 555, 578, 662, 663, 664, 668, 687, 689, 698, 749, 777, 792, 824, 882, 889, 910, 964, 1070, 1129, 1140, 1227, 1228, 1229, 1233, 1259, 1261, 1273], "post": 81, "constrain": [81, 169, 301, 805, 889], "newli": 81, "boolean": [81, 159, 177, 180, 209, 249, 264, 301, 312, 313, 314, 329, 330, 333, 351, 354, 355, 399, 448, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 487, 488, 492, 567, 569, 572, 573, 617, 633, 691, 692, 702, 703, 759, 767, 777, 793, 797, 812, 827, 853, 858, 889, 892, 896, 897, 909, 911, 912, 915, 932, 934, 983, 1037, 1050, 1051, 1052, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1063, 1064, 1065, 1066, 1070, 1076, 1077, 1081, 1134, 1137, 1138, 1168, 1186, 1254, 1264, 1273], "know": [81, 120, 226, 301, 525, 535, 777, 1263, 1273], "2022": [81, 160, 166, 186, 301, 389, 417, 431, 662, 720, 721, 723, 724, 725, 731, 795, 802, 889, 892, 973, 984, 1005, 1019, 1227], "df3": [81, 301], "set_tbl_format": 81, "09": [81, 118, 148, 166, 235, 301, 389, 409, 410, 590, 665, 720, 765, 777, 802, 843, 889, 892, 1230], "02": [81, 160, 166, 186, 188, 235, 270, 301, 387, 389, 396, 409, 410, 413, 416, 422, 425, 428, 430, 434, 590, 593, 594, 596, 599, 600, 601, 602, 662, 663, 664, 668, 720, 721, 723, 724, 725, 777, 795, 802, 816, 843, 889, 892, 971, 973, 975, 976, 980, 981, 987, 988, 994, 997, 998, 999, 1004, 1005, 1009, 1010, 1013, 1016, 1018, 1019, 1114, 1227, 1228, 1229, 1233], "03": [81, 114, 118, 160, 188, 235, 270, 301, 387, 389, 390, 396, 409, 410, 413, 416, 417, 420, 422, 423, 424, 425, 428, 430, 431, 434, 590, 593, 594, 596, 599, 600, 601, 663, 668, 720, 721, 723, 724, 725, 777, 795, 816, 843, 889, 971, 973, 974, 980, 981, 987, 988, 997, 998, 999, 1004, 1005, 1008, 1010, 1011, 1012, 1013, 1016, 1018, 1228, 1233], "af1": 81, "af2": 81, "af3": 81, "keep": [81, 118, 119, 132, 266, 269, 270, 301, 481, 536, 549, 557, 585, 704, 777, 859, 861, 889, 1121, 1146, 1273], "easili": [81, 120, 241, 274, 279, 301, 759, 845, 864, 869, 889], "dot": [81, 777, 851, 889, 1273], "product": [81, 164, 207, 301, 372, 377, 383, 777, 809, 824, 889, 957, 961, 967, 1273], "fill_nul": [81, 175, 301, 777, 810, 866, 889, 1273], "sum_horizont": [81, 251, 301, 760], "167": 81, "47": [81, 166, 301, 802, 889], "callabl": [82, 83, 84, 85, 132, 157, 180, 211, 225, 230, 281, 287, 301, 316, 525, 533, 534, 535, 537, 557, 574, 591, 592, 697, 711, 712, 715, 716, 729, 740, 741, 742, 752, 777, 829, 830, 838, 841, 871, 877, 889, 899, 1114, 1122, 1151, 1152, 1273], "by_first_letter_of_column_nam": 82, "f": [82, 119, 186, 206, 255, 265, 268, 301, 309, 525, 609, 628, 662, 664, 697, 705, 740, 777, 1114, 1193, 1227, 1229], "fromkei": [82, 84], "by_first_letter_of_column_valu": 82, "starts_with": [82, 351, 354, 621, 627, 892, 1192], "to_seri": [82, 183, 301, 662, 703, 753, 1227], "xy": [82, 84], "yz": [82, 84], "b1": [82, 84], "b2": [82, 84], "pow_n": 83, "powersofn": 83, "next": [83, 188, 208, 235, 270, 301, 350, 413, 417, 431, 581, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 941, 1001, 1005, 1019, 1142, 1273], "ceil": [83, 777, 1273], "previou": [83, 154, 558, 559, 571, 576, 674, 676, 777, 1136, 1273], "floor": [83, 777, 1273], "nearest": [83, 166, 208, 228, 293, 301, 361, 451, 465, 579, 597, 751, 777, 802, 825, 840, 883, 889, 945, 965, 1039, 1049, 1141, 1157, 1273], "24": [83, 152, 188, 208, 211, 235, 270, 301, 372, 379, 393, 413, 414, 417, 425, 431, 433, 554, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 963, 1001, 1005, 1013, 1019, 1072, 1273], "001": [83, 671, 725, 1014, 1015, 1017, 1236], "next_pow2": 83, "prev_pow2": 83, "nearest_pow2": 83, "split_by_column_dtyp": 84, "collect_al": [84, 88, 798, 799, 889], "31": [85, 148, 166, 301, 388, 389, 393, 403, 409, 413, 424, 662, 719, 722, 731, 739, 802, 889, 892, 970, 972, 973, 977, 990, 997, 1012, 1227, 1282], "42": [85, 166, 193, 218, 235, 301, 590, 777, 802, 835, 843, 889, 1044, 1273], "961": 85, "1764": 85, "4160": 85, "build": [86, 108, 892, 1282], "wa": [86, 141, 224, 278, 301, 585, 647, 777, 1146, 1212, 1273], "compil": [86, 331, 332, 489, 490, 913, 914, 1078, 1079], "gate": 86, "info": [86, 122, 133, 134, 140, 301, 304, 1273, 1277], "host": [86, 118, 124, 126, 135, 137], "git": 86, "lazy_fram": [87, 88], "comm_subplan_elim": [87, 88, 798, 799, 807, 809, 839, 851, 889], "comm_subexpr_elim": [87, 88, 798, 799, 807, 809, 839, 851, 889], "graph": [87, 209, 301, 798, 822, 866, 889], "parallel": [87, 89, 116, 121, 130, 137, 188, 191, 208, 209, 225, 242, 275, 301, 379, 497, 689, 767, 777, 789, 816, 819, 824, 825, 846, 865, 877, 889, 963, 1086, 1261, 1273], "threadpool": [87, 152], "Will": [87, 88, 798, 799, 807, 809, 839, 851, 889, 1273], "try": [87, 88, 104, 118, 119, 124, 130, 132, 135, 137, 798, 799, 807, 809, 839, 851, 889], "branch": [87, 88, 798, 799, 807, 809, 839, 851, 889], "subplan": [87, 88, 798, 799, 807, 809, 839, 851, 889], "union": [87, 88, 89, 516, 798, 799, 807, 809, 839, 851, 889, 892, 1105], "subexpress": [87, 88, 798, 799, 807, 809, 839, 851, 889], "reus": [87, 88, 798, 799, 807, 809, 839, 851, 889], "explain": [87, 88, 798, 799, 889], "gevent": [88, 140, 799, 889], "await": [88, 799, 889], "_geventdataframeresult": [88, 799, 889], "asynchron": [88, 799, 889], "them": [88, 107, 109, 110, 111, 113, 121, 127, 128, 129, 130, 132, 136, 137, 173, 174, 188, 208, 218, 235, 270, 301, 338, 466, 503, 562, 563, 570, 590, 705, 720, 721, 723, 724, 764, 765, 777, 799, 808, 816, 825, 835, 843, 889, 892, 920, 1033, 1092, 1131, 1132, 1273], "schedul": [88, 799, 889], "insid": [88, 799, 889], "almost": [88, 211, 287, 301, 662, 663, 664, 799, 889, 1122, 1227, 1228, 1229, 1273], "instantli": [88, 799, 889], "asyncio": [88, 799, 889], "releas": [88, 316, 537, 777, 799, 889, 1273, 1282], "greenlet": [88, 799, 889], "task": [88, 799, 889], "wrapper": [88, 799, 889], "event": [88, 799, 889], "asyncresult": [88, 799, 889], "timeout": [88, 799, 889], "collect_async": [88, 889], "set_except": [88, 799, 889], "rerais": [88, 799, 889], "polarstyp": 89, "concatmethod": 89, "vertic": [89, 174, 212, 214, 219, 251, 268, 272, 301, 620, 1185], "rechunk": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 174, 301, 777, 946, 1033, 1128, 1273], "combin": [89, 177, 188, 193, 208, 235, 270, 301, 313, 327, 431, 569, 585, 590, 640, 650, 656, 657, 658, 659, 720, 721, 723, 724, 764, 765, 767, 777, 816, 825, 843, 851, 889, 1005, 1019, 1146, 1205, 1215, 1221, 1222, 1223, 1224, 1273], "vertical_relax": 89, "diagon": [89, 265, 301], "diagonal_relax": 89, "vstack": [89, 174, 301], "addition": [89, 236, 301], "coerc": [89, 584, 777], "supertyp": [89, 176, 301, 315, 777, 811, 889], "mismatch": [89, 102, 128, 136, 141, 143], "find": [89, 178, 184, 301, 605, 621, 622, 777, 1166, 1187, 1273], "miss": [89, 118, 119, 132, 175, 301, 350, 439, 440, 441, 453, 475, 477, 525, 777, 810, 889, 1028, 1029, 1030, 1263, 1273], "stack": [89, 196, 272, 301], "don": [89, 188, 211, 266, 268, 301, 316, 379, 497, 537, 570, 777, 816, 859, 889, 892, 963, 1026, 1086, 1122, 1167, 1263, 1273], "auto": [89, 107, 109, 110, 111, 113, 127, 128, 130, 136, 137, 265, 301, 431, 889, 1005, 1019, 1282], "logic": [89, 211, 287, 301, 304, 312, 314, 537, 683, 693, 695, 742, 777, 803, 824, 847, 877, 889, 896, 897, 1122, 1256, 1273, 1277], "align_fram": 89, "pattern": [89, 118, 119, 132, 135, 136, 137, 205, 301, 543, 621, 622, 623, 624, 629, 630, 631, 632, 645, 646, 647, 877, 892, 1165, 1168, 1186, 1187, 1188, 1189, 1194, 1195, 1196, 1197, 1210, 1211, 1212, 1273], "collis": 89, "need": [89, 114, 118, 119, 121, 188, 189, 191, 192, 235, 238, 247, 260, 301, 525, 590, 609, 665, 725, 750, 753, 768, 777, 816, 817, 819, 820, 843, 889, 1174, 1230, 1273, 1282], "sure": [89, 107, 112, 118, 119, 124, 126, 130, 188, 189, 191, 192, 229, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "contigu": [89, 107, 112, 118, 119, 124, 126, 130, 132, 135, 136, 137, 229, 301], "relev": 89, "df_h1": 89, "l1": 89, "l2": 89, "df_h2": 89, "r1": 89, "r2": 89, "r3": 89, "df_d1": 89, "df_d2": 89, "df_a1": 89, "df_a2": 89, "df_a3": 89, "enable_string_cach": 90, "stringcach": [90, 91, 207, 301, 789, 940, 942], "reliabl": [90, 91], "wai": [90, 91, 107, 109, 110, 111, 113, 127, 128, 136, 187, 206, 225, 249, 279, 301, 570, 574, 617, 629, 708, 773, 777, 815, 838, 853, 869, 877, 889, 1194], "until": [90, 209, 301, 642, 643, 671, 1207, 1208, 1236], "deprec": [91, 92, 157, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 276, 281, 301, 316, 363, 364, 374, 375, 376, 377, 378, 392, 394, 398, 402, 405, 407, 412, 416, 419, 431, 434, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 576, 591, 608, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 662, 664, 676, 679, 680, 691, 697, 708, 717, 718, 720, 722, 740, 777, 816, 817, 818, 819, 820, 829, 850, 857, 867, 871, 889, 899, 941, 949, 950, 959, 960, 961, 962, 964, 976, 978, 982, 989, 992, 995, 1000, 1004, 1005, 1007, 1019, 1022, 1051, 1055, 1057, 1060, 1061, 1067, 1069, 1071, 1082, 1095, 1112, 1121, 1140, 1151, 1167, 1169, 1173, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1227, 1229, 1245, 1246, 1263, 1273], "sinc": [91, 122, 133, 157, 159, 178, 181, 188, 189, 190, 191, 192, 197, 212, 214, 219, 232, 246, 251, 254, 264, 276, 281, 301, 316, 363, 364, 374, 375, 376, 377, 378, 392, 394, 396, 398, 402, 405, 407, 412, 416, 419, 431, 434, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 576, 591, 608, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 662, 664, 676, 679, 680, 691, 697, 717, 718, 720, 722, 731, 740, 777, 793, 816, 817, 818, 819, 820, 829, 850, 853, 857, 858, 867, 871, 889, 899, 941, 949, 950, 959, 960, 961, 962, 964, 976, 978, 980, 982, 989, 992, 995, 1000, 1004, 1005, 1007, 1019, 1022, 1051, 1055, 1057, 1060, 1061, 1067, 1069, 1071, 1082, 1095, 1112, 1121, 1140, 1151, 1167, 1169, 1173, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1227, 1229, 1245, 1246, 1263, 1273], "19": [91, 123, 140, 157, 178, 181, 188, 189, 190, 191, 192, 197, 208, 212, 214, 219, 232, 235, 246, 251, 254, 281, 301, 316, 363, 364, 374, 375, 376, 377, 378, 388, 394, 398, 402, 405, 407, 412, 416, 417, 419, 431, 469, 473, 476, 481, 493, 506, 523, 533, 534, 536, 576, 590, 591, 593, 594, 596, 608, 623, 634, 638, 639, 640, 641, 644, 649, 650, 656, 662, 664, 665, 676, 679, 680, 697, 717, 718, 720, 722, 740, 777, 816, 817, 818, 819, 820, 825, 829, 843, 850, 857, 871, 889, 899, 941, 949, 950, 959, 960, 961, 962, 964, 972, 978, 982, 989, 992, 995, 1000, 1004, 1005, 1007, 1019, 1051, 1055, 1057, 1060, 1061, 1067, 1069, 1071, 1082, 1095, 1112, 1121, 1140, 1151, 1167, 1169, 1173, 1188, 1199, 1203, 1204, 1205, 1206, 1209, 1214, 1215, 1221, 1227, 1229, 1230, 1245, 1246, 1263, 1273], "longer": [91, 118, 132], "accept": [91, 117, 118, 119, 122, 124, 126, 130, 159, 167, 187, 190, 241, 242, 245, 249, 264, 274, 275, 279, 301, 309, 362, 442, 466, 536, 570, 585, 617, 692, 694, 696, 702, 704, 705, 706, 714, 718, 727, 744, 748, 756, 759, 761, 767, 777, 793, 804, 815, 818, 845, 846, 849, 853, 858, 864, 865, 869, 889, 948, 1050, 1146, 1172, 1273], "disable_string_cach": 91, "least": [98, 148, 571, 629, 631, 777, 1136, 1194, 1196, 1273], "unexpect": [100, 102, 301, 535, 537, 777, 1122, 1273], "caus": [100, 102, 108, 118, 119, 132, 141, 156, 174, 301, 535, 777, 1033, 1273], "panic": 100, "incompat": 104, "arrai": [107, 111, 118, 119, 130, 172, 255, 260, 261, 301, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 363, 364, 370, 371, 372, 373, 374, 375, 376, 377, 378, 491, 507, 508, 509, 510, 511, 520, 521, 524, 527, 529, 535, 593, 594, 596, 600, 606, 726, 777, 889, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 949, 950, 955, 956, 957, 958, 959, 960, 961, 962, 967, 1027, 1080, 1096, 1097, 1098, 1099, 1100, 1108, 1109, 1110, 1113, 1116, 1118, 1119, 1153, 1154, 1156, 1159, 1160, 1161, 1170, 1175, 1249, 1254, 1255, 1263, 1273], "chunkedarrai": [107, 221, 301], "recordbatch": [107, 206, 301], "schemadefinit": [107, 109, 110, 111, 113, 127, 128, 136, 301, 889], "schema_overrid": [107, 109, 110, 111, 112, 113, 120, 121, 123, 127, 128, 129, 206, 260, 301, 889, 892, 930], "copi": [107, 108, 156, 161, 162, 206, 255, 261, 274, 301, 445, 777, 796, 797, 864, 889, 947, 951, 1034, 1249, 1254, 1255, 1273], "part": [107, 123, 148, 630, 653, 654, 807, 809, 839, 851, 866, 889, 1195, 1218, 1219], "closest": 107, "pair": [107, 109, 110, 111, 113, 127, 128, 136, 147, 230, 301, 841, 889, 1282], "sever": [107, 109, 110, 111, 113, 127, 128, 136, 301, 889, 1282], "form": [107, 109, 110, 111, 113, 127, 128, 136, 205, 237, 268, 301, 571, 777, 889, 1136, 1273], "dimens": [107, 109, 111, 113, 127, 128, 136, 301, 586, 777, 889, 1147, 1273], "supportsinterchang": 108, "allow_copi": [108, 156], "interchang": [108, 156], "__dataframe__": 108, "convers": [108, 123, 156, 205, 206, 237, 238, 257, 260, 261, 301, 390, 662, 663, 664, 668, 789, 974, 1043, 1227, 1228, 1229, 1233, 1253, 1254, 1255, 1273], "detail": [108, 120, 121, 141, 143, 156, 301, 889, 1282], "latest": [108, 122, 133, 156, 416, 417, 431, 453, 546, 662, 664, 722, 777, 1004, 1005, 1019, 1227, 1229], "from_panda": 108, "from_arrow": 108, "effici": [108, 120, 123, 204, 206, 301, 535, 777], "convert": [108, 112, 122, 123, 129, 133, 156, 256, 257, 258, 259, 260, 261, 263, 301, 347, 381, 390, 420, 423, 524, 525, 534, 535, 557, 580, 631, 644, 662, 663, 664, 665, 666, 668, 673, 777, 889, 929, 942, 974, 1008, 1011, 1113, 1114, 1196, 1209, 1227, 1228, 1229, 1230, 1231, 1233, 1239, 1242, 1252, 1253, 1254, 1255, 1263, 1273], "panda": [108, 112, 140, 188, 261, 301, 409, 410, 683, 777, 816, 889, 997, 998, 1255, 1256, 1273], "pd": [108, 112, 683, 777, 1255, 1256, 1273], "df_pd": 108, "dfi": [108, 156], "clone": [109, 110, 111, 112, 113, 161, 260, 301, 796, 889, 947, 1253, 1254, 1263, 1273], "dimension": [109, 111, 113, 260, 301, 889, 1273], "infer_schema_length": [110, 113, 118, 119, 123, 127, 132, 136, 301, 633, 634, 889, 1198, 1199], "NOT": [110, 204, 301, 525, 544, 1281], "typic": [110, 120, 137, 211, 301, 395, 892, 979, 1122, 1273], "clearer": 110, "partial": [110, 118, 132, 301, 889], "mani": [110, 113, 120, 121, 174, 301, 633, 634, 647, 1033, 1198, 1199, 1212, 1273], "scan": [110, 113, 118, 119, 132, 133, 134, 135, 136, 137, 138, 188, 189, 191, 192, 235, 301, 590, 777, 809, 816, 817, 819, 820, 821, 828, 843, 889], "slow": [110, 113, 118, 119, 132, 316, 379, 537, 592, 777, 877, 963, 1152, 1273], "present": [110, 148, 471, 536, 658, 659, 777, 809, 889, 1121, 1263, 1273], "np": [111, 177, 260, 301, 455, 679, 777, 812, 889, 1040, 1054, 1059, 1063, 1064, 1165, 1166, 1245, 1273], "ndarrai": [111, 177, 260, 301, 455, 679, 777, 812, 889, 1040, 1165, 1166, 1169, 1245, 1254, 1273], "numpi": [111, 140, 164, 205, 237, 238, 257, 260, 261, 301, 535, 562, 563, 592, 777, 889, 1054, 1059, 1063, 1064, 1131, 1132, 1152, 1254, 1255, 1263, 1273], "columnar": [111, 113, 205, 237, 301], "interpret": [111, 113, 118, 119, 132, 301, 889], "yield": [111, 113, 118, 119, 120, 132, 172, 174, 265, 301, 535, 570, 777, 889, 1027, 1033, 1273], "conclus": [111, 113, 301, 889], "nan_to_nul": [112, 301, 889, 1273], "include_index": 112, "instal": [112, 118, 119, 121, 124, 126, 164, 260, 261, 301, 851, 889, 1255, 1273], "nan": [112, 148, 156, 175, 261, 301, 384, 385, 437, 438, 446, 457, 459, 465, 475, 477, 478, 479, 484, 532, 538, 551, 562, 563, 564, 565, 592, 685, 707, 777, 810, 889, 901, 905, 968, 969, 1035, 1063, 1064, 1131, 1132, 1152, 1254, 1255, 1273, 1282], "pd_df": 112, "pd_seri": 112, "tbl": [114, 116, 119], "reconstruct": 114, "repr": [114, 148, 150], "trim": 114, "whitespac": [114, 640, 650, 656, 657, 658, 659, 1205, 1215, 1221, 1222, 1223, 1224], "prompt": 114, "extract": [114, 388, 391, 393, 394, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 411, 412, 414, 415, 418, 419, 421, 424, 425, 426, 427, 428, 429, 430, 432, 433, 435, 574, 630, 631, 633, 634, 635, 653, 777, 972, 975, 976, 977, 978, 981, 982, 984, 988, 989, 990, 991, 992, 994, 995, 996, 999, 1000, 1002, 1003, 1006, 1007, 1009, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1195, 1196, 1198, 1199, 1200], "to_init_repr": [114, 301, 1273], "truncat": [114, 118, 132, 186, 188, 191, 205, 237, 238, 257, 301, 816, 819, 839, 889], "identifi": [114, 217, 224, 266, 278, 301, 834, 859, 889], "compound": [114, 238, 301, 892], "neither": [114, 123, 129, 239, 301, 525, 1114], "source_ac": 114, "source_cha": 114, "ident": [114, 161, 162, 301, 420, 588, 589, 777, 796, 797, 889, 947, 951, 1008, 1149, 1150, 1273], "timestamp": [114, 188, 191, 301, 416, 417, 431, 731, 816, 819, 889, 1004, 1005, 1019], "tor_id": 114, "nnel_id": 114, "\u03bc": [114, 148, 160, 188, 205, 208, 235, 237, 238, 257, 270, 301, 386, 387, 389, 390, 391, 392, 395, 397, 401, 404, 406, 409, 410, 411, 413, 416, 417, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 590, 593, 594, 596, 599, 600, 601, 662, 664, 723, 724, 725, 731, 777, 795, 816, 825, 843, 889, 892, 970, 971, 973, 974, 975, 976, 979, 980, 981, 987, 988, 994, 997, 998, 999, 1001, 1004, 1005, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1227, 1229], "asia": [114, 892, 975, 976, 1009], "tokyo": [114, 892], "123456780": 114, "9876543210": 114, "56": [114, 681, 777], "59": [114, 147, 166, 301, 389, 406, 418, 722, 763, 764, 765, 802, 889, 892, 973, 994, 1006], "663053": 114, "jst": [114, 892], "803065983": 114, "2055938745": 114, "38": [114, 148], "18": [114, 166, 218, 235, 301, 373, 417, 431, 434, 465, 481, 556, 590, 594, 596, 777, 802, 835, 839, 843, 889, 892, 1022, 1229], "050545": 114, "source_actor_id": 114, "source_channel_id": 114, "to_list": [114, 235, 301, 1186, 1197, 1273], "uint32": [115, 140, 160, 172, 277, 301, 326, 331, 332, 368, 455, 458, 485, 489, 490, 505, 584, 623, 624, 636, 637, 679, 683, 708, 735, 738, 777, 795, 868, 889, 892, 909, 913, 914, 938, 1026, 1027, 1060, 1078, 1079, 1094, 1167, 1188, 1189, 1201, 1202, 1256, 1273], "regular": [115, 205, 236, 237, 270, 277, 301, 442, 621, 623, 624, 629, 630, 631, 632, 645, 646, 727, 777, 868, 889, 892, 1186, 1188, 1189, 1194, 1195, 1196, 1197, 1210, 1211], "uint64": [115, 193, 277, 301, 331, 332, 460, 489, 490, 583, 777, 868, 889, 913, 914, 1044, 1078, 1079, 1144, 1273], "bigidx": 115, "read": [116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 174, 301, 454, 535, 767, 777, 803, 809, 889, 1033, 1273], "over": [116, 118, 119, 120, 122, 132, 148, 157, 174, 204, 205, 206, 211, 236, 237, 238, 265, 278, 281, 287, 301, 316, 379, 447, 534, 535, 537, 545, 547, 548, 549, 557, 581, 593, 594, 595, 596, 597, 599, 600, 601, 697, 711, 712, 715, 716, 729, 740, 741, 742, 752, 777, 871, 877, 892, 899, 963, 1033, 1122, 1153, 1154, 1156, 1160, 1273], "fetch": [116, 132, 209, 301, 796, 798, 821, 828, 889], "ideal": 116, "read_csv_batch": [116, 790], "tpch": [116, 119], "tables_scale_100": [116, 119], "lineitem": [116, 119, 121], "try_parse_d": [116, 118, 119, 132], "n_row": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 206, 301, 809, 889], "handler": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 803, 889], "builtin": [117, 118, 119, 123, 124, 125, 126, 127, 128, 129, 130, 131, 803, 889], "stop": [117, 118, 119, 124, 126, 130, 132, 135, 136, 137, 593, 594, 596, 599, 600, 601, 777, 971, 974, 980, 981, 988, 991, 994, 999, 1005, 1010], "textio": 118, "has_head": [118, 119, 123, 132], "new_column": [118, 119, 123, 132, 231, 232, 301], "comment_prefix": [118, 119, 132], "skip_row": [118, 119, 132], "missing_utf8_is_empty_str": [118, 119, 132], "ignore_error": [118, 119, 128, 132, 136], "n_thread": [118, 119], "8192": 118, "csvencod": [118, 119, 132], "low_memori": [118, 119, 130, 132, 136, 137], "skip_rows_after_head": [118, 119, 132], "row_index_nam": [118, 119, 124, 126, 130, 132, 135, 136, 137], "row_index_offset": [118, 119, 124, 126, 130, 132, 135, 136, 137], "sample_s": [118, 119], "eol_char": [118, 119, 132], "raise_if_empti": [118, 119, 123, 129, 132], "truncate_ragged_lin": [118, 132], "fsspec": [118, 119, 124, 126, 130, 133, 134, 135, 137, 140], "remot": [118, 119, 124, 126], "autogener": [118, 119, 132], "column_x": [118, 119, 132], "enumer": [118, 119, 132, 206, 301], "shorter": [118, 119, 132, 525, 735, 736], "comment": [118, 119, 132], "instanc": [118, 119, 130, 132, 137, 148, 150, 154, 160, 174, 180, 301, 357, 546, 593, 594, 595, 596, 597, 599, 600, 601, 711, 715, 729, 773, 777, 795, 830, 867, 868, 889, 938, 1033, 1273], "escap": [118, 119, 121, 132], "complet": [118, 120, 132, 1254, 1273], "wherea": [118, 120, 132, 235, 301, 417, 431, 562, 563, 590, 777, 821, 828, 843, 889, 1005, 1019, 1131, 1132, 1273], "would": [118, 119, 132, 326, 337, 501, 535, 537, 545, 581, 702, 777, 908, 919, 1090, 1142, 1254, 1273], "prefer": [118, 119, 122, 132, 151, 174, 205, 211, 236, 237, 287, 301, 442, 537, 777, 889, 1033, 1122, 1273, 1282], "treat": [118, 119, 132, 621, 624, 632, 645, 646, 767, 1186, 1189, 1197, 1210, 1211], "10000": [118, 206, 301], "issu": [118, 119, 123, 132, 372, 373, 677, 777, 957, 958, 1243, 1273], "iso8601": [118, 119, 132], "succe": [118, 119, 132], "cpu": [118, 119], "system": [118, 119, 390, 974], "wrongli": 118, "done": [118, 119, 132, 138, 154, 158, 160, 208, 301, 315, 317, 357, 570, 777, 792, 795, 825, 889, 938, 1273], "buffer": [118, 119, 120, 172, 205, 301, 1027, 1273], "modifi": [118, 119, 132, 152, 154, 174, 196, 204, 205, 272, 301, 327, 416, 434, 621, 629, 630, 632, 645, 777, 898, 1004, 1022, 1033, 1186, 1194, 1195, 1197, 1210, 1232, 1234, 1235, 1273], "upper": [118, 119, 120, 172, 188, 191, 301, 362, 363, 462, 466, 525, 688, 699, 720, 721, 723, 724, 764, 765, 777, 816, 819, 889, 948, 949, 1027, 1046, 1050, 1120, 1260, 1273], "bound": [118, 119, 172, 188, 191, 301, 337, 362, 363, 364, 466, 500, 501, 523, 525, 531, 688, 699, 720, 721, 723, 724, 764, 765, 777, 816, 819, 889, 919, 948, 949, 950, 1027, 1050, 1089, 1090, 1112, 1120, 1260, 1273], "lossi": [118, 119, 132], "decod": [118, 119, 633], "expens": [118, 119, 130, 132, 136, 137, 149, 151, 188, 189, 191, 192, 205, 211, 235, 236, 237, 238, 265, 266, 301, 316, 537, 590, 777, 802, 816, 817, 819, 820, 843, 859, 889, 1033, 1122, 1273, 1282], "aggreg": [118, 119, 130, 180, 187, 188, 190, 191, 212, 214, 216, 219, 222, 226, 227, 228, 235, 250, 251, 268, 271, 279, 280, 283, 285, 301, 310, 448, 463, 533, 535, 537, 570, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 693, 694, 695, 696, 711, 712, 713, 714, 715, 716, 717, 718, 729, 734, 743, 744, 747, 748, 752, 760, 761, 777, 816, 817, 819, 820, 830, 831, 832, 833, 836, 837, 840, 843, 854, 855, 862, 869, 870, 873, 875, 889, 1047, 1151, 1152, 1153, 1154, 1156, 1159, 1160, 1161, 1273], "parser": 118, "regard": [118, 707], "sens": [118, 124, 126, 135, 218, 270, 301, 570, 777, 835, 889], "particular": [118, 124, 126, 135, 172, 301, 1027, 1273], "usernam": [118, 121, 124, 126, 135], "password": [118, 121, 124, 126, 135], "skip": [118, 119, 123, 130, 132, 137, 268, 301, 899, 1122, 1273], "offset": [118, 119, 123, 124, 126, 130, 132, 135, 136, 137, 182, 188, 189, 191, 192, 235, 248, 254, 270, 276, 277, 301, 386, 395, 409, 410, 413, 417, 431, 456, 518, 590, 615, 651, 680, 777, 814, 816, 817, 819, 820, 843, 852, 857, 867, 868, 889, 970, 979, 997, 998, 1001, 1005, 1019, 1041, 1107, 1181, 1216, 1229, 1246, 1273], "sampl": [118, 119, 287, 301, 614, 777, 877, 1180, 1273], "estim": [118, 119, 158, 172, 301, 317, 440, 441, 482, 698, 777, 792, 889, 1027, 1029, 1030, 1073, 1273], "alloc": [118, 119, 172, 229, 301, 777, 1027, 1273], "encount": [118, 119, 132, 188, 191, 301, 562, 563, 633, 635, 707, 711, 729, 777, 816, 819, 889, 1131, 1132, 1198, 1200, 1273], "window": [118, 119, 132, 188, 189, 191, 192, 235, 301, 379, 417, 431, 439, 440, 441, 535, 537, 570, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 705, 754, 755, 777, 816, 817, 819, 820, 843, 889, 963, 1005, 1019, 1028, 1029, 1030, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273], "rn": [118, 119, 132], "go": [118, 119, 132, 260, 301, 627, 1192], "nodataerror": [118, 119, 123, 129, 132, 789], "lazili": [118, 119, 132, 133, 134, 135, 136, 137, 799, 889], "glob": [118, 119, 132, 135, 136, 137], "continu": [118, 130, 380, 578, 614, 777, 964, 1140, 1180, 1273], "benchmark": [118, 130], "demonstr": 118, "birthdai": 118, "alic": 118, "1995": 118, "bob": [118, 218, 301, 835, 889], "charli": 118, "2002": [118, 399, 413, 983, 1001, 1023], "08": [118, 141, 142, 143, 144, 148, 166, 235, 301, 389, 409, 410, 417, 590, 662, 723, 725, 777, 802, 843, 889, 892, 1005, 1019, 1227], "50000": 119, "batchedcsvread": [119, 789], "upon": 119, "creation": 119, "gather": [119, 182, 254, 301, 456, 523, 679, 680, 777, 814, 857, 889, 1041, 1112, 1245, 1246, 1273], "next_batch": 119, "big": 119, "interest": [119, 420, 423, 1008, 1011], "seen_group": 119, "big_fil": 119, "df_current_batch": 119, "partition_df": 119, "partition_bi": [119, 206, 301], "as_dict": [119, 224, 301], "fh": 119, "write_csv": [119, 132, 301], "els": [119, 767], "connectionorcursor": 120, "iter_batch": 120, "execute_opt": 120, "cursor": 120, "client": 120, "odbc": 120, "establish": 120, "resultset": 120, "manner": 120, "veri": [120, 205, 265, 301, 537, 777, 877], "poor": 120, "trip": 120, "still": [120, 121], "exact": [120, 146, 148, 150, 247, 301, 317, 660, 661, 662, 663, 664, 685, 777, 1227, 1228, 1229], "incom": 120, "read_arrow_batches_from_odbc": 120, "read_database_uri": 120, "wide": [120, 186, 217, 268, 301, 834, 889], "snowflak": [120, 121], "variou": [120, 301, 777, 889, 892, 1273], "facil": 120, "initialis": [120, 154, 889], "flight": 120, "flightsql": 120, "flight_sql": 120, "about": [120, 614, 621, 629, 630, 632, 645, 777, 1180, 1186, 1194, 1195, 1197, 1210, 1273, 1282], "notabl": 120, "dremio": 120, "influxdb": 120, "notic": [120, 301, 889, 1273], "dbapi2": 120, "connectorx": [120, 121, 140], "optimis": [120, 211, 238, 287, 301, 889, 1122, 1168, 1273, 1282], "translat": 120, "conn": 120, "url": [120, 121, 130, 137, 629, 631, 1194, 1196], "test_data": 120, "user_conn": 120, "normalised_scor": 120, "uint8": [120, 145, 147, 160, 259, 260, 268, 301, 372, 373, 585, 677, 692, 777, 795, 889, 892, 957, 958, 1146, 1243, 1273, 1282], "parameteris": 120, "metric": 120, "alchemy_conn": 120, "qmark": 120, "variad": 120, "1000": [120, 123, 172, 259, 277, 301, 317, 777, 868, 889, 1014, 1118, 1252, 1273, 1282], "localhost": 120, "5432": 120, "uid": 120, "usr": 120, "pwd": 120, "max_text_s": 120, "max_binary_s": 120, "do_someth": 120, "partition_on": 121, "partition_rang": 121, "partition_num": 121, "dbreadengin": 121, "raw": 121, "warehous": 121, "role": 121, "caller": [121, 218, 301, 525, 830, 835, 871, 877, 889], "respons": [121, 218, 301, 835, 889], "come": [121, 188, 301, 409, 410, 482, 525, 777, 790, 816, 888, 889, 997, 998, 1073, 1273], "transfer": 121, "document": [121, 123, 301, 304, 420, 423, 635, 662, 663, 664, 668, 773, 942, 1008, 1011, 1200, 1227, 1228, 1229, 1233, 1273, 1277], "redshift": 121, "mysql": 121, "mariadb": 121, "clickhous": 121, "oracl": 121, "bigqueri": 121, "pleas": [121, 188, 301, 304, 708, 720, 725, 816, 889, 1273, 1277], "github": 121, "sfu": 121, "connector": 121, "destin": 121, "develop": [121, 148, 150], "read_databas": 121, "usual": [121, 386, 970], "urllib": 121, "quote_plu": 121, "word": [121, 658, 659], "3f": [121, 662, 664, 1227, 1229], "20word": 121, "explicitli": [121, 123, 146, 148, 154, 759, 788], "test_tabl": 121, "compani": 121, "testdb": 121, "public": [121, 301, 777, 789, 889, 1273], "myrol": 121, "delta_table_opt": [122, 133], "root": [122, 133, 360, 481, 534, 547, 556, 557, 558, 559, 560, 561, 576, 618, 676, 776, 777, 944, 1183, 1273], "absolut": [122, 133, 134, 141, 142, 143, 144, 308, 439, 440, 441, 777, 894, 1028, 1029, 1030, 1273], "avoid": [122, 237, 301, 311, 777], "year": [122, 133, 188, 208, 235, 270, 301, 399, 400, 413, 414, 417, 431, 432, 590, 593, 594, 595, 596, 597, 599, 600, 601, 719, 720, 721, 722, 723, 724, 764, 765, 777, 816, 825, 843, 889, 983, 984, 1001, 1002, 1005, 1019, 1020], "2021": [122, 133, 160, 166, 186, 188, 270, 301, 662, 739, 795, 802, 816, 889, 892, 975, 976, 984, 1009, 1069, 1227, 1273], "aw": [122, 130, 133, 137], "googl": [122, 133, 134], "service_account": [122, 133], "service_account_json_absolute_path": [122, 133], "az": [122, 133, 134], "adl": [122, 133, 134], "abf": [122, 133, 134], "azure_storage_account_nam": [122, 133, 134], "azure_storage_account_kei": [122, 133, 134], "without_fil": [122, 133, 134], "track": [122, 133, 134, 211, 301, 525, 1281], "sheet_id": [123, 129], "sheet_nam": [123, 129], "excelspreadsheetengin": 123, "engine_opt": 123, "read_csv_opt": 123, "spreadsheet": [123, 129, 226, 301, 789], "calamin": 123, "fastexcel": 123, "xlsb": 123, "xl": 123, "pyxlsb": [123, 140], "openpyxl": [123, 140], "sheetnam": [123, 129], "nor": [123, 129, 239, 301], "xlsx2csv": [123, 140], "read_csv": [123, 132], "refin": 123, "significantli": [123, 211, 287, 301, 1122, 1273, 1282], "potenti": [123, 132, 135, 136, 205, 236, 238, 301, 556, 802, 889], "unabl": 123, "julian": 123, "major": 123, "dramat": 123, "modul": [123, 776, 892, 1282], "bind": 123, "constructor": [123, 150], "skip_empty_lin": 123, "applic": [123, 260, 301, 537, 593, 594, 595, 596, 597, 599, 600, 601, 777], "influenc": [123, 809, 830, 889], "pipelin": 123, "correct": [123, 129, 440, 441, 482, 594, 595, 596, 597, 598, 599, 601, 614, 777, 829, 830, 889, 1029, 1030, 1073, 1158, 1180, 1273], "known": [123, 148, 525, 593, 594, 595, 596, 597, 599, 600, 601, 777, 871, 877, 1114], "better": [123, 211, 260, 287, 301, 537, 637, 777, 877, 1165, 1168, 1202, 1273], "detect": 123, "memory_map": [124, 130, 135], "greatli": [124, 135], "repeat": [124, 135, 582, 584, 750, 768, 777], "That": [124, 829, 830, 889], "filenam": 124, "my_fil": 124, "write_ipc": [124, 301], "read_ndjson": 127, "becaus": [128, 136, 172, 188, 191, 209, 211, 268, 287, 301, 497, 816, 819, 877, 889, 899, 1027, 1086, 1122, 1273], "openoffic": 129, "od": 129, "parallelstrategi": [130, 137], "use_statist": [130, 137], "hive_partit": [130, 137], "retri": [130, 137], "row_group": [130, 137], "hive": [130, 137], "prune": [130, 137, 830, 889], "gcp": [130, 134, 137], "stabl": [130, 159, 164, 166, 193, 239, 264, 301, 460, 530, 777, 793, 802, 834, 853, 858, 889, 1044, 1273], "read_tabl": 130, "scan_parquet": [130, 138], "scan_pyarrow_dataset": [130, 137], "contribut": [130, 595, 597, 599, 601, 777], "with_column_nam": 132, "push": [132, 135, 136, 137, 138], "down": [132, 135, 136, 137, 138, 451, 777, 1039, 1273], "therebi": [132, 135, 136], "realloc": [132, 135, 136, 174, 301, 1033, 1273], "headerless": 132, "my_long_fil": 132, "thing": [132, 139], "less": [132, 208, 301, 484, 532, 535, 654, 777, 825, 889, 1219, 1282], "breezah": 132, "languag": [132, 188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "hard": [132, 829, 830, 889], "mydf": 132, "lambda": [132, 157, 180, 211, 225, 226, 230, 287, 301, 316, 439, 440, 441, 525, 533, 534, 535, 537, 557, 711, 712, 729, 741, 742, 752, 777, 829, 830, 838, 841, 877, 889, 899, 1028, 1029, 1030, 1114, 1122, 1273], "lower": [132, 166, 188, 191, 228, 293, 301, 362, 364, 466, 531, 534, 557, 579, 583, 597, 699, 720, 721, 723, 724, 751, 764, 765, 777, 802, 816, 819, 840, 883, 889, 948, 950, 965, 1050, 1120, 1141, 1144, 1157, 1260, 1273], "simpli": [132, 570, 711, 729, 777], "idx": [132, 188, 206, 277, 301, 337, 525, 816, 868, 889, 1114, 1197], "uint16": [132, 372, 373, 677, 777, 892, 957, 958, 1243, 1273], "u16": [132, 148, 1282], "eu": [133, 134], "central": [133, 134, 482, 614, 777, 1073, 1180, 1273], "iceberg": [134, 789], "pyiceberg": [134, 140], "metadata": [134, 188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "secret": [134, 137], "adlf": 134, "my": [134, 138, 669, 1234], "oauth": 134, "token": 134, "ya29": 134, "dr": 134, "afm": 134, "py": 134, "impl": 134, "fsspecfileio": 134, "give": [135, 136, 217, 266, 301, 396, 482, 584, 685, 777, 789, 834, 859, 889, 980, 1073, 1273], "read_parquet": 137, "east": 137, "allow_pyarrow_filt": 138, "comparison": 138, "dset": 138, "folder": 138, "04": [138, 160, 166, 188, 270, 301, 389, 390, 409, 410, 416, 417, 420, 423, 424, 425, 428, 430, 434, 593, 594, 596, 599, 600, 601, 662, 723, 725, 777, 795, 802, 816, 889, 892, 974, 988, 994, 997, 998, 999, 1004, 1008, 1011, 1012, 1013, 1016, 1018, 1022, 1227], "seed": [139, 193, 239, 301, 460, 512, 581, 604, 610, 777, 1044, 1101, 1142, 1164, 1176, 1273], "shuffl": [139, 239, 287, 301, 512, 604, 777, 877, 1101, 1164, 1273], "stdout": [140, 154, 186, 301, 548], "platform": 140, "maco": 140, "14": [140, 148, 166, 178, 197, 211, 212, 214, 219, 232, 251, 254, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 374, 375, 376, 377, 378, 386, 391, 392, 397, 401, 404, 406, 411, 418, 421, 465, 523, 581, 644, 679, 680, 717, 718, 764, 777, 802, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 892, 959, 960, 961, 962, 970, 1005, 1051, 1071, 1112, 1169, 1209, 1245, 1246, 1263, 1273], "arm64": 140, "arm": 140, "64bit": [140, 583, 777, 1144, 1273], "main": [140, 799, 889], "oct": 140, "13": [140, 148, 161, 162, 166, 175, 176, 185, 198, 209, 221, 235, 274, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 311, 391, 392, 394, 397, 398, 401, 402, 404, 405, 406, 407, 411, 412, 418, 419, 421, 545, 547, 590, 665, 705, 711, 714, 729, 761, 766, 777, 796, 797, 802, 810, 811, 827, 843, 864, 873, 875, 878, 879, 880, 881, 882, 883, 884, 889, 978, 982, 989, 992, 995, 1000, 1005, 1007, 1019, 1020, 1057, 1060, 1067, 1069, 1122, 1230, 1273], "54": [140, 443, 777, 1282], "clang": 140, "1500": [140, 149], "adbc_driver_manag": 140, "cloudpickl": 140, "hvplot": [140, 301, 304, 1273, 1277], "matplotlib": [140, 839, 851, 889], "26": [140, 166, 172, 301, 395, 432, 802, 889, 979], "pydant": 140, "check_row_ord": [141, 142], "check_column_ord": [141, 142], "check_dtyp": [141, 142, 143, 144], "check_exact": [141, 142, 143, 144], "rtol": [141, 142, 143, 144], "atol": [141, 142, 143, 144], "categorical_as_str": [141, 142, 143, 144], "assert": [141, 142, 143, 144, 146, 148, 150, 235, 301, 789, 892], "assertionerror": [141, 142, 143, 144], "compar": [141, 142, 143, 144, 171, 181, 301, 437, 438, 457, 459, 484, 532, 564, 565, 777, 942, 1026, 1167, 1273], "unsort": [141, 142], "exactli": [141, 142, 143, 144, 147, 148, 150, 653, 654, 660, 661, 725, 1175, 1218, 1219, 1225, 1226, 1273], "toler": [141, 142, 143, 144, 208, 301, 825, 889], "inexact": [141, 142, 143, 144], "share": [141, 142, 143, 144, 172, 301, 777, 1027, 1273], "assert_series_equ": [141, 144, 1026, 1273, 1282], "assert_frame_not_equ": [141, 144], "pytest": [141, 143], "worthwhil": [141, 143], "shorten": [141, 143], "traceback": [141, 142, 143, 144], "tb": [141, 143, 172, 301, 1027, 1273], "short": [141, 143], "tend": [141, 143], "unhelpfulli": [141, 143], "assert_frame_equ": [142, 143, 171, 301, 1282], "assert_series_not_equ": [142, 143], "check_nam": [143, 144], "searchstrategi": [145, 147, 148, 150], "null_prob": [145, 148, 150], "percentag": [145, 148, 150, 571, 777, 1136, 1273], "chanc": [145, 148, 150, 1282], "independ": [145, 146, 148, 150], "flag": [145, 301, 606, 621, 629, 630, 632, 645, 777, 807, 829, 830, 889, 1170, 1186, 1194, 1195, 1197, 1210, 1273], "hypothesi": [145, 146, 147, 148, 149, 150, 1282], "sampled_from": [145, 1282], "unique_small_int": 145, "ccy": [145, 1282], "gbp": [145, 1282], "eur": [145, 186, 301, 1282], "jpy": [145, 1282], "min_col": [146, 148], "max_col": [146, 148], "standalon": [146, 148, 892], "mincol": 146, "assign": [146, 188, 301, 525, 570, 581, 653, 654, 777, 816, 889, 1114, 1142, 1218, 1219, 1273], "minimum": [146, 147, 148, 150, 180, 219, 220, 301, 439, 440, 441, 551, 563, 573, 581, 747, 748, 777, 836, 889, 993, 1028, 1029, 1030, 1132, 1138, 1142, 1273, 1282], "especi": [146, 589, 777, 809, 889, 1150, 1273], "test_unique_xyz": 146, "assert_someth": 146, "punctuat": 146, "test_special_char_colname_init": 146, "inner_dtyp": [147, 150], "select_from": [147, 150], "min_siz": [147, 148, 150, 1282], "max_siz": [147, 148, 150, 1282], "anoth": [147, 160, 171, 181, 187, 301, 379, 387, 500, 523, 541, 544, 585, 632, 777, 795, 815, 866, 889, 963, 971, 1026, 1033, 1089, 1146, 1167, 1197, 1273], "randomli": 147, "innermost": 147, "2x": 147, "lst": 147, "11330": 147, "24030": 147, "116": 147, "zz": [147, 150, 166, 301, 802, 889], "uint8_pair": [147, 1282], "uint": [147, 1282], "zip": [147, 1282], "131": 147, "176": 147, "149": [147, 1282], "include_col": 148, "allow_infin": [148, 150], "allowed_dtyp": [148, 150, 1282], "excluded_dtyp": [148, 150], "describ": [148, 186, 301, 889, 1273], "desir": [148, 434, 525, 1022, 1114, 1273], "n_chunk": [148, 150, 301, 898, 1033, 1273], "randomis": 148, "onto": 148, "pct": 148, "preced": [148, 892], "disallow": [148, 150], "inf": [148, 150, 323, 380, 462, 468, 472, 578, 685, 777, 905, 954, 964, 1046, 1054, 1059, 1120, 1136, 1140, 1260, 1273], "exclud": [148, 150, 188, 301, 370, 373, 466, 777, 816, 889, 1050, 1069, 1273], "usag": [148, 150, 247, 301, 892, 1175, 1273], "deploi": [148, 150], "characterist": [148, 150], "concret": [148, 150], "test_repr": 148, "isinst": [148, 150, 301], "0x11f561580": 148, "0565": 148, "34715": 148, "5844": 148, "33": [148, 166, 218, 301, 602, 777, 802, 835, 889, 1157, 1273], "076854": 148, "3382": 148, "17": [148, 279, 592, 602, 731, 764, 777, 869, 952, 954, 1005, 1152, 1273, 1282], "48662": 148, "7540": 148, "836271": 148, "4063": 148, "06": [148, 160, 270, 301, 389, 408, 415, 416, 417, 418, 431, 432, 795, 889, 892, 1004, 1005, 1019], "39092": 148, "1889": 148, "41": [148, 166, 301, 600, 777, 802, 889, 1282], "874455": 148, "15836": 148, "1755e": 148, "575050513": 148, "profil": [149, 151, 798, 889], "balanc": [149, 151, 1282], "set_environ": 149, "polars_hypothesis_profil": [149, 151], "max_data_s": 150, "normal": [150, 188, 301, 436, 482, 614, 777, 816, 889, 1025, 1073, 1180, 1273], "test_repr_is_valid_str": 150, "experi": 150, "create_list_strategi": [150, 1282], "polars_max_thread": 152, "behind": 152, "lock": 152, "reason": [152, 166, 301, 525, 535, 777, 802, 889], "temporarili": [152, 154, 188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "pyspark": 152, "udf": [152, 157, 211, 225, 281, 287, 301, 316, 537, 574, 697, 742, 777, 838, 871, 877, 889, 899, 1122, 1273], "recommend": [152, 166, 205, 225, 301, 802, 889, 892], "easi": [154, 1282], "restor": 154, "restore_default": 154, "relat": [154, 892], "set_tbl_row": 154, "whatev": 154, "were": [154, 212, 214, 219, 251, 301, 585, 773, 777, 1146, 1273], "enter": 154, "advantag": [154, 225, 301], "set_": 154, "set_verbos": 154, "do_various_th": 154, "cleaner": 154, "breviti": 154, "vein": 154, "durat": [154, 208, 270, 301, 386, 394, 395, 398, 402, 405, 407, 412, 419, 424, 425, 426, 427, 428, 429, 430, 434, 683, 720, 721, 723, 724, 764, 765, 777, 825, 889, 892, 970, 978, 979, 982, 989, 992, 995, 1000, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1022, 1256, 1273], "set_ascii_t": 154, "write_ascii_frame_to_stdout": 154, "sy": 154, "nan_as_nul": 156, "polarsdatafram": 156, "notimplementederror": 156, "num_row": 156, "get_column": [156, 262, 301], "dtypekind": 156, "inference_s": [157, 211, 301], "256": [157, 211, 301, 1136, 1273], "map_row": [157, 301], "tri": [157, 211, 301], "approxim": [158, 301, 317, 698, 777, 792, 889, 1282], "hyperloglog": [158, 301, 317, 698, 777, 792, 889], "algorithm": [158, 301, 317, 622, 647, 698, 777, 792, 889, 1187, 1212], "cardin": [158, 301, 317, 698, 777, 792, 889], "k": [159, 238, 264, 265, 301, 356, 369, 482, 684, 777, 793, 858, 889, 937, 1073, 1257, 1273], "intoexpr": [159, 187, 188, 189, 190, 191, 192, 235, 241, 242, 245, 249, 264, 274, 275, 279, 301, 315, 334, 351, 354, 355, 462, 466, 493, 494, 513, 514, 515, 516, 570, 585, 605, 607, 608, 617, 622, 647, 652, 653, 654, 660, 661, 694, 696, 702, 704, 705, 706, 707, 709, 711, 714, 715, 718, 722, 729, 744, 748, 753, 756, 759, 761, 777, 793, 815, 816, 817, 818, 819, 820, 843, 845, 846, 849, 853, 858, 864, 865, 869, 889, 916, 932, 935, 936, 1050, 1083, 1146, 1172, 1217, 1218, 1219, 1225, 1226, 1273], "nulls_last": [159, 249, 264, 301, 326, 344, 519, 616, 777, 793, 853, 858, 889, 908, 926, 1108, 1182, 1273], "smallest": [159, 264, 301, 356, 777, 793, 858, 889, 937, 1273], "largest": [159, 264, 301, 684, 777, 793, 858, 889, 1257, 1273], "bottom": [159, 301, 793, 889], "wors": [159, 264, 301, 793, 853, 858, 889], "search": [159, 208, 264, 301, 525, 622, 647, 793, 825, 853, 858, 889, 1187, 1212], "top_k": [159, 301, 356, 777, 793, 889, 937, 1273], "columnnameorselector": [160, 167, 169, 217, 224, 226, 238, 258, 266, 267, 268, 301, 795, 804, 805, 834, 859, 860, 889], "strict": [160, 301, 352, 357, 621, 625, 632, 644, 662, 663, 664, 666, 668, 777, 795, 889, 933, 938, 1026, 1167, 1186, 1190, 1197, 1209, 1227, 1228, 1229, 1231, 1233, 1273], "due": [160, 188, 208, 235, 238, 270, 301, 311, 357, 395, 413, 417, 431, 481, 556, 558, 559, 560, 561, 576, 590, 593, 594, 595, 596, 597, 599, 600, 601, 676, 720, 721, 723, 724, 764, 765, 777, 795, 816, 825, 843, 889, 938, 979, 1001, 1005, 1019, 1273], "overflow": [160, 301, 357, 372, 373, 644, 666, 677, 777, 795, 889, 938, 957, 958, 1209, 1231, 1243, 1273], "2020": [160, 166, 186, 235, 301, 304, 390, 395, 416, 420, 423, 424, 425, 426, 427, 428, 429, 430, 590, 662, 663, 664, 777, 795, 802, 843, 889, 892, 974, 979, 1004, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1227, 1228, 1229], "u8": [160, 258, 259, 268, 301, 585, 692, 777, 795, 889, 892, 1146, 1250, 1273, 1282], "tempor": [160, 188, 189, 191, 192, 205, 235, 237, 238, 257, 301, 362, 466, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 777, 789, 795, 816, 817, 819, 820, 843, 889, 892, 948, 1050, 1069, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "to_dict": [160, 301, 795, 889], "as_seri": [160, 256, 301, 795, 889, 964, 1140, 1273], "greater": [161, 208, 301, 457, 459, 614, 642, 643, 654, 671, 777, 825, 889, 1180, 1207, 1208, 1219, 1236, 1273], "cheap": [161, 162, 242, 275, 301, 796, 797, 846, 865, 889, 947, 951, 1273], "deepcopi": [161, 301, 796, 889, 947, 1273], "appl": [163, 196, 207, 230, 233, 256, 282, 283, 285, 286, 288, 289, 290, 291, 292, 293, 294, 301, 587, 627, 655, 777, 824, 841, 872, 873, 875, 876, 878, 879, 880, 881, 882, 883, 884, 889, 1192, 1220], "banana": [163, 256, 283, 285, 288, 289, 290, 291, 292, 293, 294, 301, 587, 627, 655, 777, 873, 875, 878, 879, 880, 881, 882, 883, 884], "orang": [163, 282, 283, 285, 286, 288, 289, 291, 293, 294, 301, 872, 873, 875, 876, 878, 879, 881, 883, 884], "pairwis": [164, 301], "pearson": [164, 301, 482, 614, 707, 777, 1073, 1180, 1273], "correl": [164, 301, 707, 754], "coeffici": [164, 301, 614, 777, 1180, 1273], "corrcoef": [164, 301], "percentil": [166, 301, 802, 889, 965, 1273], "interpol": [166, 228, 293, 301, 447, 540, 579, 597, 751, 777, 802, 840, 883, 889, 965, 1141, 1157, 1273], "rollinginterpolationmethod": [166, 228, 293, 301, 579, 597, 751, 777, 802, 840, 883, 889, 965, 1141, 1157, 1273], "summari": [166, 301, 802, 889, 965, 1273], "midpoint": [166, 228, 293, 301, 579, 597, 751, 777, 802, 840, 883, 889, 965, 1141, 1157, 1273], "linear": [166, 199, 228, 293, 301, 465, 491, 540, 579, 597, 705, 706, 751, 777, 802, 823, 840, 883, 889, 965, 1049, 1080, 1141, 1157, 1273], "deem": [166, 301, 802, 889], "programmat": [166, 301, 802, 889], "versu": [166, 301, 802, 889], "interact": [166, 301, 802, 889], "explor": [166, 301, 802, 889], "glimps": [166, 194, 301], "median": [166, 226, 301, 447, 595, 777, 802, 866, 889, 965, 1155, 1273], "null_count": [166, 169, 301, 379, 777, 802, 889, 963, 965, 1043, 1273], "266667": [166, 301, 802, 889], "666667": [166, 199, 271, 289, 301, 439, 745, 777, 802, 823, 862, 879, 889, 1028, 1273], "std": [166, 301, 599, 777, 802, 889, 965, 1159, 1273], "101514": [166, 301, 802, 889], "071068": [166, 301, 802, 889], "36": [166, 301, 802, 889], "34": [166, 301, 662, 802, 889, 1227], "43": [166, 235, 301, 373, 590, 600, 777, 802, 843, 889], "70": [166, 301, 692, 777, 802, 889], "88": [166, 301, 802, 889], "90": [166, 301, 665, 802, 889, 1230], "49": [166, 301, 802, 889], "21": [166, 218, 251, 301, 388, 593, 594, 596, 599, 600, 601, 731, 777, 802, 835, 889, 892, 972], "subset": [169, 222, 266, 301, 805, 859, 889], "preserv": [169, 177, 187, 190, 207, 211, 260, 261, 301, 384, 385, 448, 496, 611, 777, 805, 812, 824, 889, 968, 969, 1037, 1085, 1177, 1255, 1273], "behavior": [169, 301, 500, 523, 536, 728, 737, 777, 805, 889, 964, 1089, 1112, 1121, 1140, 1273], "all_horizont": [169, 301, 693, 805, 889], "is_nul": [169, 301, 777, 805, 889, 1273], "null_equ": [171, 181, 301, 1026, 1167, 1273], "sizeunit": [172, 301, 1027, 1273], "heap": [172, 301, 777, 1027, 1273], "its": [172, 301, 389, 417, 431, 617, 767, 777, 942, 973, 1005, 1019, 1027, 1273], "bitmap": [172, 301, 1027, 1273], "structarrai": [172, 301, 1027, 1273], "constant": [172, 235, 301, 386, 445, 777, 843, 889, 970, 1027, 1034, 1273], "unchang": [172, 301, 536, 585, 683, 777, 829, 830, 871, 877, 889, 1027, 1121, 1146, 1256, 1273], "capac": [172, 247, 301, 1027, 1175, 1273], "ffi": [172, 301, 1027, 1273], "kb": [172, 301, 1027, 1273], "mb": [172, 301, 1027, 1273], "gb": [172, 301, 1027, 1273], "revers": [172, 301, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 534, 557, 558, 559, 576, 676, 710, 777, 889, 955, 956, 957, 958, 959, 960, 961, 962, 1273], "1_000_000": [172, 301, 1027, 1273], "28000000": [172, 301], "702880859375": [172, 301], "more_column": [173, 243, 267, 301, 442, 727, 777, 808, 848, 860, 889], "long": [173, 217, 268, 301, 808, 834, 889], "letter": [173, 284, 295, 301, 442, 622, 630, 647, 727, 777, 808, 874, 885, 889, 892, 1187, 1195, 1212], "onlin": [174, 301, 1033, 1273], "rerun": [174, 301, 1033, 1273], "finish": [174, 301, 1033, 1273], "conveni": [174, 301, 898, 1033, 1273], "Not": [175, 301, 475, 477, 777, 810, 889], "fillnullstrategi": [176, 301, 447, 777, 811, 889, 1036, 1273], "matches_supertyp": [176, 301, 811, 889], "forward": [176, 208, 245, 301, 409, 447, 453, 517, 607, 777, 811, 825, 849, 889, 997, 1036, 1106, 1172, 1273], "consecut": [176, 301, 350, 447, 453, 620, 777, 811, 889, 1036, 1185, 1273], "fill_nan": [176, 301, 777, 889, 1273], "intoexprcolumn": [177, 301, 333, 337, 338, 356, 362, 363, 364, 448, 492, 503, 512, 517, 571, 575, 604, 607, 629, 651, 657, 658, 659, 671, 684, 699, 720, 721, 723, 724, 735, 736, 764, 765, 767, 777, 812, 849, 889, 915, 919, 920, 937, 948, 949, 950, 1081, 1092, 1101, 1106, 1136, 1194, 1216, 1222, 1223, 1224, 1236, 1257, 1273], "constraint": [177, 301, 448, 481, 556, 558, 559, 560, 561, 576, 676, 767, 777, 812, 889], "behav": [177, 301, 448, 537, 658, 659, 777, 812, 889], "eq": [177, 301, 438, 448, 777, 812, 889, 1273], "implicitli": [177, 301, 448, 767, 777, 812, 889], "is_in": [177, 301, 777, 1273], "get_column_index": [178, 301], "reduct": [180, 301], "supercast": [180, 301], "parent": [180, 301], "rule": [180, 301, 622, 647, 1187, 1212], "arithmet": [180, 301], "zip_with": [180, 301, 1273], "foo11": [180, 301], "bar22": [180, 301], "nth": [182, 254, 301, 456, 654, 680, 777, 814, 857, 889, 1041, 1219, 1246, 1273], "th": [182, 254, 301, 456, 513, 614, 680, 777, 814, 857, 889, 1041, 1102, 1180, 1246, 1273], "retriev": [183, 301, 331, 332, 489, 490, 672, 913, 914, 1078, 1079, 1237], "max_items_per_column": [186, 301], "max_colname_length": [186, 301], "return_as_str": [186, 301, 548], "preview": [186, 301], "few": [186, 301], "exce": [186, 301], "ellipsi": [186, 301], "head": [186, 210, 253, 301, 315, 486, 777, 828, 889, 1075, 1244, 1273], "tail": [186, 194, 301, 315, 614, 777, 889, 1045, 1180, 1273], "usd": [186, 301, 1282], "more_bi": [187, 190, 224, 249, 301, 617, 777, 815, 818, 853, 889], "groupbi": [187, 226, 301, 316, 537, 697, 742, 777, 889], "consist": [187, 190, 224, 301, 662, 815, 818, 889, 898, 1033, 1227, 1273], "regardless": [187, 190, 301, 390, 635, 767, 974, 1200], "agg": [187, 188, 191, 226, 235, 301, 310, 448, 450, 455, 458, 535, 537, 616, 617, 691, 742, 777, 798, 799, 807, 809, 815, 816, 817, 819, 820, 839, 843, 847, 851, 889, 892], "Or": [187, 188, 208, 235, 249, 270, 279, 301, 570, 590, 617, 720, 721, 723, 724, 764, 765, 767, 777, 815, 816, 825, 843, 853, 869, 889], "index_column": [188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "timedelta": [188, 189, 191, 192, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 825, 843, 889, 892, 985, 993, 1001, 1005, 1019, 1131, 1132, 1273], "period": [188, 189, 191, 192, 235, 301, 417, 431, 439, 440, 441, 571, 590, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 843, 889, 1005, 1019, 1028, 1029, 1030, 1136, 1273], "include_boundari": [188, 191, 301, 816, 819, 889], "closedinterv": [188, 189, 191, 192, 235, 301, 466, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 843, 889, 1050, 1273], "label": [188, 301, 380, 578, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 777, 816, 839, 889, 964, 1140, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "start_bi": [188, 191, 301, 816, 819, 889], "startbi": [188, 191, 301, 816, 819, 889], "check_sort": [188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "dynamicgroupbi": [188, 191, 301], "member": [188, 301, 816, 889, 1058, 1273], "descript": [188, 301, 816, 889], "ascend": [188, 189, 191, 192, 235, 301, 590, 594, 595, 596, 597, 599, 601, 777, 816, 817, 819, 820, 843, 889], "dynam": [188, 191, 301, 525, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 777, 816, 819, 889, 1114, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "matter": [188, 189, 191, 192, 205, 235, 237, 238, 257, 301, 590, 658, 659, 777, 816, 817, 819, 820, 843, 889], "interv": [188, 189, 191, 192, 235, 270, 301, 380, 417, 431, 462, 466, 578, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 817, 819, 820, 843, 889, 964, 977, 980, 981, 988, 991, 994, 996, 999, 1002, 1003, 1005, 1010, 1019, 1020, 1046, 1050, 1140, 1273], "_lower_boundari": [188, 301, 816, 889], "_upper_boundari": [188, 301, 816, 889], "harder": [188, 191, 301, 816, 819, 889], "inclus": [188, 189, 191, 192, 235, 301, 466, 590, 593, 594, 595, 596, 597, 599, 600, 601, 652, 653, 699, 720, 721, 723, 724, 735, 736, 764, 765, 777, 816, 817, 819, 820, 843, 889, 1050, 1217, 1218, 1273], "datapoint": [188, 191, 301, 816, 819, 889], "boundari": [188, 301, 362, 363, 364, 462, 777, 816, 889, 948, 949, 950, 1046, 1273], "mondai": [188, 191, 301, 431, 433, 816, 819, 889, 1019, 1021], "tuesdai": [188, 191, 301, 816, 819, 889], "wednesdai": [188, 191, 301, 420, 423, 816, 819, 889, 1008, 1011], "thursdai": [188, 191, 301, 816, 819, 889], "fridai": [188, 191, 301, 420, 423, 816, 819, 889, 1008, 1011], "saturdai": [188, 191, 301, 816, 819, 889], "sundai": [188, 191, 301, 420, 423, 433, 816, 819, 889, 1008, 1011, 1021], "earliest": [188, 191, 301, 416, 417, 431, 662, 664, 722, 816, 819, 889, 1004, 1005, 1019, 1227, 1229], "weekli": [188, 191, 301, 431, 816, 819, 889, 1019], "week": [188, 191, 208, 235, 270, 301, 413, 417, 431, 433, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 819, 825, 843, 889, 892, 1001, 1005, 1019, 1021], "sorted": [188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "verifi": [188, 189, 191, 192, 235, 301, 590, 777, 816, 817, 819, 820, 843, 889], "incorrectli": [188, 189, 191, 192, 235, 301, 525, 590, 777, 816, 817, 819, 820, 843, 889], "incorrect": [188, 189, 191, 192, 235, 301, 434, 535, 590, 606, 777, 816, 817, 819, 820, 843, 871, 877, 889, 1022, 1170, 1273], "roll": [188, 189, 192, 301, 409, 410, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 705, 754, 755, 777, 816, 817, 820, 889, 997, 998, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273], "re": [188, 204, 260, 301, 409, 410, 420, 423, 816, 889, 997, 998, 1008, 1011, 1281], "1d": [188, 208, 235, 270, 301, 387, 413, 417, 425, 428, 431, 434, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 739, 764, 765, 777, 816, 825, 843, 889, 892, 971, 980, 987, 1001, 1005, 1010, 1013, 1016, 1019], "set_index": [188, 301, 816, 889], "resampl": [188, 301, 816, 889], "reset_index": [188, 301, 816, 889], "though": [188, 301, 773, 816, 889], "unlik": [188, 301, 816, 889], "evenli": [188, 301, 816, 889], "upsampl": [188, 301, 816, 889], "1n": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "nanosecond": [188, 208, 235, 270, 301, 413, 417, 418, 429, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1006, 1017, 1019], "1u": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "microsecond": [188, 205, 208, 235, 237, 238, 257, 270, 301, 413, 417, 426, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 722, 723, 724, 725, 763, 764, 765, 777, 816, 825, 839, 843, 889, 892, 1001, 1005, 1014, 1019], "1m": [188, 208, 235, 270, 301, 413, 417, 430, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1014, 1015, 1017, 1018, 1019], "millisecond": [188, 208, 235, 270, 301, 397, 406, 413, 417, 427, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 892, 1001, 1005, 1015, 1019], "minut": [188, 208, 235, 270, 301, 397, 401, 404, 411, 413, 417, 418, 428, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 722, 723, 724, 725, 763, 764, 765, 777, 816, 825, 843, 889, 892, 1001, 1005, 1016, 1019], "1h": [188, 208, 235, 270, 301, 395, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 979, 981, 1001, 1005, 1019], "hour": [188, 208, 235, 270, 301, 401, 404, 406, 411, 413, 417, 418, 425, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 722, 723, 724, 725, 763, 764, 765, 777, 816, 825, 843, 889, 892, 1001, 1005, 1013, 1019], "1w": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "1mo": [188, 208, 235, 270, 301, 390, 409, 410, 413, 416, 417, 424, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 974, 996, 997, 998, 1001, 1002, 1003, 1004, 1005, 1012, 1019, 1020], "month": [188, 208, 235, 270, 301, 393, 409, 410, 413, 417, 420, 423, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 719, 720, 721, 722, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 977, 997, 998, 1001, 1005, 1008, 1011, 1019], "1q": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "quarter": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "1y": [188, 208, 235, 270, 301, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1001, 1005, 1019], "1i": [188, 208, 235, 270, 301, 413, 590, 593, 594, 595, 596, 597, 599, 600, 601, 777, 816, 825, 843, 889, 1001], "3d12h4m25": [188, 208, 235, 270, 301, 417, 431, 590, 720, 721, 723, 724, 764, 765, 777, 816, 825, 843, 889, 1005, 1019], "correspond": [188, 208, 235, 260, 270, 301, 400, 413, 417, 431, 537, 581, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 764, 765, 777, 798, 816, 825, 843, 889, 984, 1001, 1005, 1019, 1142, 1273], "daylight": [188, 208, 235, 270, 301, 386, 395, 413, 417, 431, 590, 593, 594, 595, 596, 597, 599, 600, 601, 720, 721, 723, 724, 725, 764, 765, 777, 816, 825, 843, 889, 979, 1001, 1005, 1019], "10i": [188, 235, 301, 590, 777, 816, 843, 889], "datetime_rang": [188, 301, 387, 390, 409, 410, 413, 416, 417, 424, 425, 426, 427, 428, 429, 430, 431, 434, 593, 594, 596, 599, 600, 601, 720, 777, 816, 889, 970, 971, 974, 979, 980, 981, 987, 988, 991, 994, 997, 998, 999, 1001, 1004, 1005, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "30m": [188, 301, 417, 431, 816, 889, 1005, 1019], "lower_bound": [188, 301, 362, 364, 466, 777, 816, 889, 948, 950, 1050, 1260, 1273], "upper_bound": [188, 301, 362, 363, 466, 525, 777, 816, 889, 948, 949, 1050, 1120, 1273], "bys": [188, 301, 816, 889], "int_rang": [188, 268, 277, 287, 301, 699, 738, 816, 830, 868, 877, 889], "2i": [188, 301, 816, 889], "3i": [188, 301, 816, 889], "a_agg_list": [188, 301, 816, 889], "rollinggroupbi": [189, 192, 235, 301], "group_bi": [190, 222, 226, 300, 301, 310, 448, 450, 455, 458, 535, 537, 616, 617, 691, 742, 777, 798, 799, 807, 809, 818, 839, 851, 888, 889, 892], "group_by_dynam": [191, 235, 301, 819, 843, 889], "_lower_bound": [191, 301, 819, 889], "_upper_bound": [191, 301, 819, 889], "seed_1": [193, 301, 460, 777, 1044, 1273], "seed_2": [193, 301, 460, 777, 1044, 1273], "seed_3": [193, 301, 460, 777, 1044, 1273], "hash": [193, 301, 777, 1273], "Its": [193, 301, 460, 777, 1044, 1273], "u64": [193, 277, 301, 460, 583, 777, 839, 868, 889, 1044, 1273], "10783150408545073287": [193, 301], "1438741209321515184": [193, 301], "10047419486152048166": [193, 301], "2047317070637311557": [193, 301], "ab": [194, 210, 253, 274, 301, 672, 674, 777, 864, 889, 1045, 1075, 1244, 1273], "in_plac": [196, 247, 272, 301, 1143, 1175, 1182, 1273], "grown": [196, 301], "insert_column": [197, 301], "intermedi": [199, 301, 823, 889, 1282], "333333": [199, 301, 481, 556, 777, 823, 889, 1136, 1161, 1273], "mask": [200, 202, 301, 352, 467, 469, 470, 473, 474, 480, 572, 573, 621, 625, 632, 777, 933, 1037, 1043, 1050, 1052, 1055, 1056, 1061, 1062, 1070, 1137, 1138, 1168, 1186, 1190, 1197, 1264, 1273], "visual": [200, 202, 301], "scalar": [203, 211, 236, 301, 605, 697, 739, 742, 777, 1072, 1166, 1273], "With": [203, 245, 301, 517, 593, 594, 595, 596, 597, 599, 600, 601, 607, 777, 849, 889, 1072, 1106, 1172, 1273], "buffer_s": [205, 301], "fit": [205, 247, 268, 301, 609, 753, 777, 1174, 1175, 1273], "signific": [205, 211, 301, 316, 537, 603, 777, 1122, 1163, 1273], "4x": [205, 301], "materialis": [205, 206, 236, 237, 301], "rows_by_kei": [205, 237, 301], "iter_row": [206, 236, 237, 238, 301], "17_500": [206, 301], "klmnoopqrstuvwxyz": [206, 301], "__name__": [206, 301], "7500": [206, 301], "15_000": [206, 301], "record_batch": [206, 301], "to_arrow": [206, 301, 1273], "to_batch": [206, 301], "date32": [206, 301], "large_str": [206, 255, 261, 301], "15000": [206, 301], "2500": [206, 301], "left_on": [207, 208, 269, 301, 824, 825, 861, 889], "right_on": [207, 208, 269, 301, 824, 825, 861, 889], "suffix": [207, 208, 241, 274, 279, 301, 311, 354, 475, 477, 478, 479, 534, 557, 558, 560, 561, 570, 576, 587, 627, 658, 661, 777, 824, 825, 845, 864, 866, 869, 889, 892, 935, 1192, 1226], "_right": [207, 208, 301, 824, 825, 889], "joinvalid": [207, 301, 824, 889], "join_nul": [207, 301, 824, 889], "fashion": [207, 301, 807, 809, 839, 851, 889], "semi": [207, 301, 824, 889], "anti": [207, 301, 824, 877, 889, 1165, 1168, 1273], "cross": [207, 301, 824, 889], "outer_coalesc": [207, 301, 824, 889], "coalesc": [207, 269, 301, 662, 824, 861, 889, 1227], "cartisian": [207, 301, 824, 889], "many_to_mani": [207, 301, 824, 889], "one_to_on": [207, 301, 824, 889], "one_to_mani": [207, 301, 824, 889], "many_to_on": [207, 301, 824, 889], "join_asof": [207, 301, 824, 889], "other_df": [207, 301], "ham_right": [207, 301, 824, 889], "by_left": [208, 301, 825, 889], "by_right": [208, 301, 825, 889], "asofjoinstrategi": [208, 301, 825, 889], "allow_parallel": [208, 301, 824, 825, 889], "force_parallel": [208, 301, 824, 825, 889], "asof": [208, 301, 825, 889], "rather": [208, 301, 535, 548, 578, 589, 671, 777, 825, 889, 1140, 1150, 1236, 1273], "asof_join": [208, 301], "distanc": [208, 301, 462, 777, 825, 889, 1046, 1273], "plan": [208, 209, 301, 794, 798, 803, 807, 824, 825, 847, 851, 889], "forc": [208, 211, 287, 301, 525, 824, 825, 877, 889, 1122, 1273], "gdp": [208, 301, 825, 889], "2016": [208, 301, 825, 889], "2017": [208, 301, 825, 889], "2018": [208, 301, 416, 825, 889, 1004], "2019": [208, 301, 825, 889], "jan": [208, 301, 825, 889], "1st": [208, 301, 825, 889], "4164": [208, 301, 825, 889], "4411": [208, 301, 825, 889], "4566": [208, 301, 825, 889], "4696": [208, 301, 825, 889], "set_sort": [208, 235, 270, 301, 590, 777, 825, 843, 889, 1273], "popul": [208, 301, 825, 889], "12th": [208, 301, 825, 889], "82": [208, 301, 825, 889], "66": [208, 269, 301, 600, 692, 777, 825, 861, 889, 1157, 1273], "83": [208, 301, 825, 889], "52": [208, 274, 301, 432, 602, 777, 825, 864, 889], "request": [209, 301], "describe_plan": [209, 301], "unoptim": [209, 301], "describe_optimized_plan": [209, 301], "show_graph": [209, 301, 889], "un": [209, 301], "graphviz": [209, 301, 851, 889], "much": [211, 268, 287, 301, 379, 500, 523, 537, 636, 637, 742, 777, 877, 963, 1089, 1112, 1122, 1201, 1202, 1273], "intens": [211, 287, 301, 570, 777, 1122, 1273], "materi": [211, 238, 287, 301, 798, 839, 877, 889, 892, 1122, 1273], "parallelis": [211, 287, 301, 1122, 1273], "achiev": [211, 287, 301, 537, 637, 777, 964, 1122, 1140, 1202, 1273], "best": [211, 287, 301, 537, 777, 1122, 1273], "black": [211, 301, 351, 353, 354, 355], "arbitrarili": [211, 301], "rearrang": [211, 301], "transform": [211, 301, 535, 667, 669, 670, 777], "lru_cach": [211, 301, 537, 777, 1122, 1273], "column_1": [211, 265, 301], "axi": [212, 214, 217, 219, 251, 301, 700, 701, 834, 889], "max_horizont": [212, 301, 743], "null_strategi": [214, 251, 301], "nullstrategi": [214, 251, 301], "mean_horizont": [214, 301], "propag": [214, 251, 301, 338, 438, 503, 562, 563, 565, 620, 706, 777, 920, 1092, 1131, 1132, 1185, 1273], "spam": [214, 301, 630, 1195], "ignore_nul": [215, 252, 301, 312, 314, 338, 439, 440, 441, 503, 620, 693, 695, 706, 777, 896, 897, 920, 1028, 1029, 1030, 1092, 1185, 1263, 1273], "id_var": [217, 301, 834, 889], "value_var": [217, 301, 834, 889], "variable_nam": [217, 301, 834, 889], "value_nam": [217, 301, 834, 889], "unpivot": [217, 301, 834, 889], "massag": [217, 301, 834, 889], "measur": [217, 301, 834, 889], "steve": [218, 301, 835, 889], "elis": [218, 301, 835, 889], "ag": [218, 301, 835, 889], "anna": [218, 301, 835, 889], "megan": [218, 301, 835, 889], "thoma": [218, 301, 835, 889], "min_horizont": [219, 301, 747, 756], "what": [222, 301, 304, 535, 622, 647, 777, 1187, 1212, 1263, 1273, 1277], "pack": [222, 301], "expr_unique_subset": [222, 301], "df_nuniqu": [222, 301], "df_agg_nuniqu": [222, 301], "include_kei": [224, 238, 301], "offer": [225, 301, 574, 777, 838, 889], "fulli": [225, 239, 301], "cast_str_to_int": [225, 301, 838, 889], "col_nam": [225, 301, 767, 838, 889], "tdf": [225, 301, 838, 889], "aggregate_funct": [226, 301], "pivotagg": [226, 301], "sort_column": [226, 301], "section": [226, 301, 621, 629, 630, 632, 645, 720, 721, 723, 724, 764, 765, 1186, 1194, 1195, 1197, 1210], "predefin": [226, 301], "predict": [226, 229, 270, 301], "transpos": [226, 301], "discoveri": [226, 301], "col1": [226, 301, 889, 1282], "col2": [226, 301, 889, 1282], "col3": [226, 301, 1282], "tanh": [226, 301, 777, 1273], "998347": [226, 301], "964028": [226, 301], "999954": [226, 301], "unique_column_valu": [226, 301], "column_nam": [230, 265, 301, 841, 889], "coo": [230, 301, 841, 889], "car": [230, 256, 301, 587, 777, 841, 889], "cam": [230, 301, 841, 889], "replace_column": [232, 301], "t_0": [235, 301, 590, 593, 594, 595, 596, 597, 599, 600, 601, 777, 843, 889], "t_1": [235, 301, 590, 593, 594, 595, 596, 597, 599, 600, 601, 777, 843, 889], "t_n": [235, 301, 590, 593, 594, 595, 596, 597, 599, 600, 601, 777, 843, 889], "strptime": [235, 301, 416, 590, 777, 843, 889, 1004], "2d": [235, 260, 301, 413, 590, 739, 777, 843, 889, 970, 977], "sum_a": [235, 301, 590, 777, 843, 889], "min_a": [235, 301, 590, 777, 843, 889], "max_a": [235, 301, 590, 777, 843, 889], "by_pred": [236, 301], "accord": [236, 301, 536, 578, 720, 721, 723, 724, 764, 765, 777, 984, 1140, 1273], "mutual": [236, 301], "exclus": [236, 301, 692, 699, 735, 736, 777], "clariti": [236, 301], "toomanyrowsreturnederror": [236, 301, 789], "norowsreturnederror": [236, 301, 789], "inherit": [236, 301], "rowserror": [236, 301, 789], "high": [238, 301, 578, 777, 1140, 1273], "cost": [238, 301], "reoconstruct": [238, 301], "defaultdict": [238, 301], "assum": [238, 301, 829, 830, 871, 877, 889], "with_replac": [239, 301, 512, 604, 777, 1101, 1164, 1273], "ordereddict": [240, 301, 759, 844, 889], "named_expr": [241, 242, 274, 275, 301, 756, 759, 845, 846, 864, 865, 889], "threshold": [241, 301, 845, 889], "set_auto_structifi": [241, 274, 301, 845, 864, 889], "auto_structifi": [241, 274, 301, 845, 864, 889], "is_odd": [241, 301, 845, 889], "_is_odd": [241, 301, 845, 889], "sequenti": [242, 275, 301, 846, 865, 889], "fill_valu": [245, 246, 268, 301, 607, 608, 777, 849, 850, 889, 1172, 1173, 1273], "opposit": [245, 301, 517, 607, 777, 849, 889, 1106, 1172, 1273], "lag": [245, 301, 517, 607, 705, 777, 849, 889, 1106, 1172, 1273], "shift": [246, 301, 382, 495, 571, 608, 705, 777, 850, 889, 966, 1084, 1136, 1173, 1273], "shrink": [247, 301, 609, 777, 1174, 1175, 1273], "hold": [247, 301], "ddof": [250, 271, 301, 345, 349, 520, 527, 599, 601, 619, 690, 707, 709, 754, 755, 758, 766, 777, 854, 862, 889, 927, 931, 1159, 1161, 1184, 1262, 1273], "deviat": [250, 301, 440, 599, 619, 758, 777, 854, 889, 1029, 1184, 1273], "degre": [250, 271, 301, 520, 527, 580, 599, 601, 619, 690, 701, 707, 709, 754, 755, 758, 766, 777, 854, 862, 889, 1159, 1161, 1184, 1262, 1273], "freedom": [250, 271, 301, 520, 527, 599, 601, 619, 690, 707, 709, 754, 755, 758, 766, 777, 854, 862, 889, 1159, 1161, 1184, 1262, 1273], "divisor": [250, 271, 301, 520, 527, 599, 601, 619, 690, 707, 709, 754, 755, 758, 766, 777, 854, 862, 889, 1159, 1161, 1184, 1262, 1273], "816497": [250, 301], "gather_everi": [254, 301, 680, 777, 857, 889, 1246, 1273], "mostli": [255, 301, 448, 777], "categoricaltyp": [255, 301], "fruit": [256, 301, 587, 627, 655, 777, 1192, 1220], "beetl": [256, 301, 587, 777], "audi": [256, 301, 587, 777], "28": [256, 301, 309, 416, 434, 777, 1004, 1022, 1282], "300": [256, 301, 568, 777, 1153, 1154, 1156, 1273], "drop_first": [258, 301], "dummi": [258, 301, 1250, 1273], "foo_1": [258, 301], "foo_2": [258, 301], "bar_3": [258, 301], "bar_4": [258, 301], "ham_a": [258, 301], "ham_b": [258, 301], "instantiat": [259, 301, 1252, 1273], "from_repr": [259, 301, 1252, 1273], "df_from_str_repr": [259, 301], "eval": [259, 301, 726, 1252, 1273], "indexord": [260, 301], "fortran": [260, 301], "downstream": [260, 301, 606, 777, 1170, 1273], "prevent": [260, 301, 311, 372, 373, 481, 556, 677, 777, 889, 957, 958, 1243, 1273], "reshap": [260, 301, 498, 777, 1087, 1273], "ll": [260, 301], "u1": [260, 301], "f4": [260, 301], "view": [260, 301, 537, 777, 1254, 1273], "recarrai": [260, 301], "rec": [260, 301], "use_pyarrow_extension_arrai": [261, 301, 1255, 1273], "extens": [261, 301, 1255, 1273], "na": [261, 301, 655, 1255, 1273], "doubl": [261, 301], "four": [263, 301], "five": [263, 301, 1282], "bottom_k": [264, 301, 684, 777, 858, 889, 1257, 1273], "header_nam": [265, 301], "perhap": [265, 301], "column_2": [265, 301], "name_gener": [265, 301], "base_nam": [265, 301], "my_column_": [265, 301], "my_column_0": [265, 301], "my_column_1": [265, 301], "my_column_2": [265, 301], "j": [265, 301], "new_id": [265, 301], "uniquekeepstrategi": [266, 301, 859, 889], "kept": [266, 301, 859, 889], "decompos": [267, 301, 860, 889], "t_a": [267, 301, 860, 889], "t_b": [267, 301, 860, 889], "t_c": [267, 301, 860, 889], "t_d": [267, 301, 860, 889], "womp": [267, 301, 860, 889], "t_": [267, 301, 860, 889], "t_struct": [267, 301, 860, 889], "step": [268, 301, 699, 735, 736], "unstackdirect": [268, 301], "pivot": [268, 301], "phase": [268, 301], "ascii_uppercas": [268, 301], "h": [268, 301, 309, 420, 423, 609, 662, 664, 668, 777, 1227, 1229, 1233], "x_0": [268, 301, 439, 440, 441, 777, 1028, 1029, 1030, 1273], "x_1": [268, 301], "y_0": [268, 301, 439, 440, 441, 777, 1028, 1029, 1030, 1273], "y_1": [268, 301], "z_0": [268, 301], "z_1": [268, 301], "include_nul": [269, 301, 861, 889], "implicit": [269, 301, 861, 889], "syntact": [269, 301, 585, 693, 695, 698, 708, 710, 713, 727, 728, 732, 733, 734, 737, 743, 745, 746, 747, 749, 750, 751, 756, 758, 760, 762, 766, 768, 777, 861, 889, 1146, 1183, 1273], "sugar": [269, 301, 585, 693, 695, 698, 708, 710, 713, 727, 728, 732, 733, 734, 737, 743, 745, 746, 747, 749, 750, 751, 756, 758, 760, 762, 766, 768, 777, 861, 889, 1146, 1183, 1273], "400": [269, 301, 426, 427, 429, 861, 889, 1153, 1154, 1156, 1273], "600": [269, 301, 426, 427, 429, 861, 889, 892], "700": [269, 301, 861, 889], "new_df": [269, 301, 861, 889], "time_column": [270, 301], "frequenc": [270, 301], "date_rang": [270, 301, 393, 396, 414, 422, 433, 977, 996, 1002, 1003, 1020, 1021], "forward_fil": [270, 301, 370, 373, 777], "varianc": [271, 301, 441, 482, 601, 690, 766, 777, 862, 889, 1030, 1073, 1161, 1262, 1273], "grow": [272, 301], "not_": [274, 301, 476, 777, 864, 889, 1273], "not_c": [274, 301, 864, 889], "diff": [274, 301, 424, 425, 426, 427, 428, 429, 430, 513, 777, 864, 889, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1102, 1273], "_diff": [274, 301, 864, 889], "row_nr": [276, 301, 867, 889], "1001": [277, 301, 868, 889], "1002": [277, 301, 868, 889], "named_agg": [279, 869], "_sum": [279, 869], "_mean_squar": [279, 869], "b_sum": [279, 869], "c_mean_squar": [279, 869], "sub": [281, 287, 331, 332, 333, 336, 337, 338, 339, 340, 341, 342, 345, 346, 349, 503, 777, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 927, 928, 931, 1092], "map_group": [281, 697, 871], "toward": [282, 485, 505, 710, 777, 872, 876, 1074, 1094, 1273], "nr": [284, 295, 874, 885], "triangl": [287, 877], "group_df": [287, 877], "maxim": [288, 324, 777, 878, 906, 1273], "833333": [289, 879], "minim": [291, 325, 332, 490, 609, 617, 777, 881, 907, 914, 1079, 1126, 1174, 1273], "overview": [301, 777, 789, 889, 1273, 1282], "frameinittyp": [301, 889], "entri": [301, 889, 1281], "mydatafram": 301, "df4": 301, "df5": 301, "df6": 301, "approx_n_uniqu": [301, 777, 889], "corr": 301, "drop_in_plac": 301, "drop_nul": [301, 384, 777, 889, 968, 1273], "estimated_s": [301, 1273], "explod": [301, 450, 570, 586, 777, 889, 1147, 1273], "find_idx_by_nam": 301, "fold": [301, 546, 704, 711, 712, 715, 716, 752], "frame_equ": 301, "group_by_rol": [301, 889], "groupby_dynam": [301, 889], "groupby_rol": [301, 889], "hash_row": 301, "hstack": 301, "insert_at_idx": 301, "is_dupl": [301, 777, 1273], "is_empti": [301, 1273], "is_uniqu": [301, 777, 1273], "iter_column": 301, "iter_slic": 301, "melt": [301, 889], "merge_sort": [301, 889], "n_uniqu": [301, 317, 777, 1273], "pipe": [301, 777, 889], "plot": [301, 839, 851, 889, 1273], "hvplottabularpolar": [301, 1273], "defer": [301, 304, 1273, 1277], "galleri": [301, 304, 1273, 1277], "scatter": [301, 304, 1169, 1273], "speci": [301, 304], "setosa": [301, 304], "versicolor": [301, 304], "stock_1": [301, 304], "stock_2": [301, 304], "quantil": [301, 578, 597, 777, 889, 1140, 1157, 1273], "replace_at_idx": 301, "select_seq": [301, 889], "shift_and_fil": [301, 777, 889, 1273], "shrink_to_fit": [301, 1273], "take_everi": [301, 777, 889, 1273], "to_dummi": [301, 1273], "to_numpi": [301, 535, 777, 1273], "to_panda": [301, 1273], "to_struct": [301, 630], "unnest": [301, 380, 578, 588, 630, 631, 653, 654, 674, 777, 889, 964, 1114, 1140, 1149, 1218, 1219, 1273], "unstack": 301, "with_columns_seq": [301, 889], "with_row_count": [301, 889], "write_avro": 301, "write_databas": 301, "write_delta": 301, "write_excel": 301, "write_ipc_stream": 301, "write_json": 301, "write_parquet": 301, "cum_prod": [309, 377, 777, 961, 1273], "ghi": [309, 630, 777, 892, 1195], "94": [310, 777], "to_uppercas": [311, 560, 631, 777], "confus": [312, 475, 477, 647, 777], "kleen": [312, 314, 693, 695, 777, 896, 897, 1273], "bitwis": [313, 569, 692, 693, 694, 695, 696, 777], "upcast": [315, 777], "skip_nul": [316, 537, 777, 899, 1122, 1273], "pass_nam": [316, 537, 777], "mapelementsstrategi": [316, 537, 777], "thread_loc": [316, 537, 777], "map_el": [316, 535, 692, 777, 899, 1273], "unknown": [316, 537, 629, 739, 777, 1194], "alpha": [316, 439, 440, 441, 777, 807, 809, 839, 851, 889, 1028, 1029, 1030, 1273], "stage": [316, 777], "code": [316, 351, 353, 354, 355, 537, 606, 777, 809, 827, 889, 1170, 1273], "gil": [316, 537, 777], "approx": [317, 777], "1005": [317, 777], "invers": [318, 319, 320, 321, 322, 323, 777, 900, 901, 902, 903, 904, 905, 1273], "cosin": [318, 319, 365, 366, 535, 777, 900, 901, 952, 953, 1273], "570796": [318, 320, 777, 900, 902, 1273], "hyperbol": [319, 321, 323, 366, 613, 682, 777, 901, 903, 905, 953, 1179, 1248, 1273], "sine": [320, 321, 535, 612, 613, 777, 902, 903, 1178, 1179, 1273], "881374": [321, 777, 903, 1273], "tangent": [322, 323, 681, 682, 777, 904, 905, 1247, 1248, 1273], "785398": [322, 700, 701, 777, 904, 1273], "arg_wher": [327, 777], "subarrai": [329, 330, 911, 912], "membership": [333, 492, 915, 1081], "number_of_two": [334, 494], "sublist": [337, 489, 490, 492, 495, 499, 500, 501, 502, 503, 504, 513, 518, 522, 523, 525, 919, 1058, 1078, 1079, 1081, 1084, 1088, 1089, 1090, 1091, 1092, 1093, 1102, 1107, 1111, 1112, 1114, 1273], "x_y": [338, 503], "707107": [345, 440, 599, 777, 927, 1029, 1273], "i8": [347, 393, 397, 401, 404, 406, 408, 411, 414, 415, 418, 432, 433, 524, 609, 750, 753, 768, 777, 929, 966, 977, 981, 994, 996, 1003, 1006, 1020, 1021, 1113, 1148, 1260, 1273], "seen": [350, 453, 777], "substr": [351, 354, 355, 621, 627, 632, 645, 646, 652, 653, 654, 655, 892, 932, 935, 936, 1186, 1192, 1197, 1210, 1211, 1217, 1218, 1219, 1220], "ends_with": [351, 355, 621, 655, 892, 1220], "yellow": [351, 353, 354, 355], "x00": [351, 353, 354, 355], "xff": [351, 353, 354, 355], "contains_with_lit": 351, "contains_with_expr": 351, "transferencod": [352, 353, 625, 626, 933, 934, 1190, 1191], "hex": [352, 353, 625, 626, 666, 933, 934, 1190, 1191, 1231], "base64": [352, 353, 625, 626, 933, 934, 1190, 1191], "code_encoded_hex": 353, "000000": 353, "ffff00": 353, "0000ff": 353, "anywher": [354, 355, 662, 663, 664, 1227, 1228, 1229], "ends_with_lit": 354, "ends_with_expr": 354, "starts_with_lit": 355, "starts_with_expr": 355, "complex": [356, 379, 684, 777, 937, 963, 1257, 1273], "frac": [356, 439, 440, 441, 614, 684, 777, 937, 1028, 1029, 1030, 1180, 1257, 1273], "to_fram": [358, 396, 417, 422, 431, 662, 964, 1140, 1165, 1168, 1218, 1219, 1227, 1273], "259921": [360, 777, 944, 1273], "587401": [360, 777], "numericliter": [362, 363, 364, 777, 948, 949, 950, 1273], "temporalliter": [362, 363, 364, 777, 948, 949, 950, 986, 987, 1273], "outsid": [362, 777, 948, 1273], "clip": [363, 364, 777, 949, 950, 1273], "543081": [366, 777, 953, 1273], "cotang": [367, 777, 954, 1273], "cumul": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 710, 711, 712, 713, 714, 715, 716, 717, 718, 777, 955, 956, 957, 958, 959, 960, 961, 962, 1273], "cum_count_revers": [369, 777], "cum_max_revers": [370, 777], "cum_max_all_fil": [370, 777], "cum_min_revers": [371, 777], "cum_prod_revers": [372, 777], "cum_sum_revers": [373, 777], "value_cum_sum": [373, 777], "value_cum_sum_all_fil": [373, 777], "cum_count": [374, 777, 1273], "cum_max": [375, 777, 959, 1273], "cum_min": [376, 777, 960, 1273], "cum_sum": [378, 464, 675, 714, 717, 777, 822, 889, 962, 1072, 1273], "min_period": [379, 439, 440, 441, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 754, 755, 777, 963, 1028, 1029, 1030, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "slide": [379, 777, 963, 1273], "slot": [379, 382, 495, 777, 963, 966, 1084, 1273], "realli": [379, 622, 647, 777, 963, 1187, 1212, 1273], "visit": [379, 777, 963, 1273], "left_clos": [380, 578, 777, 964, 1140, 1273], "include_break": [380, 578, 777, 964, 1140, 1273], "bin": [380, 462, 578, 666, 692, 770, 777, 964, 1046, 1140, 1231, 1267, 1273], "discret": [380, 382, 436, 462, 495, 513, 578, 777, 964, 966, 1025, 1046, 1084, 1102, 1140, 1273], "plu": [380, 530, 777, 964, 1119, 1140, 1273], "endpoint": [380, 578, 593, 594, 595, 596, 597, 599, 600, 601, 777, 964, 1140, 1273], "observ": [380, 439, 440, 441, 578, 777, 964, 1028, 1029, 1030, 1140, 1273], "fall": [380, 578, 777, 964, 1140, 1273], "qcut": [380, 777, 964, 1273], "breakpoint": [380, 462, 578, 777, 964, 1046, 1140, 1273], "brk": [380, 578, 777], "foo_bin": [380, 578, 777], "radian": [381, 700, 777], "720": [381, 580, 777], "540": [381, 580, 777], "360": [381, 580, 777], "180": [381, 580, 777], "null_behavior": [382, 495, 777, 966, 1084, 1273], "nullbehavior": [382, 495, 777, 966, 1084, 1273], "drop_nan": [385, 777, 969, 1273], "utc": [386, 390, 392, 395, 416, 662, 664, 892, 970, 974, 979, 1004, 1227, 1229], "vari": [386, 970, 1282], "rare": [386, 970], "countri": [386, 970], "switch": [386, 970], "samoa": [386, 970], "apia": [386, 970], "did": [386, 970], "2011": [386, 970], "dst_offset": [386, 970], "2012": [386, 970], "replace_time_zon": [386, 392, 395, 975, 976, 1009], "pacif": [386, 970], "11h": [386, 970], "13h": [386, 970], "lose": [387, 971], "time_unit_m": [387, 971], "time_unit_n": [387, 971], "999": [388, 403, 892, 972, 990, 1282], "1897": [388, 403, 972, 990], "3002": [388, 403, 972, 990], "cent": 388, "0999": [388, 403], "naiv": [389, 390, 973, 974, 1229], "compon": [389, 418, 662, 664, 725, 973, 1006, 1227, 1229], "resolv": 389, "tm": [389, 892], "456000": [389, 973], "101000": 389, "d1": 389, "d2": 389, "d3": 389, "happen": [390, 578, 777, 974, 1140, 1273], "europ": [390, 395, 416, 974, 979, 1004], "london": [390, 395, 416, 974, 979, 1004], "gmt": [390, 395, 416, 974, 979, 1004], "bst": [390, 395, 416, 974, 979, 1004], "1978": [391, 392, 397, 400, 401, 404, 406, 411, 418, 421, 435], "2024": [391, 392, 397, 401, 404, 406, 411, 418, 421, 725, 892], "500_000": [391, 392, 397, 401, 404, 406, 411, 418, 421], "2065": [391, 392, 397, 401, 404, 406, 411, 418, 421], "60_000": [391, 392, 397, 401, 404, 406, 411, 418, 421], "060": [391, 392, 397, 401, 404, 406, 411, 418, 421], "weekdai": [393, 414], "ordinal_dai": [393, 433], "day_of_month": [393, 414, 433], "day_of_year": [393, 414, 433], "356": [393, 414, 433], "357": [393, 414, 433], "358": [393, 414, 433], "359": [393, 414, 433], "total_dai": [394, 978], "base_utc_offset": [395, 979], "0m": [395, 979], "epochtimeunit": [396, 731, 980], "unix": [396, 731, 980], "epoch_n": [396, 980], "epoch_": [396, 980], "978307200000000": [396, 422, 980, 1010], "978307200": [396, 980], "978393600000000": [396, 422, 980, 1010], "978393600": [396, 980], "978480000000000": [396, 422, 980, 1010], "978480000": [396, 980], "total_hour": [398, 982], "leap": [399, 413, 983, 1001], "leap_year": 399, "iso": [400, 432, 433, 984, 1020, 1021], "1977": [400, 435], "1979": [400, 435], "calendar_year": [400, 435], "1976": [400, 435], "500000": [401, 988], "60000": 401, "total_microsecond": [402, 989], "mlnm": 403, "total_millisecond": [405, 992], "total_minut": [407, 995], "think": [409, 410, 997, 998], "vectoris": [409, 410, 997, 998], "tseri": [409, 410, 997, 998], "monthend": [409, 997], "rollforward": [409, 997], "monthbegin": [410, 998], "rollback": [410, 998], "500000000": [411, 999], "60000000": 411, "total_nanosecond": [412, 1000], "minu": [413, 566, 777, 1001], "dictat": [413, 777, 1001], "2005": [413, 1001], "date_plus_1i": [413, 1001], "1y2mo": [413, 1001], "date_min": 413, "1998": [413, 1001], "1999": [413, 892, 1001], "2003": [413, 731, 1001], "2004": [413, 1001], "2006": [413, 1001], "new_dat": 413, "ordin": [414, 581, 777, 1002, 1142, 1273], "366": [414, 1002], "use_earliest": [416, 431, 662, 664, 722, 1004, 1019, 1227, 1229], "ambigu": [416, 417, 431, 662, 664, 722, 1004, 1005, 1019, 1227, 1229], "convert_time_zon": [416, 1004], "london_timezon": [416, 1004], "amsterdam": [416, 1004], "london_to_amsterdam": [416, 1004], "cet": [416, 1004], "cest": [416, 1004], "ts_local": [416, 1004], "brussel": [416, 1004], "half": [417, 439, 440, 441, 777, 1005, 1028, 1029, 1030, 1273], "localis": [417, 431, 1019], "dst": [417, 431, 1005, 1019], "cst": [417, 431, 1005, 1019], "cdt": [417, 431, 1005, 1019], "225": [417, 431], "10m": [417, 431, 1005, 1019], "milli": [418, 1006], "micro": [418, 1006], "total_second": [419, 1007], "to_str": [420, 1008], "datetime_str": [420, 423], "day_nam": [420, 423], "month_nam": [420, 423], "march": [420, 423, 1008, 1011], "april": [420, 423, 1008, 1011], "timestamp_n": [422, 1010], "timestamp_m": 422, "978307200000": 422, "978393600000": 422, "978480000000": 422, "strftime": [423, 1011], "days_diff": 424, "hours_diff": 425, "200m": [426, 427, 429], "milliseconds_diff": [426, 427, 429], "200": [426, 427, 429, 585, 777, 1146, 1153, 1154, 1156, 1273], "200000": [426, 830, 889], "800": [426, 427, 429], "minutes_diff": 428, "1440": [428, 1016], "200000000": 429, "seconds_diff": 430, "safe": [431, 583, 777, 1005, 1019, 1144, 1229, 1254, 1273], "truncate_str": 431, "truncate_td": 431, "53": [432, 1020], "time_unit_u": 434, "32971": [434, 1022], "32974": [434, 1022], "32976": [434, 1022], "iso_year": 435, "pk": [436, 777, 1025, 1273], "probabl": [436, 578, 777, 1025, 1140, 1273], "459148": [436, 777], "754888": [436, 777], "span": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "half_lif": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "adjust": [439, 440, 441, 614, 777, 1028, 1029, 1030, 1180, 1273], "exponenti": [439, 440, 441, 443, 575, 777, 1028, 1029, 1030, 1031, 1273], "weight": [439, 440, 441, 591, 592, 593, 594, 595, 596, 597, 599, 600, 601, 614, 777, 1028, 1029, 1030, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1180, 1273], "decai": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "term": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "mass": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "gamma": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "foral": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "geq": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "theta": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "life": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "exp": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "ln": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "smooth": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "factor": [439, 440, 441, 683, 777, 1028, 1029, 1030, 1256, 1273], "leq": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "imbal": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "ew": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "w_i": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "recurs": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "y_t": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "y_": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "x_t": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "x_2": [439, 440, 441, 777, 1028, 1029, 1030, 1273], "428571": [439, 777, 1028, 1273], "bia": [440, 441, 482, 598, 614, 777, 1029, 1030, 1073, 1158, 1180, 1273], "unbias": [440, 441, 777, 1029, 1030, 1273], "963624": [440, 777, 1029, 1273], "928571": [441, 777, 1030, 1273], "wildcard": [442, 711, 712, 715, 716, 729, 752, 777], "regex": [442, 543, 621, 623, 624, 627, 629, 630, 631, 632, 645, 646, 655, 727, 777, 892, 1186, 1188, 1189, 1192, 1194, 1195, 1196, 1197, 1210, 1211, 1220], "aa": [442, 621, 632, 727, 777, 965, 1186, 1197, 1273], "ba": [442, 655, 727, 777, 892], "cc": [442, 727, 777, 965, 1273], "718282": [443, 777, 1031, 1273], "389056": [443, 777, 1031, 1273], "59815": [443, 777], "expand": [444, 542, 543, 584, 777, 892, 1032, 1273], "pythonliter": [445, 777, 1034, 1123, 1124, 1125, 1126, 1165, 1273], "extrem": [445, 592, 777, 1034, 1152, 1273], "group_col": [448, 691, 777], "g1": [448, 691, 777], "g2": [448, 691, 777], "lt": [448, 691, 777, 1273], "gte": [448, 691, 777], "n_1": [448, 777], "n_2": [448, 777], "n_3": [448, 777], "exprlistnamespac": [450, 777], "divis": [452, 685, 777], "truediv": [452, 777], "9774092659964970114": [460, 777], "13614470193936745724": [460, 777], "1101441246220388612": [460, 777], "11638928888656214026": [460, 777], "13382926553367784577": [460, 777], "bin_count": [462, 777, 1046, 1273], "include_categori": [462, 777, 1046, 1273], "include_breakpoint": [462, 777, 1046, 1273], "occurr": [462, 469, 470, 473, 474, 689, 777, 1046, 1055, 1056, 1061, 1062, 1261, 1273], "interpolationmethod": [465, 777, 1049, 1273], "regrid": [465, 777], "grid": [465, 777], "df_original_grid": [465, 777], "grid_point": [465, 777], "df_new_grid": [465, 777], "conflat": [466, 777], "finit": [468, 685, 707, 777, 1054, 1273], "is_first_distinct": [469, 777, 1055, 1273], "optional_memb": [471, 777, 1058, 1273], "infinit": [472, 685, 777, 1059, 1273], "is_last_distinct": [473, 777, 1061, 1273], "_isnan": [475, 777], "b_isnan": [475, 777], "negat": [476, 567, 777, 1134, 1273], "_is_not_nan": [477, 777], "b_is_not_nan": [477, 777], "_not_nul": [478, 777], "a_not_nul": [478, 777], "b_not_nul": [478, 777], "_isnul": [479, 777], "a_isnul": [479, 777], "b_isnul": [479, 777], "chain": [481, 556, 558, 559, 560, 561, 576, 676, 767, 777], "undo": [481, 549, 556, 558, 559, 576, 676, 777], "fisher": [482, 614, 777, 1073, 1180, 1273], "fourth": [482, 777, 1073, 1273], "subtract": [482, 675, 777, 1073, 1273], "distribut": [482, 614, 777, 1073, 1180, 1273], "elimin": [482, 777, 1073, 1273], "bias": [482, 614, 777, 1073, 1180, 1273], "scipi": [482, 614, 777, 1073, 1180, 1273, 1277], "stat": [482, 614, 777, 1073, 1180, 1273], "153061": [482, 777], "blindli": [497, 1086], "worth": [497, 1086], "enough": [497, 614, 777, 1086, 1180, 1273], "rank": [497, 707, 726, 777, 1086, 1273], "concat_list": [497, 726], "exprnamespac": 498, "flat": [498, 586, 777, 1087, 1147, 1273], "null_on_oob": [500, 523, 1089, 1112], "cheaper": [500, 523, 1089, 1112], "symmetr": [515, 1104], "sdiff": 515, "taken": [518, 651, 1107, 1216], "363961": 520, "n_field_strategi": [525, 1114], "tostructstrategi": [525, 1114], "first_non_nul": [525, 1114], "max_width": [525, 1114], "field_0": [525, 1114], "field_1": [525, 1114], "field_n": [525, 1114], "pre": [525, 537, 578, 750, 753, 768, 777, 1140, 1273], "obtain": 525, "ok": 525, "longest": 525, "n0": 525, "n1": 525, "logarithm": [528, 529, 530, 777, 1117, 1118, 1119, 1273], "584963": [528, 777], "30103": [529, 777], "60206": [529, 777], "natur": [530, 777, 1119, 1273], "693147": [530, 777, 1117, 1119, 1273], "098612": [530, 777, 1117, 1119, 1273], "386294": [530, 777, 1119, 1273], "lowest": [531, 777], "9223372036854775808": [531, 777], "agg_list": [533, 535, 777], "map_batch": [533, 740, 777, 829, 889], "keep_nam": [534, 777], "a_revers": [534, 557, 559, 587, 676, 777], "b_revers": [534, 557, 559, 587, 676, 777], "rstrip": [534, 557, 777], "_revers": [534, 557, 559, 587, 676, 777], "is_elementwis": [535, 777], "whole": [535, 616, 617, 629, 777, 877, 889, 1194], "elementwis": [535, 591, 592, 593, 594, 596, 600, 777, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "third": [535, 777], "parti": [535, 777], "book": [535, 777], "invok": [535, 777], "bug": [535, 537, 777, 829, 830, 871, 877, 889, 1122, 1273], "argmax": [535, 777], "remap": [536, 777, 1121, 1273], "lookup": [536, 773, 777, 1121, 1273], "discourag": [537, 777], "loop": [537, 777], "a_times_2": [537, 777], "tip": [537, 777], "again": [537, 777], "exprmetanamespac": [541, 544], "foo_bar2": [541, 544], "raise_if_undetermin": 545, "computeerror": [545, 644, 666, 789, 1209, 1231], "e_filt": [545, 547], "e_sum_ov": [545, 547], "e_sum_slic": [545, 547], "tree": 548, "modulu": [552, 777], "xlog2": [554, 575, 777], "purpos": [555, 777, 798, 809, 889], "x_uniqu": [555, 777], "y_uniqu": [555, 777], "reverse_": [558, 576, 777], "reverse_a": [558, 576, 777], "reverse_b": [558, 576, 777], "lowercas": [560, 667, 1232], "uppercas": [561, 670, 1235], "to_lowercas": 561, "poison": [562, 563, 777, 1131, 1132, 1273], "nanmax": [562, 563, 777, 1131, 1132, 1273], "inequ": [564, 777], "ne": [565, 777, 1273], "unari": [566, 777], "350": [568, 777, 1154, 1273], "650": [568, 777], "850": [568, 777], "more_expr": [570, 702, 704, 705, 706, 777], "mapping_strategi": [570, 777], "windowmappingstrategi": [570, 777], "group_to_row": [570, 777], "outcom": [570, 777], "group_dtyp": [570, 777], "warn": [570, 593, 594, 595, 596, 597, 599, 600, 601, 777], "flatten": [570, 777], "_max": [570, 777], "c_max": [570, 777], "_min": [570, 777], "c_min": [570, 777], "percent": [571, 777, 1136, 1273], "090909": [571, 777], "peak": [572, 573, 777, 1137, 1138, 1273], "extract_numb": [574, 777], "digit": [574, 602, 603, 630, 777, 1162, 1163, 1189, 1195, 1273, 1282], "scale_negative_even": [574, 777], "expon": [575, 777, 1273], "allow_dupl": [578, 777, 1140, 1273], "duplicateerror": [578, 777, 789, 1140, 1273], "cut": [578, 777, 1140, 1273], "566371": [580, 777], "424778": [580, 777], "283185": [580, 777], "141593": [580, 777, 900, 1273], "rankmethod": [581, 777, 1142, 1273], "ti": [581, 777, 1142, 1273], "competit": [581, 777, 1142, 1273], "highest": [581, 688, 707, 777, 889, 1142, 1273], "immedi": [581, 699, 703, 720, 721, 723, 724, 735, 736, 750, 753, 759, 764, 765, 768, 777, 1142, 1273], "nodefault": [585, 777, 1146, 1273], "_nodefault": [585, 777, 1146, 1273], "no_default": [585, 777, 1146, 1273], "fruits_revers": [587, 777], "cars_revers": [587, 777], "rle_id": [588, 777, 1149, 1273], "rle": [589, 777, 1150, 1273], "a_r": [589, 777], "ab_r": [589, 777], "window_s": [591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 754, 755, 777, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1273], "rolling_map": [591, 777, 1151, 1273], "multipli": [591, 592, 593, 594, 596, 599, 600, 601, 777, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1273], "rolling_sum": [592, 777, 1152, 1273], "nansum": [592, 777, 1152, 1273], "warn_if_unsort": [593, 594, 595, 596, 597, 599, 600, 601, 777], "travers": [593, 594, 596, 600, 777, 1153, 1154, 1156, 1159, 1160, 1161, 1273], "vector": [593, 594, 596, 600, 777, 1153, 1154, 1156, 1159, 1160, 1161, 1273], "5h": [593, 594, 595, 596, 597, 599, 600, 601, 777], "df_tempor": [593, 594, 596, 599, 600, 601, 777], "closur": [593, 594, 599, 600, 601, 777], "rolling_row_max": [593, 777], "2h": [593, 594, 596, 599, 600, 601, 777], "rolling_row_mean": [594, 777], "rolling_row_min": [596, 777], "625": [597, 777], "skew": [598, 777, 1158, 1273], "381802": [598, 777, 1158, 1273], "47033": [598, 777, 1158, 1273], "38180177416060584": [598, 777, 1158, 1273], "47033046033698594": [598, 777, 1158, 1273], "433013": [599, 777, 854, 889], "rolling_row_std": [599, 777], "rolling_row_sum": [600, 777], "39": [600, 731, 777], "57": [600, 777, 1162, 1273, 1282], "63": [600, 777], "69": [600, 777], "1875": [601, 777, 862, 889], "rolling_row_var": [601, 777], "figur": [603, 777, 851, 889, 1163, 1273], "01234": [603, 777, 1163, 1273], "012": [603, 777, 1163, 1273], "1200": [603, 777, 1163, 1273], "searchsortedsid": [605, 777, 1166, 1273], "leftmost": [605, 777, 1166, 1273], "rightmost": [605, 777, 1166, 1273], "six": [605, 777], "extrema": [609, 777, 1174, 1273], "112": [609, 777, 1282], "129": [609, 777], "8589934592": [609, 777], "1073741824": [609, 777], "175201": [613, 777, 1179, 1273], "unimod": [614, 777, 1180, 1273], "skewtest": [614, 777, 1180, 1273], "speak": [614, 777, 1180, 1273], "g_1": [614, 777, 1180, 1273], "m_3": [614, 777, 1180, 1273], "m_2": [614, 777, 1180, 1273], "m_i": [614, 777, 1180, 1273], "sum_": [614, 777, 1180, 1273], "texttt": [614, 777, 1180, 1273], "k_3": [614, 777, 1180, 1273], "k_2": [614, 777, 1180, 1273], "sqrt": [614, 700, 701, 777, 1180, 1273], "343622": [614, 777], "value1": [617, 777], "value2": [617, 777], "attain": [617, 777], "414214": [618, 777, 1183, 1273], "sensit": [621, 630, 632, 645, 1186, 1195, 1197, 1210], "ilmsuxu": [621, 629, 630, 632, 645, 1186, 1194, 1195, 1197, 1210], "default_match": [621, 632], "insensitive_match": [621, 632], "crab": [621, 632, 1186, 1197], "dog": [621, 667, 670, 706, 1186, 1232, 1235], "rab": [621, 648, 1186, 1213], "ascii_case_insensit": [622, 647, 1187, 1212], "aho": [622, 647, 1187, 1212], "corasick": [622, 647, 1187, 1212], "insensit": [622, 630, 645, 647, 892, 1186, 1187, 1195, 1197, 1210, 1212], "set_fmt_str_length": [622, 647, 1187, 1212], "lyric": [622, 647, 1187, 1212], "everybodi": [622, 647, 1187, 1212], "tell": [622, 647, 1187, 1212], "me": [622, 647, 1187, 1212], "feel": [622, 647, 1187, 1212], "love": [622, 647, 1187, 1212], "tonight": [622, 647, 1187, 1212], "success": [623, 624, 630, 1188, 1189, 1195], "overlap": [623, 624, 630, 1188, 1189, 1195], "bla": [624, 630, 1189, 1195], "asd": [624, 630, 1189, 1195], "678": [624, 630, 1189, 1195], "910t": [624, 630, 1189, 1195], "count_digit": 624, "dbc": [624, 1189], "3xy": [624, 1189], "1zy3": [624, 1189], "strings_hex": 626, "666f6f": [626, 1191], "626172": [626, 1191], "mango": [627, 655, 1192, 1220], "has_suffix": 627, "le": [627, 777, 1273], "nu": 627, "group_index": [629, 1194], "captur": [629, 631, 1194, 1196], "nthose": [629, 1194], "nodd": [629, 1194], "nthe": [629, 1194], "odd": 629, "vote": [629, 631, 1194, 1196], "ballon_dor": [629, 631, 1194, 1196], "404": [629, 631, 1194, 1196], "ref": [629, 631, 1194, 1196], "candid": [629, 631, 1194, 1196], "messi": [629, 631, 1194, 1196], "ronaldo": [629, 1194], "haystack": [630, 1195], "email": [630, 1195], "real": [630, 1195], "some_account": [630, 1195], "somewher": [630, 1195], "net": [630, 1195], "jkl": [630, 1195], "uvw": [630, 1195], "co": [630, 777, 1195, 1273], "uk": [630, 1195], "address": 630, "xi": [630, 1195], "quantifi": [630, 1195], "email_part": [630, 1195], "extracted_nr": 630, "910": [630, 1195], "unnam": [631, 1196], "weghorst": [631, 1196], "candi": 631, "lobster": [632, 1197], "crustaceon": [632, 1197], "pat": [632, 1197], "bc": [632, 646, 760, 1197, 1211], "aeiuo": [632, 1197], "find_pat": 632, "json_path_match": [633, 1198], "jsonpath": [633, 635, 1198, 1200], "json_decod": [634, 1199], "json_path": [635, 1200], "json_val": [635, 1200], "len_char": [636, 641, 1201, 1206], "_o": [636, 637, 1201, 1202], "caf\u00e9": [636, 637, 1201, 1202], "345": [636, 637, 1201, 1202], "\u6771\u4eac": [636, 637, 1201, 1202], "n_byte": [636, 637], "n_char": [636, 637], "fill_char": [639, 642, 643, 649, 1204, 1207, 1208, 1214], "justifi": [639, 649, 1204, 1214], "pad_end": [639, 643, 1204, 1208], "strip_chars_start": [640, 658, 660, 1205], "pad": [642, 643, 671, 1207, 1208, 1236], "reach": [642, 643, 671, 1207, 1208, 1236], "pad_start": [642, 649, 671, 1207, 1214, 1236], "cow": [642, 643, 1207, 1208], "monkei": [642, 643, 1207, 1208], "hippopotamu": [642, 643, 1207, 1208], "zfill": [643, 692, 777, 1208], "radix": [644, 666, 1209, 1231], "parseerror": [644, 666, 1209, 1231], "becom": 644, "to_integ": [644, 1209], "silent": [644, 666, 1209, 1231], "replace_al": [645, 1210], "citi": 645, "philadelphia": 645, "season": 645, "spring": 645, "summer": 645, "autumn": 645, "winter": 645, "weather": [645, 1210], "raini": [645, 1210], "sunni": [645, 1210], "cloudi": 645, "snowi": 645, "foggi": [645, 1210], "123abc": [645, 1210], "abc456": [645, 1210], "abcabc": [646, 1211], "123a123": [646, 1211], "replace_with": [647, 1212], "broadcast": [647, 892, 1212], "removes_pronoun": 647, "man": [648, 1213], "ana": [648, 1213], "oof": [648, 1213], "anan": [648, 1213], "am": [648, 1213], "strip_chars_end": [650, 659, 661, 1215], "subslic": [651, 1216], "pear": [651, 1216], "papaya": [651, 1216], "dragonfruit": [651, 1216], "s_slice": 651, "ear": [651, 1216], "aya": [651, 1216], "uit": [651, 1216], "ya": [651, 1216], "onf": [651, 1216], "foo_bar_baz": 652, "split_inclus": 652, "foo_": [652, 730], "bar_": 652, "a_1": [653, 1218, 1250, 1273], "d_4": [653, 1218], "rename_field": [653, 654, 964, 1140, 1218, 1219, 1273], "first_part": [653, 654, 1218, 1219], "second_part": [653, 654, 1218, 1219], "remaind": [654, 1219], "app": [655, 1220], "has_prefix": 655, "strip_char": [656, 1221], "nworld": 657, "foo_strip": 657, "ow": 657, "hell": [657, 1222], "rld": [657, 659, 1224], "strip_suffix": [658, 660], "foo_strip_end": 658, "oldw": 658, "he": 658, "abcdeff": 658, "fed": 658, "strip_prefix": [659, 661], "tworld": [659, 1222, 1224], "foo_strip_start": 659, "wod": [659, 1224], "aabcdef": 659, "cba": 659, "foobar": [660, 661, 1225, 1226], "foofoobar": [660, 1225], "foobarbar": [661, 1226], "polarstemporaltyp": [662, 1227], "penalti": [662, 663, 664, 1227, 1228, 1229], "clean": [662, 663, 664, 1227, 1228, 1229], "beforehand": [662, 663, 664, 1227, 1228, 1229], "certainli": [662, 663, 664, 1227, 1228, 1229], "00z": [662, 664, 1227, 1229], "sun": [662, 1227], "jul": [662, 1227], "inference_length": [665, 1230], "3420": [665, 1230], "120134": [665, 1230], "3212": [665, 1230], "143": [665, 1230, 1282], "numbers_decim": 665, "110": [666, 1231], "fa1e": [666, 1231], "ff00": [666, 1231], "cafe": [666, 1231], "64030": [666, 1231], "65280": [666, 1231], "51966": [666, 1231], "variant": [667, 669, 670, 1060, 1273], "foo_low": 667, "titlecas": [669, 1234], "sing": [669, 1234], "welcom": [669, 1234], "THERE": [669, 1234], "NO": [669, 892, 1234], "foo_titl": 669, "There": [669, 1234], "foo_upp": 670, "999999": [671, 722, 763, 764, 765, 892, 1236], "0123": [671, 1236], "cd": [672, 674], "struct_col": [672, 674], "www": 674, "xxx": 674, "yyi": 674, "zzz": 674, "obvious": 674, "structfieldnotfounderror": [674, 789], "761594": [682, 777, 1248, 1273], "replic": [683, 777, 1256, 1273], "vals_phys": [683, 777], "floordiv": [685, 777], "ieee": [685, 777], "754": [685, 777], "mathemat": [685, 726, 777], "undefin": [685, 777], "On": [685, 777], "operand": [685, 777], "infin": [685, 777], "value_count": [687, 777, 1273], "9223372036854775807": [688, 777], "binary_str": [692, 777], "250": [692, 777, 1154, 1273, 1282], "bin_x": [692, 777], "bin_i": [692, 777], "xor_xi": [692, 777], "bin_xor_xi": [692, 777], "00001010": [692, 777], "00001011": [692, 777], "00001000": [692, 777], "00000010": [692, 777], "11111010": [692, 777], "00000011": [692, 777], "249": [692, 777], "11111001": [692, 777], "01000010": [692, 777], "00000100": [692, 777], "01000110": [692, 777], "AND": [693, 694, 892, 1254, 1273], "OR": [695, 696, 812, 889, 892], "any_horizont": 695, "returns_scalar": [697, 742, 777], "polarsintegertyp": [699, 735, 736], "arctan": [700, 701, 777, 1273], "angl": [700, 701], "plane": [700, 701], "rai": [700, 701], "tworoottwo": [700, 701], "arctan2d": 700, "atan2d": [700, 701], "atan2": [700, 701], "135": [700, 701], "356194": [700, 701], "arctan2": 701, "arg_tru": [703, 777, 1273], "mimic": 705, "a_lag_": 705, "a_rol": 705, "swim": 706, "walk": 706, "full_sent": 706, "correlationmethod": 707, "propagate_nan": 707, "spearman": 707, "544705": 707, "func": 708, "covari": [709, 755, 777], "acc": [711, 712, 715, 716, 729, 752], "include_init": [711, 715], "accumul": [711, 712, 715, 716, 729, 752], "fn": [711, 712, 715, 716, 729, 752], "new_valu": [711, 712, 715, 716, 729, 752], "cum_reduc": 711, "cumsum_horizont": 713, "cum_sum_horizont": 718, "granular": 720, "finer": 720, "permut": 720, "1985": [720, 723], "america": 723, "new_york": 723, "est": 723, "contrast": 725, "offset_bi": 725, "sometim": [725, 776], "tbl_width_char": 725, "120": 725, "add_week": 725, "add_dai": 725, "add_second": 725, "add_milli": 725, "add_hour": 725, "002": [725, 1014, 1015, 1017], "add_calendar_dai": 725, "add_calendar_month": 725, "mo": 725, "add_calendar_year": 725, "a_b_doubl": 726, "f_string": 730, "placehold": 730, "hello_": 730, "_world": 730, "_bar_": 730, "foo_a_bar_1": 730, "foo_b_bar_2": 730, "foo_c_bar_3": 730, "epoch": 731, "timestep": 731, "1666683077": 731, "1666683099": 731, "12345": [731, 945, 1039, 1162, 1273], "12346": 731, "agg_group": [732, 777], "allow_object": 739, "valueexcept": 739, "test_func": 741, "list_of_seri": 742, "my_custom_aggreg": 742, "understood": 742, "power": [757, 1273], "a_a": 757, "a_txt": 757, "605551": 758, "605551275463989": 758, "my_struct": 759, "elif": 767, "pick": 767, "met": 767, "own": [767, 1282], "isn": 767, "arr": [769, 1254, 1265, 1273], "technic": 773, "further": 773, "columnfactori": 773, "more_nam": 773, "__call__": 773, "helper": 773, "__getattr__": 773, "idiomat": [773, 877], "quick": [773, 965, 1273, 1282], "prototyp": 773, "keystrok": 773, "drawback": 773, "readabl": 773, "and_": 777, "arcco": [777, 1273], "arccosh": [777, 1273], "arcsin": [777, 1273], "arcsinh": [777, 1273], "arctanh": [777, 1273], "arg_max": [777, 1273], "arg_min": [777, 1273], "arg_sort": [777, 1273], "arg_uniqu": [777, 1273], "backward_fil": 777, "cbrt": [777, 1273], "clip_max": [777, 1273], "clip_min": [777, 1273], "cosh": [777, 1273], "cot": [777, 1273], "cumcount": 777, "cummax": [777, 1273], "cummin": [777, 1273], "cumprod": [777, 1273], "cumsum": [777, 1273], "cumulative_ev": [777, 1273], "entropi": [777, 1273], "eq_miss": [777, 1273], "ewm_mean": [777, 1273], "ewm_std": [777, 1273], "ewm_var": [777, 1273], "extend_const": [777, 1273], "from_json": 777, "ge": [777, 1273], "gt": [777, 1273], "hist": [777, 1273, 1277], "implod": [777, 1273], "inspect": [777, 889], "is_between": [777, 1273], "is_finit": [777, 1273], "is_first": [777, 1273], "is_infinit": [777, 1273], "is_last": [777, 1273], "is_nan": [777, 1273], "is_not": 777, "is_not_nan": [777, 1273], "is_not_nul": [777, 1273], "kurtosi": [777, 1273], "log10": [777, 1273], "log1p": [777, 1273], "map_alia": 777, "map_dict": [777, 1273], "mod": 777, "mul": 777, "nan_max": [777, 1273], "nan_min": [777, 1273], "ne_miss": [777, 1273], "or_": 777, "pct_chang": [777, 1273], "peak_max": [777, 1273], "peak_min": [777, 1273], "pow": [777, 1273], "register_plugin": 777, "lib": [777, 1249, 1273], "input_wildcard_expans": 777, "cast_to_supertyp": 777, "pass_name_to_appli": 777, "changes_length": 777, "plugin": 777, "highli": 777, "unsaf": 777, "serializ": 777, "ran": 777, "reinterpret": [777, 1273], "repeat_bi": 777, "rolling_appli": [777, 1273], "rolling_max": [777, 1273], "rolling_mean": [777, 1273], "rolling_median": [777, 1273], "rolling_min": [777, 1273], "rolling_quantil": [777, 1273], "rolling_skew": [777, 1273], "rolling_std": [777, 1273], "rolling_var": [777, 1273], "round_sig_fig": [777, 1273], "search_sort": [777, 1273], "shrink_dtyp": [777, 1273], "sin": [777, 1273], "sinh": [777, 1273], "sort_bi": 777, "tan": [777, 1273], "to_phys": [777, 942, 1273], "unique_count": [777, 1273], "xor": 777, "expos": 789, "miscellan": 789, "arrowerror": 789, "columnnotfounderror": 789, "invalidoperationerror": 789, "polarserror": 789, "polarspanicerror": 789, "schemaerror": 789, "schemafieldnotfounderror": 789, "shapeerror": 789, "parametr": 789, "build_info": 789, "get_index_typ": 789, "show_vers": 789, "threadpool_s": 789, "sqlcontext": [789, 1281], "hit": [794, 889], "node": [794, 798, 822, 829, 830, 834, 839, 841, 889], "background": [798, 889], "_eager": [798, 889], "inprocessqueri": [798, 889], "cancel": [798, 889], "set_streaming_chunk_s": [798, 889], "collect_all_async": [799, 889], "async": [799, 889], "stringio": [803, 847, 889], "snippet": [805, 889], "Be": [809, 889], "fewer": [809, 889], "suscept": [809, 889], "lazygroupbi": [815, 816, 817, 818, 819, 820, 843, 889], "other_lf": [824, 889], "validate_output_schema": [829, 830, 889], "streamabl": [829, 830, 834, 889], "past": [829, 830, 889], "paramount": [829, 830, 889], "elig": [829, 830, 889], "invari": [830, 889], "upheld": [830, 889], "100_000": [830, 889], "199998": [830, 889], "199996": [830, 889], "199994": [830, 889], "199992": [830, 889], "show_plot": [839, 889], "truncate_nod": [839, 889], "figsiz": [839, 851, 889], "gantt": [839, 889], "group_by_partit": [839, 889], "470": [839, 889], "475": [839, 889], "1964": [839, 889], "swap": [841, 889], "dynamic_group_bi": [843, 889], "deseri": [847, 889], "dataframescan": [847, 889], "output_schema": [847, 889], "run_parallel": [847, 889], "duplicate_check": [847, 889], "later": [847, 889], "output_path": [851, 889], "raw_output": [851, 889], "290994": [854, 889], "118034": [854, 889], "new_lf": [861, 889], "extern": [866, 889], "lf_other": [866, 889], "afoo": [866, 889], "cfoo": [866, 889], "train_lf": [866, 889], "feature_0": [866, 889], "feature_1": [866, 889], "test_lf": [866, 889], "_train": [866, 889], "feature_0_train": [866, 889], "opaqu": 877, "my_column": 877, "struct_seri": 877, "lf5": 889, "lf6": 889, "sink_csv": 889, "sink_ipc": 889, "sink_ndjson": 889, "sink_parquet": 889, "with_context": 889, "intuit": 892, "emploi": 892, "complement": 892, "plenti": 892, "cde": 892, "fgg": 892, "jjk": 892, "lmn": 892, "opp": 892, "qqr": 892, "by_dtyp": 892, "as_expr": 892, "dispatch": 892, "1_234_500": 892, "5_000_555": 892, "1234500": 892, "5000555": 892, "by_nam": 892, "2010": 892, "4_500_000": 892, "4500000": 892, "3265500": 892, "zap": 892, "2031": 892, "tstamp_tokyo": 892, "123465": 892, "tstamp_utc": 892, "999000": 892, "2025": 892, "666000": 892, "tstamp": 892, "600000": 892, "123000": 892, "666": 892, "td1": 892, "987000": 892, "td2": 892, "456789": [892, 1006], "td3": 892, "2m": [892, 994], "456m": 892, "7d": 892, "456789\u00b5": 892, "18d": 892, "999999\u00b5": 892, "23h": 892, "987m": 892, "14d": 892, "16h": 892, "39m": 892, "21d": 892, "456001\u00b5": 892, "expand_selector": 892, "colz": [892, 1282], "everyth": 892, "signed_integ": 892, "unsigned_integ": 892, "is_selector": 892, "obj": 892, "include_categor": 892, "2345": 892, "3456": 892, "292432": [901, 1273], "549306": [905, 1273], "innter": 919, "44225": [944, 1273], "56789": [945, 1039, 1162, 1273], "901234": [945, 1039, 1162, 1273], "1232e": [952, 954, 1273], "1656e15": [954, 1273], "break_point_label": [964, 1140, 1273], "break_point": [964, 1046, 1140, 1273], "category_label": [964, 1140, 1273], "581139": [965, 1273], "bb": [965, 1273], "arraylik": [967, 1273], "ser": [975, 976, 1009], "kathmandu": [975, 976, 1009], "0545": [975, 976, 1009], "500m": [988, 991, 999], "date_minus_1y_2mon": 1001, "165": [1005, 1019], "round_str": 1005, "round_td": 1005, "111110": 1006, "765431": 1006, "11111": 1006, "timestamp_u": 1010, "978307200000000000": 1010, "978393600000000000": 1010, "978480000000000000": 1010, "005": [1025, 1273], "06293300616044681": [1025, 1273], "65": [1025, 1273], "8568409950394724": [1025, 1273], "4000000": [1027, 1273], "814697265625": [1027, 1273], "085537": [1031, 1273], "bitmask": [1043, 1273], "absenc": [1043, 1273], "presenc": [1043, 1254, 1273], "confirm": [1043, 1273], "10734580197236529959": [1044, 1273], "3022416320763508302": [1044, 1273], "13756996518000038261": [1044, 1273], "is_signed_integ": [1060, 1273], "is_unsigned_integ": [1060, 1273], "field_2": 1114, "n00": 1114, "n01": 1114, "n02": 1114, "2147483648": [1120, 1273], "166667": [1136, 1273], "142857": [1136, 1273], "150": [1154, 1273], "450": [1154, 1273], "dev": [1159, 1273], "527525": [1159, 1273], "frequent": [1165, 1168, 1273], "2246e": [1178, 1247, 1273], "34776706224699483": [1180, 1273], "732051": [1183, 1273], "idx_rx": 1197, "idx_lit": 1197, "orld": 1223, "tur": 1234, "6331e16": [1247, 1273], "int64arrai": [1249, 1273], "a_2": [1250, 1273], "a_3": [1250, 1273], "s_from_str_repr": [1252, 1273], "zero_copy_onli": [1254, 1273], "writabl": [1254, 1273], "sent": [1254, 1273], "immut": [1254, 1273], "127": [1260, 1273], "seriesview": [1263, 1273], "dtype_if_empti": 1273, "position": 1273, "scenario": 1273, "chunk_length": 1273, "get_chunk": 1273, "has_valid": 1273, "is_boolean": 1273, "is_float": 1273, "is_integ": 1273, "is_numer": [1273, 1282], "is_sort": 1273, "is_tempor": 1273, "is_utf8": 1273, "new_from_index": 1273, "histogram": [1273, 1277], "kde": [1273, 1277], "series_equ": 1273, "set_at_idx": 1273, "two_a": 1281, "__enter__": 1281, "__exit__": 1281, "exc_typ": 1281, "baseexcept": 1281, "exc_val": 1281, "exc_tb": 1281, "tracebacktyp": 1281, "primari": 1282, "guid": 1282, "machin": 1282, "xdist": 1282, "hardwar": 1282, "setup": 1282, "sec": 1282, "numeric_dtyp": 1282, "null_probabililti": 1282, "test_numer": 1282, "col0": 1282, "col4": 1282, "29096": 1282, "485": 1282, "2147483647": 1282, "8257e14": 1282, "7508": 1282, "37338": 1282, "7264": 1282, "16996": 1282, "121": 1282, "361": 1282, "63204": 1282, "1443e235": 1282, "conform": 1282, "ascii_lett": 1282, "id_char": 1282, "alphabet": 1282, "price": 1282, "min_valu": 1282, "max_valu": 1282, "test_price_calcul": 1282, "a101": 1282, "8nin": 1282, "qhoo": 1282, "714": 1282, "544": 1282, "i0e0": 1282, "0000": 1282, "test_miscellan": 1282, "235": 1282, "87": 1282, "186": 1282, "174": 1282, "179": 1282, "213": 1282, "221": 1282, "86": 1282, "255": 1282}, "objects": {"polars": [[2, 0, 1, "", "Array"], [3, 0, 1, "", "Binary"], [4, 0, 1, "", "Boolean"], [5, 0, 1, "", "Categorical"], [46, 0, 1, "", "DataType"], [47, 0, 1, "", "Date"], [48, 0, 1, "", "Datetime"], [49, 0, 1, "", "Decimal"], [50, 0, 1, "", "Duration"], [51, 0, 1, "", "Enum"], [52, 0, 1, "", "Float32"], [53, 0, 1, "", "Float64"], [54, 0, 1, "", "Int16"], [55, 0, 1, "", "Int32"], [56, 0, 1, "", "Int64"], [57, 0, 1, "", "Int8"], [62, 0, 1, "", "List"], [63, 0, 1, "", "Null"], [64, 0, 1, "", "Object"], [1281, 0, 1, "", "SQLContext"], [71, 0, 1, "", "String"], [72, 0, 1, "", "StringCache"], [73, 0, 1, "", "Struct"], [74, 0, 1, "", "Time"], [75, 0, 1, "", "UInt16"], [76, 0, 1, "", "UInt32"], [77, 0, 1, "", "UInt64"], [78, 0, 1, "", "UInt8"], [79, 0, 1, "", "Unknown"], [80, 3, 1, "", "Utf8"], [81, 4, 1, "", "align_frames"], [693, 4, 1, "", "all"], [694, 4, 1, "", "all_horizontal"], [695, 4, 1, "", "any"], [696, 4, 1, "", "any_horizontal"], [697, 4, 1, "", "apply"], [698, 4, 1, "", "approx_n_unique"], [699, 4, 1, "", "arange"], [700, 4, 1, "", "arctan2"], [701, 4, 1, "", "arctan2d"], [702, 4, 1, "", "arg_sort_by"], [703, 4, 1, "", "arg_where"], [86, 4, 1, "", "build_info"], [704, 4, 1, "", "coalesce"], [87, 4, 1, "", "collect_all"], [88, 4, 1, "", "collect_all_async"], [89, 4, 1, "", "concat"], [705, 4, 1, "", "concat_list"], [706, 4, 1, "", "concat_str"], [707, 4, 1, "", "corr"], [708, 4, 1, "", "count"], [709, 4, 1, "", "cov"], [710, 4, 1, "", "cum_count"], [711, 4, 1, "", "cum_fold"], [712, 4, 1, "", "cum_reduce"], [713, 4, 1, "", "cum_sum"], [714, 4, 1, "", "cum_sum_horizontal"], [715, 4, 1, "", "cumfold"], [716, 4, 1, "", "cumreduce"], [717, 4, 1, "", "cumsum"], [718, 4, 1, "", "cumsum_horizontal"], [719, 4, 1, "", "date"], [720, 4, 1, "", "date_range"], [721, 4, 1, "", "date_ranges"], [722, 4, 1, "", "datetime"], [723, 4, 1, "", "datetime_range"], [724, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [725, 4, 1, "", "duration"], [726, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [727, 4, 1, "", "exclude"], [728, 4, 1, "", "first"], [729, 4, 1, "", "fold"], [730, 4, 1, "", "format"], [107, 4, 1, "", "from_arrow"], [108, 4, 1, "", "from_dataframe"], [109, 4, 1, "", "from_dict"], [110, 4, 1, "", "from_dicts"], [731, 4, 1, "", "from_epoch"], [111, 4, 1, "", "from_numpy"], [112, 4, 1, "", "from_pandas"], [113, 4, 1, "", "from_records"], [114, 4, 1, "", "from_repr"], [115, 4, 1, "", "get_index_type"], [732, 4, 1, "", "groups"], [733, 4, 1, "", "head"], [734, 4, 1, "", "implode"], [735, 4, 1, "", "int_range"], [736, 4, 1, "", "int_ranges"], [737, 4, 1, "", "last"], [738, 4, 1, "", "len"], [739, 4, 1, "", "lit"], [740, 4, 1, "", "map"], [741, 4, 1, "", "map_batches"], [742, 4, 1, "", "map_groups"], [743, 4, 1, "", "max"], [744, 4, 1, "", "max_horizontal"], [745, 4, 1, "", "mean"], [746, 4, 1, "", "median"], [747, 4, 1, "", "min"], [748, 4, 1, "", "min_horizontal"], [749, 4, 1, "", "n_unique"], [750, 4, 1, "", "ones"], [751, 4, 1, "", "quantile"], [117, 4, 1, "", "read_avro"], [118, 4, 1, "", "read_csv"], [119, 4, 1, "", "read_csv_batched"], [120, 4, 1, "", "read_database"], [121, 4, 1, "", "read_database_uri"], [122, 4, 1, "", "read_delta"], [123, 4, 1, "", "read_excel"], [124, 4, 1, "", "read_ipc"], [125, 4, 1, "", "read_ipc_schema"], [126, 4, 1, "", "read_ipc_stream"], [127, 4, 1, "", "read_json"], [128, 4, 1, "", "read_ndjson"], [129, 4, 1, "", "read_ods"], [130, 4, 1, "", "read_parquet"], [131, 4, 1, "", "read_parquet_schema"], [752, 4, 1, "", "reduce"], [753, 4, 1, "", "repeat"], [754, 4, 1, "", "rolling_corr"], [755, 4, 1, "", "rolling_cov"], [132, 4, 1, "", "scan_csv"], [133, 4, 1, "", "scan_delta"], [134, 4, 1, "", "scan_iceberg"], [135, 4, 1, "", "scan_ipc"], [136, 4, 1, "", "scan_ndjson"], [137, 4, 1, "", "scan_parquet"], [138, 4, 1, "", "scan_pyarrow_dataset"], [756, 4, 1, "", "select"], [892, 6, 0, "-", "selectors"], [139, 4, 1, "", "set_random_seed"], [140, 4, 1, "", "show_versions"], [757, 4, 1, "", "sql_expr"], [758, 4, 1, "", "std"], [759, 4, 1, "", "struct"], [760, 4, 1, "", "sum"], [761, 4, 1, "", "sum_horizontal"], [762, 4, 1, "", "tail"], [152, 4, 1, "", "threadpool_size"], [763, 4, 1, "", "time"], [764, 4, 1, "", "time_range"], [765, 4, 1, "", "time_ranges"], [153, 4, 1, "", "using_string_cache"], [766, 4, 1, "", "var"], [767, 4, 1, "", "when"], [768, 4, 1, "", "zeros"]], "polars.Array": [[2, 1, 1, "", "__init__"]], "polars.Binary": [[3, 1, 1, "", "__init__"]], "polars.Boolean": [[4, 1, 1, "", "__init__"]], "polars.Categorical": [[5, 1, 1, "", "__init__"]], "polars.Config": [[6, 1, 1, "", "activate_decimals"], [7, 1, 1, "", "load"], [8, 1, 1, "", "load_from_file"], [9, 1, 1, "", "restore_defaults"], [10, 1, 1, "", "save"], [11, 1, 1, "", "save_to_file"], [12, 1, 1, "", "set_ascii_tables"], [13, 1, 1, "", "set_auto_structify"], [14, 1, 1, "", "set_decimal_separator"], [15, 1, 1, "", "set_float_precision"], [16, 1, 1, "", "set_fmt_float"], [17, 1, 1, "", "set_fmt_str_lengths"], [18, 1, 1, "", "set_fmt_table_cell_list_len"], [19, 1, 1, "", "set_streaming_chunk_size"], [20, 1, 1, "", "set_tbl_cell_alignment"], [21, 1, 1, "", "set_tbl_cell_numeric_alignment"], [22, 1, 1, "", "set_tbl_cols"], [23, 1, 1, "", "set_tbl_column_data_type_inline"], [24, 1, 1, "", "set_tbl_dataframe_shape_below"], [25, 1, 1, "", "set_tbl_formatting"], [26, 1, 1, "", "set_tbl_hide_column_data_types"], [27, 1, 1, "", "set_tbl_hide_column_names"], [28, 1, 1, "", "set_tbl_hide_dataframe_shape"], [29, 1, 1, "", "set_tbl_hide_dtype_separator"], [30, 1, 1, "", "set_tbl_rows"], [31, 1, 1, "", "set_tbl_width_chars"], [32, 1, 1, "", "set_thousands_separator"], [33, 1, 1, "", "set_trim_decimal_zeros"], [34, 1, 1, "", "set_verbose"], [35, 1, 1, "", "state"]], "polars.DataFrame": [[156, 1, 1, "", "__dataframe__"], [157, 1, 1, "", "apply"], [158, 1, 1, "", "approx_n_unique"], [159, 1, 1, "", "bottom_k"], [160, 1, 1, "", "cast"], [161, 1, 1, "", "clear"], [162, 1, 1, "", "clone"], [163, 2, 1, "", "columns"], [164, 1, 1, "", "corr"], [165, 1, 1, "", "count"], [166, 1, 1, "", "describe"], [167, 1, 1, "", "drop"], [168, 1, 1, "", "drop_in_place"], [169, 1, 1, "", "drop_nulls"], [170, 2, 1, "", "dtypes"], [171, 1, 1, "", "equals"], [172, 1, 1, "", "estimated_size"], [173, 1, 1, "", "explode"], [174, 1, 1, "", "extend"], [175, 1, 1, "", "fill_nan"], [176, 1, 1, "", "fill_null"], [177, 1, 1, "", "filter"], [178, 1, 1, "", "find_idx_by_name"], [179, 2, 1, "", "flags"], [180, 1, 1, "", "fold"], [181, 1, 1, "", "frame_equal"], [182, 1, 1, "", "gather_every"], [183, 1, 1, "", "get_column"], [184, 1, 1, "", "get_column_index"], [185, 1, 1, "", "get_columns"], [186, 1, 1, "", "glimpse"], [187, 1, 1, "", "group_by"], [188, 1, 1, "", "group_by_dynamic"], [189, 1, 1, "", "group_by_rolling"], [190, 1, 1, "", "groupby"], [191, 1, 1, "", "groupby_dynamic"], [192, 1, 1, "", "groupby_rolling"], [193, 1, 1, "", "hash_rows"], [194, 1, 1, "", "head"], [195, 2, 1, "", "height"], [196, 1, 1, "", "hstack"], [197, 1, 1, "", "insert_at_idx"], [198, 1, 1, "", "insert_column"], [199, 1, 1, "", "interpolate"], [200, 1, 1, "", "is_duplicated"], [201, 1, 1, "", "is_empty"], [202, 1, 1, "", "is_unique"], [203, 1, 1, "", "item"], [204, 1, 1, "", "iter_columns"], [205, 1, 1, "", "iter_rows"], [206, 1, 1, "", "iter_slices"], [207, 1, 1, "", "join"], [208, 1, 1, "", "join_asof"], [209, 1, 1, "", "lazy"], [210, 1, 1, "", "limit"], [211, 1, 1, "", "map_rows"], [212, 1, 1, "", "max"], [213, 1, 1, "", "max_horizontal"], [214, 1, 1, "", "mean"], [215, 1, 1, "", "mean_horizontal"], [216, 1, 1, "", "median"], [217, 1, 1, "", "melt"], [218, 1, 1, "", "merge_sorted"], [219, 1, 1, "", "min"], [220, 1, 1, "", "min_horizontal"], [221, 1, 1, "", "n_chunks"], [222, 1, 1, "", "n_unique"], [223, 1, 1, "", "null_count"], [224, 1, 1, "", "partition_by"], [225, 1, 1, "", "pipe"], [226, 1, 1, "", "pivot"], [227, 1, 1, "", "product"], [228, 1, 1, "", "quantile"], [229, 1, 1, "", "rechunk"], [230, 1, 1, "", "rename"], [231, 1, 1, "", "replace"], [232, 1, 1, "", "replace_at_idx"], [233, 1, 1, "", "replace_column"], [234, 1, 1, "", "reverse"], [235, 1, 1, "", "rolling"], [236, 1, 1, "", "row"], [237, 1, 1, "", "rows"], [238, 1, 1, "", "rows_by_key"], [239, 1, 1, "", "sample"], [240, 2, 1, "", "schema"], [241, 1, 1, "", "select"], [242, 1, 1, "", "select_seq"], [243, 1, 1, "", "set_sorted"], [244, 2, 1, "", "shape"], [245, 1, 1, "", "shift"], [246, 1, 1, "", "shift_and_fill"], [247, 1, 1, "", "shrink_to_fit"], [248, 1, 1, "", "slice"], [249, 1, 1, "", "sort"], [250, 1, 1, "", "std"], [251, 1, 1, "", "sum"], [252, 1, 1, "", "sum_horizontal"], [253, 1, 1, "", "tail"], [254, 1, 1, "", "take_every"], [255, 1, 1, "", "to_arrow"], [256, 1, 1, "", "to_dict"], [257, 1, 1, "", "to_dicts"], [258, 1, 1, "", "to_dummies"], [259, 1, 1, "", "to_init_repr"], [260, 1, 1, "", "to_numpy"], [261, 1, 1, "", "to_pandas"], [262, 1, 1, "", "to_series"], [263, 1, 1, "", "to_struct"], [264, 1, 1, "", "top_k"], [265, 1, 1, "", "transpose"], [266, 1, 1, "", "unique"], [267, 1, 1, "", "unnest"], [268, 1, 1, "", "unstack"], [269, 1, 1, "", "update"], [270, 1, 1, "", "upsample"], [271, 1, 1, "", "var"], [272, 1, 1, "", "vstack"], [273, 2, 1, "", "width"], [274, 1, 1, "", "with_columns"], [275, 1, 1, "", "with_columns_seq"], [276, 1, 1, "", "with_row_count"], [277, 1, 1, "", "with_row_index"], [36, 1, 1, "", "write_avro"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.DataType": [[46, 1, 1, "", "__init__"]], "polars.Date": [[47, 1, 1, "", "__init__"]], "polars.Datetime": [[48, 1, 1, "", "__init__"]], "polars.Decimal": [[49, 1, 1, "", "__init__"]], "polars.Duration": [[50, 1, 1, "", "__init__"]], "polars.Enum": [[51, 1, 1, "", "__init__"]], "polars.Expr": [[308, 1, 1, "", "abs"], [309, 1, 1, "", "add"], [310, 1, 1, "", "agg_groups"], [311, 1, 1, "", "alias"], [312, 1, 1, "", "all"], [313, 1, 1, "", "and_"], [314, 1, 1, "", "any"], [315, 1, 1, "", "append"], [316, 1, 1, "", "apply"], [317, 1, 1, "", "approx_n_unique"], [318, 1, 1, "", "arccos"], [319, 1, 1, "", "arccosh"], [320, 1, 1, "", "arcsin"], [321, 1, 1, "", "arcsinh"], [322, 1, 1, "", "arctan"], [323, 1, 1, "", "arctanh"], [324, 1, 1, "", "arg_max"], [325, 1, 1, "", "arg_min"], [326, 1, 1, "", "arg_sort"], [327, 1, 1, "", "arg_true"], [328, 1, 1, "", "arg_unique"], [350, 1, 1, "", "backward_fill"], [356, 1, 1, "", "bottom_k"], [357, 1, 1, "", "cast"], [360, 1, 1, "", "cbrt"], [361, 1, 1, "", "ceil"], [362, 1, 1, "", "clip"], [363, 1, 1, "", "clip_max"], [364, 1, 1, "", "clip_min"], [365, 1, 1, "", "cos"], [366, 1, 1, "", "cosh"], [367, 1, 1, "", "cot"], [368, 1, 1, "", "count"], [369, 1, 1, "", "cum_count"], [370, 1, 1, "", "cum_max"], [371, 1, 1, "", "cum_min"], [372, 1, 1, "", "cum_prod"], [373, 1, 1, "", "cum_sum"], [374, 1, 1, "", "cumcount"], [375, 1, 1, "", "cummax"], [376, 1, 1, "", "cummin"], [377, 1, 1, "", "cumprod"], [378, 1, 1, "", "cumsum"], [379, 1, 1, "", "cumulative_eval"], [380, 1, 1, "", "cut"], [381, 1, 1, "", "degrees"], [382, 1, 1, "", "diff"], [383, 1, 1, "", "dot"], [384, 1, 1, "", "drop_nans"], [385, 1, 1, "", "drop_nulls"], [436, 1, 1, "", "entropy"], [437, 1, 1, "", "eq"], [438, 1, 1, "", "eq_missing"], [439, 1, 1, "", "ewm_mean"], [440, 1, 1, "", "ewm_std"], [441, 1, 1, "", "ewm_var"], [442, 1, 1, "", "exclude"], [443, 1, 1, "", "exp"], [444, 1, 1, "", "explode"], [445, 1, 1, "", "extend_constant"], [446, 1, 1, "", "fill_nan"], [447, 1, 1, "", "fill_null"], [448, 1, 1, "", "filter"], [449, 1, 1, "", "first"], [450, 1, 1, "", "flatten"], [451, 1, 1, "", "floor"], [452, 1, 1, "", "floordiv"], [453, 1, 1, "", "forward_fill"], [454, 1, 1, "", "from_json"], [455, 1, 1, "", "gather"], [456, 1, 1, "", "gather_every"], [457, 1, 1, "", "ge"], [458, 1, 1, "", "get"], [459, 1, 1, "", "gt"], [460, 1, 1, "", "hash"], [461, 1, 1, "", "head"], [462, 1, 1, "", "hist"], [463, 1, 1, "", "implode"], [464, 1, 1, "", "inspect"], [465, 1, 1, "", "interpolate"], [466, 1, 1, "", "is_between"], [467, 1, 1, "", "is_duplicated"], [468, 1, 1, "", "is_finite"], [469, 1, 1, "", "is_first"], [470, 1, 1, "", "is_first_distinct"], [471, 1, 1, "", "is_in"], [472, 1, 1, "", "is_infinite"], [473, 1, 1, "", "is_last"], [474, 1, 1, "", "is_last_distinct"], [475, 1, 1, "", "is_nan"], [476, 1, 1, "", "is_not"], [477, 1, 1, "", "is_not_nan"], [478, 1, 1, "", "is_not_null"], [479, 1, 1, "", "is_null"], [480, 1, 1, "", "is_unique"], [481, 1, 1, "", "keep_name"], [482, 1, 1, "", "kurtosis"], [483, 1, 1, "", "last"], [484, 1, 1, "", "le"], [485, 1, 1, "", "len"], [486, 1, 1, "", "limit"], [528, 1, 1, "", "log"], [529, 1, 1, "", "log10"], [530, 1, 1, "", "log1p"], [531, 1, 1, "", "lower_bound"], [532, 1, 1, "", "lt"], [533, 1, 1, "", "map"], [534, 1, 1, "", "map_alias"], [535, 1, 1, "", "map_batches"], [536, 1, 1, "", "map_dict"], [537, 1, 1, "", "map_elements"], [538, 1, 1, "", "max"], [539, 1, 1, "", "mean"], [540, 1, 1, "", "median"], [551, 1, 1, "", "min"], [552, 1, 1, "", "mod"], [553, 1, 1, "", "mode"], [554, 1, 1, "", "mul"], [555, 1, 1, "", "n_unique"], [562, 1, 1, "", "nan_max"], [563, 1, 1, "", "nan_min"], [564, 1, 1, "", "ne"], [565, 1, 1, "", "ne_missing"], [566, 1, 1, "", "neg"], [567, 1, 1, "", "not_"], [568, 1, 1, "", "null_count"], [569, 1, 1, "", "or_"], [570, 1, 1, "", "over"], [571, 1, 1, "", "pct_change"], [572, 1, 1, "", "peak_max"], [573, 1, 1, "", "peak_min"], [574, 1, 1, "", "pipe"], [575, 1, 1, "", "pow"], [576, 1, 1, "", "prefix"], [577, 1, 1, "", "product"], [578, 1, 1, "", "qcut"], [579, 1, 1, "", "quantile"], [580, 1, 1, "", "radians"], [581, 1, 1, "", "rank"], [582, 1, 1, "", "rechunk"], [583, 1, 1, "", "reinterpret"], [584, 1, 1, "", "repeat_by"], [585, 1, 1, "", "replace"], [586, 1, 1, "", "reshape"], [587, 1, 1, "", "reverse"], [588, 1, 1, "", "rle"], [589, 1, 1, "", "rle_id"], [590, 1, 1, "", "rolling"], [591, 1, 1, "", "rolling_apply"], [592, 1, 1, "", "rolling_map"], [593, 1, 1, "", "rolling_max"], [594, 1, 1, "", "rolling_mean"], [595, 1, 1, "", "rolling_median"], [596, 1, 1, "", "rolling_min"], [597, 1, 1, "", "rolling_quantile"], [598, 1, 1, "", "rolling_skew"], [599, 1, 1, "", "rolling_std"], [600, 1, 1, "", "rolling_sum"], [601, 1, 1, "", "rolling_var"], [602, 1, 1, "", "round"], [603, 1, 1, "", "round_sig_figs"], [604, 1, 1, "", "sample"], [605, 1, 1, "", "search_sorted"], [606, 1, 1, "", "set_sorted"], [607, 1, 1, "", "shift"], [608, 1, 1, "", "shift_and_fill"], [609, 1, 1, "", "shrink_dtype"], [610, 1, 1, "", "shuffle"], [611, 1, 1, "", "sign"], [612, 1, 1, "", "sin"], [613, 1, 1, "", "sinh"], [614, 1, 1, "", "skew"], [615, 1, 1, "", "slice"], [616, 1, 1, "", "sort"], [617, 1, 1, "", "sort_by"], [618, 1, 1, "", "sqrt"], [619, 1, 1, "", "std"], [675, 1, 1, "", "sub"], [676, 1, 1, "", "suffix"], [677, 1, 1, "", "sum"], [678, 1, 1, "", "tail"], [679, 1, 1, "", "take"], [680, 1, 1, "", "take_every"], [681, 1, 1, "", "tan"], [682, 1, 1, "", "tanh"], [683, 1, 1, "", "to_physical"], [684, 1, 1, "", "top_k"], [685, 1, 1, "", "truediv"], [686, 1, 1, "", "unique"], [687, 1, 1, "", "unique_counts"], [688, 1, 1, "", "upper_bound"], [689, 1, 1, "", "value_counts"], [690, 1, 1, "", "var"], [691, 1, 1, "", "where"], [692, 1, 1, "", "xor"]], "polars.Expr.arr": [[329, 1, 1, "", "all"], [330, 1, 1, "", "any"], [331, 1, 1, "", "arg_max"], [332, 1, 1, "", "arg_min"], [333, 1, 1, "", "contains"], [334, 1, 1, "", "count_matches"], [335, 1, 1, "", "explode"], [336, 1, 1, "", "first"], [337, 1, 1, "", "get"], [338, 1, 1, "", "join"], [339, 1, 1, "", "last"], [340, 1, 1, "", "max"], [341, 1, 1, "", "median"], [342, 1, 1, "", "min"], [343, 1, 1, "", "reverse"], [344, 1, 1, "", "sort"], [345, 1, 1, "", "std"], [346, 1, 1, "", "sum"], [347, 1, 1, "", "to_list"], [348, 1, 1, "", "unique"], [349, 1, 1, "", "var"]], "polars.Expr.bin": [[351, 1, 1, "", "contains"], [352, 1, 1, "", "decode"], [353, 1, 1, "", "encode"], [354, 1, 1, "", "ends_with"], [355, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[358, 1, 1, "", "get_categories"], [359, 1, 1, "", "set_ordering"]], "polars.Expr.dt": [[386, 1, 1, "", "base_utc_offset"], [387, 1, 1, "", "cast_time_unit"], [388, 1, 1, "", "century"], [389, 1, 1, "", "combine"], [390, 1, 1, "", "convert_time_zone"], [391, 1, 1, "", "date"], [392, 1, 1, "", "datetime"], [393, 1, 1, "", "day"], [394, 1, 1, "", "days"], [395, 1, 1, "", "dst_offset"], [396, 1, 1, "", "epoch"], [397, 1, 1, "", "hour"], [398, 1, 1, "", "hours"], [399, 1, 1, "", "is_leap_year"], [400, 1, 1, "", "iso_year"], [401, 1, 1, "", "microsecond"], [402, 1, 1, "", "microseconds"], [403, 1, 1, "", "millennium"], [404, 1, 1, "", "millisecond"], [405, 1, 1, "", "milliseconds"], [406, 1, 1, "", "minute"], [407, 1, 1, "", "minutes"], [408, 1, 1, "", "month"], [409, 1, 1, "", "month_end"], [410, 1, 1, "", "month_start"], [411, 1, 1, "", "nanosecond"], [412, 1, 1, "", "nanoseconds"], [413, 1, 1, "", "offset_by"], [414, 1, 1, "", "ordinal_day"], [415, 1, 1, "", "quarter"], [416, 1, 1, "", "replace_time_zone"], [417, 1, 1, "", "round"], [418, 1, 1, "", "second"], [419, 1, 1, "", "seconds"], [420, 1, 1, "", "strftime"], [421, 1, 1, "", "time"], [422, 1, 1, "", "timestamp"], [423, 1, 1, "", "to_string"], [424, 1, 1, "", "total_days"], [425, 1, 1, "", "total_hours"], [426, 1, 1, "", "total_microseconds"], [427, 1, 1, "", "total_milliseconds"], [428, 1, 1, "", "total_minutes"], [429, 1, 1, "", "total_nanoseconds"], [430, 1, 1, "", "total_seconds"], [431, 1, 1, "", "truncate"], [432, 1, 1, "", "week"], [433, 1, 1, "", "weekday"], [434, 1, 1, "", "with_time_unit"], [435, 1, 1, "", "year"]], "polars.Expr.list": [[487, 1, 1, "", "all"], [488, 1, 1, "", "any"], [489, 1, 1, "", "arg_max"], [490, 1, 1, "", "arg_min"], [491, 1, 1, "", "concat"], [492, 1, 1, "", "contains"], [493, 1, 1, "", "count_match"], [494, 1, 1, "", "count_matches"], [495, 1, 1, "", "diff"], [496, 1, 1, "", "drop_nulls"], [497, 1, 1, "", "eval"], [498, 1, 1, "", "explode"], [499, 1, 1, "", "first"], [500, 1, 1, "", "gather"], [501, 1, 1, "", "get"], [502, 1, 1, "", "head"], [503, 1, 1, "", "join"], [504, 1, 1, "", "last"], [505, 1, 1, "", "len"], [506, 1, 1, "", "lengths"], [507, 1, 1, "", "max"], [508, 1, 1, "", "mean"], [509, 1, 1, "", "median"], [510, 1, 1, "", "min"], [511, 1, 1, "", "reverse"], [512, 1, 1, "", "sample"], [513, 1, 1, "", "set_difference"], [514, 1, 1, "", "set_intersection"], [515, 1, 1, "", "set_symmetric_difference"], [516, 1, 1, "", "set_union"], [517, 1, 1, "", "shift"], [518, 1, 1, "", "slice"], [519, 1, 1, "", "sort"], [520, 1, 1, "", "std"], [521, 1, 1, "", "sum"], [522, 1, 1, "", "tail"], [523, 1, 1, "", "take"], [524, 1, 1, "", "to_array"], [525, 1, 1, "", "to_struct"], [526, 1, 1, "", "unique"], [527, 1, 1, "", "var"]], "polars.Expr.meta": [[541, 1, 1, "", "eq"], [542, 1, 1, "", "has_multiple_outputs"], [543, 1, 1, "", "is_regex_projection"], [544, 1, 1, "", "ne"], [545, 1, 1, "", "output_name"], [546, 1, 1, "", "pop"], [547, 1, 1, "", "root_names"], [548, 1, 1, "", "tree_format"], [549, 1, 1, "", "undo_aliases"], [550, 1, 1, "", "write_json"]], "polars.Expr.name": [[556, 1, 1, "", "keep"], [557, 1, 1, "", "map"], [558, 1, 1, "", "prefix"], [559, 1, 1, "", "suffix"], [560, 1, 1, "", "to_lowercase"], [561, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[620, 1, 1, "", "concat"], [621, 1, 1, "", "contains"], [622, 1, 1, "", "contains_any"], [623, 1, 1, "", "count_match"], [624, 1, 1, "", "count_matches"], [625, 1, 1, "", "decode"], [626, 1, 1, "", "encode"], [627, 1, 1, "", "ends_with"], [628, 1, 1, "", "explode"], [629, 1, 1, "", "extract"], [630, 1, 1, "", "extract_all"], [631, 1, 1, "", "extract_groups"], [632, 1, 1, "", "find"], [633, 1, 1, "", "json_decode"], [634, 1, 1, "", "json_extract"], [635, 1, 1, "", "json_path_match"], [636, 1, 1, "", "len_bytes"], [637, 1, 1, "", "len_chars"], [638, 1, 1, "", "lengths"], [639, 1, 1, "", "ljust"], [640, 1, 1, "", "lstrip"], [641, 1, 1, "", "n_chars"], [642, 1, 1, "", "pad_end"], [643, 1, 1, "", "pad_start"], [644, 1, 1, "", "parse_int"], [645, 1, 1, "", "replace"], [646, 1, 1, "", "replace_all"], [647, 1, 1, "", "replace_many"], [648, 1, 1, "", "reverse"], [649, 1, 1, "", "rjust"], [650, 1, 1, "", "rstrip"], [651, 1, 1, "", "slice"], [652, 1, 1, "", "split"], [653, 1, 1, "", "split_exact"], [654, 1, 1, "", "splitn"], [655, 1, 1, "", "starts_with"], [656, 1, 1, "", "strip"], [657, 1, 1, "", "strip_chars"], [658, 1, 1, "", "strip_chars_end"], [659, 1, 1, "", "strip_chars_start"], [660, 1, 1, "", "strip_prefix"], [661, 1, 1, "", "strip_suffix"], [662, 1, 1, "", "strptime"], [663, 1, 1, "", "to_date"], [664, 1, 1, "", "to_datetime"], [665, 1, 1, "", "to_decimal"], [666, 1, 1, "", "to_integer"], [667, 1, 1, "", "to_lowercase"], [668, 1, 1, "", "to_time"], [669, 1, 1, "", "to_titlecase"], [670, 1, 1, "", "to_uppercase"], [671, 1, 1, "", "zfill"]], "polars.Expr.struct": [[672, 1, 1, "", "field"], [673, 1, 1, "", "json_encode"], [674, 1, 1, "", "rename_fields"]], "polars.Float32": [[52, 1, 1, "", "__init__"]], "polars.Float64": [[53, 1, 1, "", "__init__"]], "polars.Int16": [[54, 1, 1, "", "__init__"]], "polars.Int32": [[55, 1, 1, "", "__init__"]], "polars.Int64": [[56, 1, 1, "", "__init__"]], "polars.Int8": [[57, 1, 1, "", "__init__"]], "polars.LazyFrame": [[792, 1, 1, "", "approx_n_unique"], [793, 1, 1, "", "bottom_k"], [794, 1, 1, "", "cache"], [795, 1, 1, "", "cast"], [796, 1, 1, "", "clear"], [797, 1, 1, "", "clone"], [798, 1, 1, "", "collect"], [799, 1, 1, "", "collect_async"], [800, 2, 1, "", "columns"], [801, 1, 1, "", "count"], [802, 1, 1, "", "describe"], [803, 1, 1, "", "deserialize"], [804, 1, 1, "", "drop"], [805, 1, 1, "", "drop_nulls"], [806, 2, 1, "", "dtypes"], [807, 1, 1, "", "explain"], [808, 1, 1, "", "explode"], [809, 1, 1, "", "fetch"], [810, 1, 1, "", "fill_nan"], [811, 1, 1, "", "fill_null"], [812, 1, 1, "", "filter"], [813, 1, 1, "", "first"], [814, 1, 1, "", "gather_every"], [815, 1, 1, "", "group_by"], [816, 1, 1, "", "group_by_dynamic"], [817, 1, 1, "", "group_by_rolling"], [818, 1, 1, "", "groupby"], [819, 1, 1, "", "groupby_dynamic"], [820, 1, 1, "", "groupby_rolling"], [821, 1, 1, "", "head"], [822, 1, 1, "", "inspect"], [823, 1, 1, "", "interpolate"], [824, 1, 1, "", "join"], [825, 1, 1, "", "join_asof"], [826, 1, 1, "", "last"], [827, 1, 1, "", "lazy"], [828, 1, 1, "", "limit"], [829, 1, 1, "", "map"], [830, 1, 1, "", "map_batches"], [831, 1, 1, "", "max"], [832, 1, 1, "", "mean"], [833, 1, 1, "", "median"], [834, 1, 1, "", "melt"], [835, 1, 1, "", "merge_sorted"], [836, 1, 1, "", "min"], [837, 1, 1, "", "null_count"], [838, 1, 1, "", "pipe"], [839, 1, 1, "", "profile"], [840, 1, 1, "", "quantile"], [841, 1, 1, "", "rename"], [842, 1, 1, "", "reverse"], [843, 1, 1, "", "rolling"], [844, 2, 1, "", "schema"], [845, 1, 1, "", "select"], [846, 1, 1, "", "select_seq"], [847, 1, 1, "", "serialize"], [848, 1, 1, "", "set_sorted"], [849, 1, 1, "", "shift"], [850, 1, 1, "", "shift_and_fill"], [851, 1, 1, "", "show_graph"], [58, 1, 1, "", "sink_csv"], [59, 1, 1, "", "sink_ipc"], [60, 1, 1, "", "sink_ndjson"], [61, 1, 1, "", "sink_parquet"], [852, 1, 1, "", "slice"], [853, 1, 1, "", "sort"], [854, 1, 1, "", "std"], [855, 1, 1, "", "sum"], [856, 1, 1, "", "tail"], [857, 1, 1, "", "take_every"], [858, 1, 1, "", "top_k"], [859, 1, 1, "", "unique"], [860, 1, 1, "", "unnest"], [861, 1, 1, "", "update"], [862, 1, 1, "", "var"], [863, 2, 1, "", "width"], [864, 1, 1, "", "with_columns"], [865, 1, 1, "", "with_columns_seq"], [866, 1, 1, "", "with_context"], [867, 1, 1, "", "with_row_count"], [868, 1, 1, "", "with_row_index"]], "polars.List": [[62, 1, 1, "", "__init__"]], "polars.Null": [[63, 1, 1, "", "__init__"]], "polars.Object": [[64, 1, 1, "", "__init__"]], "polars.SQLContext": [[1281, 1, 1, "", "__enter__"], [1281, 1, 1, "", "__exit__"], [1281, 1, 1, "", "__init__"], [65, 1, 1, "", "execute"], [66, 1, 1, "", "register"], [67, 1, 1, "", "register_globals"], [68, 1, 1, "", "register_many"], [69, 1, 1, "", "tables"], [70, 1, 1, "", "unregister"]], "polars.Series": [[894, 1, 1, "", "abs"], [895, 1, 1, "", "alias"], [896, 1, 1, "", "all"], [897, 1, 1, "", "any"], [898, 1, 1, "", "append"], [899, 1, 1, "", "apply"], [900, 1, 1, "", "arccos"], [901, 1, 1, "", "arccosh"], [902, 1, 1, "", "arcsin"], [903, 1, 1, "", "arcsinh"], [904, 1, 1, "", "arctan"], [905, 1, 1, "", "arctanh"], [906, 1, 1, "", "arg_max"], [907, 1, 1, "", "arg_min"], [908, 1, 1, "", "arg_sort"], [909, 1, 1, "", "arg_true"], [910, 1, 1, "", "arg_unique"], [937, 1, 1, "", "bottom_k"], [938, 1, 1, "", "cast"], [944, 1, 1, "", "cbrt"], [945, 1, 1, "", "ceil"], [946, 1, 1, "", "chunk_lengths"], [947, 1, 1, "", "clear"], [948, 1, 1, "", "clip"], [949, 1, 1, "", "clip_max"], [950, 1, 1, "", "clip_min"], [951, 1, 1, "", "clone"], [952, 1, 1, "", "cos"], [953, 1, 1, "", "cosh"], [954, 1, 1, "", "cot"], [955, 1, 1, "", "cum_max"], [956, 1, 1, "", "cum_min"], [957, 1, 1, "", "cum_prod"], [958, 1, 1, "", "cum_sum"], [959, 1, 1, "", "cummax"], [960, 1, 1, "", "cummin"], [961, 1, 1, "", "cumprod"], [962, 1, 1, "", "cumsum"], [963, 1, 1, "", "cumulative_eval"], [964, 1, 1, "", "cut"], [965, 1, 1, "", "describe"], [966, 1, 1, "", "diff"], [967, 1, 1, "", "dot"], [968, 1, 1, "", "drop_nans"], [969, 1, 1, "", "drop_nulls"], [1024, 3, 1, "", "dtype"], [1025, 1, 1, "", "entropy"], [1026, 1, 1, "", "equals"], [1027, 1, 1, "", "estimated_size"], [1028, 1, 1, "", "ewm_mean"], [1029, 1, 1, "", "ewm_std"], [1030, 1, 1, "", "ewm_var"], [1031, 1, 1, "", "exp"], [1032, 1, 1, "", "explode"], [1033, 1, 1, "", "extend"], [1034, 1, 1, "", "extend_constant"], [1035, 1, 1, "", "fill_nan"], [1036, 1, 1, "", "fill_null"], [1037, 1, 1, "", "filter"], [1038, 3, 1, "", "flags"], [1039, 1, 1, "", "floor"], [1040, 1, 1, "", "gather"], [1041, 1, 1, "", "gather_every"], [1042, 1, 1, "", "get_chunks"], [1043, 1, 1, "", "has_validity"], [1044, 1, 1, "", "hash"], [1045, 1, 1, "", "head"], [1046, 1, 1, "", "hist"], [1047, 1, 1, "", "implode"], [1048, 3, 1, "", "inner_dtype"], [1049, 1, 1, "", "interpolate"], [1050, 1, 1, "", "is_between"], [1051, 1, 1, "", "is_boolean"], [1052, 1, 1, "", "is_duplicated"], [1053, 1, 1, "", "is_empty"], [1054, 1, 1, "", "is_finite"], [1055, 1, 1, "", "is_first"], [1056, 1, 1, "", "is_first_distinct"], [1057, 1, 1, "", "is_float"], [1058, 1, 1, "", "is_in"], [1059, 1, 1, "", "is_infinite"], [1060, 1, 1, "", "is_integer"], [1061, 1, 1, "", "is_last"], [1062, 1, 1, "", "is_last_distinct"], [1063, 1, 1, "", "is_nan"], [1064, 1, 1, "", "is_not_nan"], [1065, 1, 1, "", "is_not_null"], [1066, 1, 1, "", "is_null"], [1067, 1, 1, "", "is_numeric"], [1068, 1, 1, "", "is_sorted"], [1069, 1, 1, "", "is_temporal"], [1070, 1, 1, "", "is_unique"], [1071, 1, 1, "", "is_utf8"], [1072, 1, 1, "", "item"], [1073, 1, 1, "", "kurtosis"], [1074, 1, 1, "", "len"], [1075, 1, 1, "", "limit"], [1117, 1, 1, "", "log"], [1118, 1, 1, "", "log10"], [1119, 1, 1, "", "log1p"], [1120, 1, 1, "", "lower_bound"], [1121, 1, 1, "", "map_dict"], [1122, 1, 1, "", "map_elements"], [1123, 1, 1, "", "max"], [1124, 1, 1, "", "mean"], [1125, 1, 1, "", "median"], [1126, 1, 1, "", "min"], [1127, 1, 1, "", "mode"], [1128, 1, 1, "", "n_chunks"], [1129, 1, 1, "", "n_unique"], [1130, 3, 1, "", "name"], [1131, 1, 1, "", "nan_max"], [1132, 1, 1, "", "nan_min"], [1133, 1, 1, "", "new_from_index"], [1134, 1, 1, "", "not_"], [1135, 1, 1, "", "null_count"], [1136, 1, 1, "", "pct_change"], [1137, 1, 1, "", "peak_max"], [1138, 1, 1, "", "peak_min"], [1139, 1, 1, "", "product"], [1140, 1, 1, "", "qcut"], [1141, 1, 1, "", "quantile"], [1142, 1, 1, "", "rank"], [1143, 1, 1, "", "rechunk"], [1144, 1, 1, "", "reinterpret"], [1145, 1, 1, "", "rename"], [1146, 1, 1, "", "replace"], [1147, 1, 1, "", "reshape"], [1148, 1, 1, "", "reverse"], [1149, 1, 1, "", "rle"], [1150, 1, 1, "", "rle_id"], [1151, 1, 1, "", "rolling_apply"], [1152, 1, 1, "", "rolling_map"], [1153, 1, 1, "", "rolling_max"], [1154, 1, 1, "", "rolling_mean"], [1155, 1, 1, "", "rolling_median"], [1156, 1, 1, "", "rolling_min"], [1157, 1, 1, "", "rolling_quantile"], [1158, 1, 1, "", "rolling_skew"], [1159, 1, 1, "", "rolling_std"], [1160, 1, 1, "", "rolling_sum"], [1161, 1, 1, "", "rolling_var"], [1162, 1, 1, "", "round"], [1163, 1, 1, "", "round_sig_figs"], [1164, 1, 1, "", "sample"], [1165, 1, 1, "", "scatter"], [1166, 1, 1, "", "search_sorted"], [1167, 1, 1, "", "series_equal"], [1168, 1, 1, "", "set"], [1169, 1, 1, "", "set_at_idx"], [1170, 1, 1, "", "set_sorted"], [1171, 3, 1, "", "shape"], [1172, 1, 1, "", "shift"], [1173, 1, 1, "", "shift_and_fill"], [1174, 1, 1, "", "shrink_dtype"], [1175, 1, 1, "", "shrink_to_fit"], [1176, 1, 1, "", "shuffle"], [1177, 1, 1, "", "sign"], [1178, 1, 1, "", "sin"], [1179, 1, 1, "", "sinh"], [1180, 1, 1, "", "skew"], [1181, 1, 1, "", "slice"], [1182, 1, 1, "", "sort"], [1183, 1, 1, "", "sqrt"], [1184, 1, 1, "", "std"], [1243, 1, 1, "", "sum"], [1244, 1, 1, "", "tail"], [1245, 1, 1, "", "take"], [1246, 1, 1, "", "take_every"], [1247, 1, 1, "", "tan"], [1248, 1, 1, "", "tanh"], [1249, 1, 1, "", "to_arrow"], [1250, 1, 1, "", "to_dummies"], [1251, 1, 1, "", "to_frame"], [1252, 1, 1, "", "to_init_repr"], [1253, 1, 1, "", "to_list"], [1254, 1, 1, "", "to_numpy"], [1255, 1, 1, "", "to_pandas"], [1256, 1, 1, "", "to_physical"], [1257, 1, 1, "", "top_k"], [1258, 1, 1, "", "unique"], [1259, 1, 1, "", "unique_counts"], [1260, 1, 1, "", "upper_bound"], [1261, 1, 1, "", "value_counts"], [1262, 1, 1, "", "var"], [1263, 1, 1, "", "view"], [1264, 1, 1, "", "zip_with"]], "polars.Series.arr": [[911, 1, 1, "", "all"], [912, 1, 1, "", "any"], [913, 1, 1, "", "arg_max"], [914, 1, 1, "", "arg_min"], [915, 1, 1, "", "contains"], [916, 1, 1, "", "count_matches"], [917, 1, 1, "", "explode"], [918, 1, 1, "", "first"], [919, 1, 1, "", "get"], [920, 1, 1, "", "join"], [921, 1, 1, "", "last"], [922, 1, 1, "", "max"], [923, 1, 1, "", "median"], [924, 1, 1, "", "min"], [925, 1, 1, "", "reverse"], [926, 1, 1, "", "sort"], [927, 1, 1, "", "std"], [928, 1, 1, "", "sum"], [929, 1, 1, "", "to_list"], [930, 1, 1, "", "unique"], [931, 1, 1, "", "var"]], "polars.Series.bin": [[932, 1, 1, "", "contains"], [933, 1, 1, "", "decode"], [934, 1, 1, "", "encode"], [935, 1, 1, "", "ends_with"], [936, 1, 1, "", "starts_with"]], "polars.Series.cat": [[939, 1, 1, "", "get_categories"], [940, 1, 1, "", "is_local"], [941, 1, 1, "", "set_ordering"], [942, 1, 1, "", "to_local"], [943, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[970, 1, 1, "", "base_utc_offset"], [971, 1, 1, "", "cast_time_unit"], [972, 1, 1, "", "century"], [973, 1, 1, "", "combine"], [974, 1, 1, "", "convert_time_zone"], [975, 1, 1, "", "date"], [976, 1, 1, "", "datetime"], [977, 1, 1, "", "day"], [978, 1, 1, "", "days"], [979, 1, 1, "", "dst_offset"], [980, 1, 1, "", "epoch"], [981, 1, 1, "", "hour"], [982, 1, 1, "", "hours"], [983, 1, 1, "", "is_leap_year"], [984, 1, 1, "", "iso_year"], [985, 1, 1, "", "max"], [986, 1, 1, "", "mean"], [987, 1, 1, "", "median"], [988, 1, 1, "", "microsecond"], [989, 1, 1, "", "microseconds"], [990, 1, 1, "", "millennium"], [991, 1, 1, "", "millisecond"], [992, 1, 1, "", "milliseconds"], [993, 1, 1, "", "min"], [994, 1, 1, "", "minute"], [995, 1, 1, "", "minutes"], [996, 1, 1, "", "month"], [997, 1, 1, "", "month_end"], [998, 1, 1, "", "month_start"], [999, 1, 1, "", "nanosecond"], [1000, 1, 1, "", "nanoseconds"], [1001, 1, 1, "", "offset_by"], [1002, 1, 1, "", "ordinal_day"], [1003, 1, 1, "", "quarter"], [1004, 1, 1, "", "replace_time_zone"], [1005, 1, 1, "", "round"], [1006, 1, 1, "", "second"], [1007, 1, 1, "", "seconds"], [1008, 1, 1, "", "strftime"], [1009, 1, 1, "", "time"], [1010, 1, 1, "", "timestamp"], [1011, 1, 1, "", "to_string"], [1012, 1, 1, "", "total_days"], [1013, 1, 1, "", "total_hours"], [1014, 1, 1, "", "total_microseconds"], [1015, 1, 1, "", "total_milliseconds"], [1016, 1, 1, "", "total_minutes"], [1017, 1, 1, "", "total_nanoseconds"], [1018, 1, 1, "", "total_seconds"], [1019, 1, 1, "", "truncate"], [1020, 1, 1, "", "week"], [1021, 1, 1, "", "weekday"], [1022, 1, 1, "", "with_time_unit"], [1023, 1, 1, "", "year"]], "polars.Series.list": [[1076, 1, 1, "", "all"], [1077, 1, 1, "", "any"], [1078, 1, 1, "", "arg_max"], [1079, 1, 1, "", "arg_min"], [1080, 1, 1, "", "concat"], [1081, 1, 1, "", "contains"], [1082, 1, 1, "", "count_match"], [1083, 1, 1, "", "count_matches"], [1084, 1, 1, "", "diff"], [1085, 1, 1, "", "drop_nulls"], [1086, 1, 1, "", "eval"], [1087, 1, 1, "", "explode"], [1088, 1, 1, "", "first"], [1089, 1, 1, "", "gather"], [1090, 1, 1, "", "get"], [1091, 1, 1, "", "head"], [1092, 1, 1, "", "join"], [1093, 1, 1, "", "last"], [1094, 1, 1, "", "len"], [1095, 1, 1, "", "lengths"], [1096, 1, 1, "", "max"], [1097, 1, 1, "", "mean"], [1098, 1, 1, "", "median"], [1099, 1, 1, "", "min"], [1100, 1, 1, "", "reverse"], [1101, 1, 1, "", "sample"], [1102, 1, 1, "", "set_difference"], [1103, 1, 1, "", "set_intersection"], [1104, 1, 1, "", "set_symmetric_difference"], [1105, 1, 1, "", "set_union"], [1106, 1, 1, "", "shift"], [1107, 1, 1, "", "slice"], [1108, 1, 1, "", "sort"], [1109, 1, 1, "", "std"], [1110, 1, 1, "", "sum"], [1111, 1, 1, "", "tail"], [1112, 1, 1, "", "take"], [1113, 1, 1, "", "to_array"], [1114, 1, 1, "", "to_struct"], [1115, 1, 1, "", "unique"], [1116, 1, 1, "", "var"]], "polars.Series.str": [[1185, 1, 1, "", "concat"], [1186, 1, 1, "", "contains"], [1187, 1, 1, "", "contains_any"], [1188, 1, 1, "", "count_match"], [1189, 1, 1, "", "count_matches"], [1190, 1, 1, "", "decode"], [1191, 1, 1, "", "encode"], [1192, 1, 1, "", "ends_with"], [1193, 1, 1, "", "explode"], [1194, 1, 1, "", "extract"], [1195, 1, 1, "", "extract_all"], [1196, 1, 1, "", "extract_groups"], [1197, 1, 1, "", "find"], [1198, 1, 1, "", "json_decode"], [1199, 1, 1, "", "json_extract"], [1200, 1, 1, "", "json_path_match"], [1201, 1, 1, "", "len_bytes"], [1202, 1, 1, "", "len_chars"], [1203, 1, 1, "", "lengths"], [1204, 1, 1, "", "ljust"], [1205, 1, 1, "", "lstrip"], [1206, 1, 1, "", "n_chars"], [1207, 1, 1, "", "pad_end"], [1208, 1, 1, "", "pad_start"], [1209, 1, 1, "", "parse_int"], [1210, 1, 1, "", "replace"], [1211, 1, 1, "", "replace_all"], [1212, 1, 1, "", "replace_many"], [1213, 1, 1, "", "reverse"], [1214, 1, 1, "", "rjust"], [1215, 1, 1, "", "rstrip"], [1216, 1, 1, "", "slice"], [1217, 1, 1, "", "split"], [1218, 1, 1, "", "split_exact"], [1219, 1, 1, "", "splitn"], [1220, 1, 1, "", "starts_with"], [1221, 1, 1, "", "strip"], [1222, 1, 1, "", "strip_chars"], [1223, 1, 1, "", "strip_chars_end"], [1224, 1, 1, "", "strip_chars_start"], [1225, 1, 1, "", "strip_prefix"], [1226, 1, 1, "", "strip_suffix"], [1227, 1, 1, "", "strptime"], [1228, 1, 1, "", "to_date"], [1229, 1, 1, "", "to_datetime"], [1230, 1, 1, "", "to_decimal"], [1231, 1, 1, "", "to_integer"], [1232, 1, 1, "", "to_lowercase"], [1233, 1, 1, "", "to_time"], [1234, 1, 1, "", "to_titlecase"], [1235, 1, 1, "", "to_uppercase"], [1236, 1, 1, "", "zfill"]], "polars.Series.struct": [[1237, 1, 1, "", "field"], [1238, 3, 1, "", "fields"], [1239, 1, 1, "", "json_encode"], [1240, 1, 1, "", "rename_fields"], [1241, 3, 1, "", "schema"], [1242, 1, 1, "", "unnest"]], "polars.String": [[71, 1, 1, "", "__init__"]], "polars.StringCache": [[72, 1, 1, "", "__init__"]], "polars.Struct": [[73, 1, 1, "", "__init__"]], "polars.Time": [[74, 1, 1, "", "__init__"]], "polars.UInt16": [[75, 1, 1, "", "__init__"]], "polars.UInt32": [[76, 1, 1, "", "__init__"]], "polars.UInt64": [[77, 1, 1, "", "__init__"]], "polars.UInt8": [[78, 1, 1, "", "__init__"]], "polars.Unknown": [[79, 1, 1, "", "__init__"]], "polars.api": [[82, 4, 1, "", "register_dataframe_namespace"], [83, 4, 1, "", "register_expr_namespace"], [84, 4, 1, "", "register_lazyframe_namespace"], [85, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[278, 1, 1, "", "__iter__"], [279, 1, 1, "", "agg"], [280, 1, 1, "", "all"], [281, 1, 1, "", "apply"], [282, 1, 1, "", "count"], [283, 1, 1, "", "first"], [284, 1, 1, "", "head"], [285, 1, 1, "", "last"], [286, 1, 1, "", "len"], [287, 1, 1, "", "map_groups"], [288, 1, 1, "", "max"], [289, 1, 1, "", "mean"], [290, 1, 1, "", "median"], [291, 1, 1, "", "min"], [292, 1, 1, "", "n_unique"], [293, 1, 1, "", "quantile"], [294, 1, 1, "", "sum"], [295, 1, 1, "", "tail"]], "polars.exceptions": [[92, 5, 1, "", "ArrowError"], [93, 5, 1, "", "ColumnNotFoundError"], [94, 5, 1, "", "ComputeError"], [95, 5, 1, "", "DuplicateError"], [96, 5, 1, "", "InvalidOperationError"], [97, 5, 1, "", "NoDataError"], [98, 5, 1, "", "NoRowsReturnedError"], [99, 5, 1, "", "PolarsError"], [100, 5, 1, "", "PolarsPanicError"], [101, 5, 1, "", "RowsError"], [102, 5, 1, "", "SchemaError"], [103, 5, 1, "", "SchemaFieldNotFoundError"], [104, 5, 1, "", "ShapeError"], [105, 5, 1, "", "StructFieldNotFoundError"], [106, 5, 1, "", "TooManyRowsReturnedError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[116, 1, 1, "", "next_batches"]], "polars.lazyframe.group_by.LazyGroupBy": [[869, 1, 1, "", "agg"], [870, 1, 1, "", "all"], [871, 1, 1, "", "apply"], [872, 1, 1, "", "count"], [873, 1, 1, "", "first"], [874, 1, 1, "", "head"], [875, 1, 1, "", "last"], [876, 1, 1, "", "len"], [877, 1, 1, "", "map_groups"], [878, 1, 1, "", "max"], [879, 1, 1, "", "mean"], [880, 1, 1, "", "median"], [881, 1, 1, "", "min"], [882, 1, 1, "", "n_unique"], [883, 1, 1, "", "quantile"], [884, 1, 1, "", "sum"], [885, 1, 1, "", "tail"]], "polars.selectors": [[892, 4, 1, "", "all"], [892, 4, 1, "", "by_dtype"], [892, 4, 1, "", "by_name"], [892, 4, 1, "", "categorical"], [892, 4, 1, "", "contains"], [892, 4, 1, "", "date"], [892, 4, 1, "", "datetime"], [892, 4, 1, "", "duration"], [892, 4, 1, "", "ends_with"], [892, 4, 1, "", "expand_selector"], [892, 4, 1, "", "first"], [892, 4, 1, "", "float"], [892, 4, 1, "", "integer"], [892, 4, 1, "", "is_selector"], [892, 4, 1, "", "last"], [892, 4, 1, "", "matches"], [892, 4, 1, "", "numeric"], [892, 4, 1, "", "starts_with"], [892, 4, 1, "", "string"], [892, 4, 1, "", "temporal"], [892, 4, 1, "", "time"]], "polars.testing": [[141, 4, 1, "", "assert_frame_equal"], [142, 4, 1, "", "assert_frame_not_equal"], [143, 4, 1, "", "assert_series_equal"], [144, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[145, 0, 1, "", "column"], [146, 4, 1, "", "columns"], [147, 4, 1, "", "create_list_strategy"], [148, 4, 1, "", "dataframes"], [149, 4, 1, "", "load_profile"], [150, 4, 1, "", "series"], [151, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[145, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "titleterms": {"index": 0, "extend": [1, 174, 1033], "api": [1, 82, 83, 84, 85, 789], "provid": 1, "new": 1, "function": [1, 154, 776, 788, 892], "avail": 1, "registr": 1, "exampl": [1, 304, 892, 1277, 1282], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 773, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1282], "arrai": [2, 769, 1265], "binari": [3, 770, 783, 1267], "boolean": [4, 771, 1268], "categor": 5, "config": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 154], "activate_decim": 6, "load": [7, 154], "load_from_fil": 8, "restore_default": 9, "save": [10, 154], "save_to_fil": 11, "set_ascii_t": 12, "set_auto_structifi": 13, "set_decimal_separ": 14, "set_float_precis": 15, "set_fmt_float": 16, "set_fmt_str_length": 17, "set_fmt_table_cell_list_len": 18, "set_streaming_chunk_s": 19, "set_tbl_cell_align": 20, "set_tbl_cell_numeric_align": 21, "set_tbl_col": 22, "set_tbl_column_data_type_inlin": 23, "set_tbl_dataframe_shape_below": 24, "set_tbl_format": 25, "set_tbl_hide_column_data_typ": 26, "set_tbl_hide_column_nam": 27, "set_tbl_hide_dataframe_shap": 28, "set_tbl_hide_dtype_separ": 29, "set_tbl_row": 30, "set_tbl_width_char": 31, "set_thousands_separ": 32, "set_trim_decimal_zero": 33, "set_verbos": 34, "state": [35, 154], "datafram": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 148, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 301], "write_avro": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 550], "write_ndjson": 44, "write_parquet": 45, "datatyp": 46, "date": [47, 391, 719, 975], "datetim": [48, 392, 722, 976], "decim": 49, "durat": [50, 725], "enum": 51, "float32": 52, "float64": 53, "int16": 54, "int32": 55, "int64": 56, "int8": 57, "lazyfram": [58, 59, 60, 61, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 889], "sink_csv": 58, "sink_ipc": 59, "sink_ndjson": 60, "sink_parquet": 61, "list": [62, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 778, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1274], "null": 63, "object": 64, "sqlcontext": [65, 66, 67, 68, 69, 70], "execut": 65, "regist": 66, "register_glob": 67, "register_mani": 68, "tabl": 69, "unregist": 70, "string": [71, 784, 1278], "stringcach": [72, 788], "struct": [73, 672, 673, 674, 759, 785, 1237, 1238, 1239, 1240, 1241, 1242, 1279], "time": [74, 421, 763, 1009], "uint16": 75, "uint32": 76, "uint64": 77, "uint8": 78, "unknown": 79, "utf8": 80, "align_fram": 81, "register_dataframe_namespac": 82, "register_expr_namespac": 83, "register_lazyframe_namespac": 84, "register_series_namespac": 85, "build_info": 86, "collect_al": 87, "collect_all_async": 88, "concat": [89, 491, 620, 1080, 1185], "disable_string_cach": 90, "enable_string_cach": 91, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 306], "arrowerror": 92, "columnnotfounderror": 93, "computeerror": 94, "duplicateerror": 95, "invalidoperationerror": 96, "nodataerror": 97, "norowsreturnederror": 98, "polarserror": 99, "polarspanicerror": 100, "rowserror": 101, "schemaerror": 102, "schemafieldnotfounderror": 103, "shapeerror": 104, "structfieldnotfounderror": 105, "toomanyrowsreturnederror": 106, "from_arrow": 107, "from_datafram": 108, "from_dict": [109, 110], "from_numpi": 111, "from_panda": 112, "from_record": 113, "from_repr": 114, "get_index_typ": 115, "io": 116, "csv": [116, 790], "batched_read": 116, "batchedcsvread": [116, 790], "next_batch": 116, "read_avro": 117, "read_csv": 118, "read_csv_batch": 119, "read_databas": 120, "read_database_uri": 121, "read_delta": 122, "read_excel": 123, "read_ipc": 124, "read_ipc_schema": 125, "read_ipc_stream": 126, "read_json": 127, "read_ndjson": 128, "read_od": 129, "read_parquet": 130, "read_parquet_schema": 131, "scan_csv": 132, "scan_delta": 133, "scan_iceberg": 134, "scan_ipc": 135, "scan_ndjson": 136, "scan_parquet": 137, "scan_pyarrow_dataset": 138, "set_random_se": 139, "show_vers": 140, "test": [141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 1282], "assert_frame_equ": 141, "assert_frame_not_equ": 142, "assert_series_equ": 143, "assert_series_not_equ": 144, "parametr": [145, 146, 147, 148, 149, 150, 151, 1282], "column": [145, 146, 163, 774, 800], "create_list_strategi": 147, "load_profil": 149, "seri": [150, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1273], "set_profil": 151, "threadpool_s": 152, "using_string_cach": 153, "option": 154, "current": 154, "us": 154, "context": 154, "manag": 154, "decor": 154, "aggreg": [155, 307, 791, 893], "__dataframe__": 156, "appli": [157, 281, 316, 697, 871, 899], "approx_n_uniqu": [158, 317, 698, 792], "bottom_k": [159, 356, 793, 937], "cast": [160, 357, 795, 938], "clear": [161, 796, 947], "clone": [162, 797, 951], "corr": [164, 707], "count": [165, 282, 368, 708, 801, 872], "describ": [166, 802, 965], "drop": [167, 804], "drop_in_plac": 168, "drop_nul": [169, 385, 496, 805, 969, 1085], "dtype": [170, 806, 1024], "equal": [171, 1026], "estimated_s": [172, 1027], "explod": [173, 335, 444, 498, 628, 808, 917, 1032, 1087, 1193], "fill_nan": [175, 446, 810, 1035], "fill_nul": [176, 447, 811, 1036], "filter": [177, 448, 812, 1037], "find_idx_by_nam": 178, "flag": [179, 1038], "fold": [180, 729], "frame_equ": 181, "gather_everi": [182, 456, 814, 1041], "get_column": [183, 185], "get_column_index": 184, "glimps": 186, "group_bi": [187, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 815, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "group_by_dynam": [188, 816], "group_by_rol": [189, 817], "groupbi": [190, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 300, 818, 888], "groupby_dynam": [191, 819], "groupby_rol": [192, 820], "hash_row": 193, "head": [194, 284, 461, 502, 733, 821, 874, 1045, 1091], "height": 195, "hstack": 196, "insert_at_idx": 197, "insert_column": 198, "interpol": [199, 465, 823, 1049], "is_dupl": [200, 467, 1052], "is_empti": [201, 1053], "is_uniqu": [202, 480, 1070], "item": [203, 1072], "iter_column": 204, "iter_row": 205, "iter_slic": 206, "join": [207, 338, 503, 824, 920, 1092], "join_asof": [208, 825], "lazi": [209, 827], "limit": [210, 486, 828, 1075], "map_row": 211, "max": [212, 288, 340, 507, 538, 743, 831, 878, 922, 985, 1096, 1123], "max_horizont": [213, 744], "mean": [214, 289, 508, 539, 745, 832, 879, 986, 1097, 1124], "mean_horizont": 215, "median": [216, 290, 341, 509, 540, 746, 833, 880, 923, 987, 1098, 1125], "melt": [217, 834], "merge_sort": [218, 835], "min": [219, 291, 342, 510, 551, 747, 836, 881, 924, 993, 1099, 1126], "min_horizont": [220, 748], "n_chunk": [221, 1128], "n_uniqu": [222, 292, 555, 749, 882, 1129], "null_count": [223, 568, 837, 1135], "partition_bi": 224, "pipe": [225, 574, 838], "pivot": 226, "product": [227, 577, 1139], "quantil": [228, 293, 579, 751, 840, 883, 1141], "rechunk": [229, 582, 1143], "renam": [230, 841, 1145], "replac": [231, 585, 645, 1146, 1210], "replace_at_idx": 232, "replace_column": 233, "revers": [234, 343, 511, 587, 648, 842, 925, 1100, 1148, 1213], "roll": [235, 590, 843], "row": [236, 237], "rows_by_kei": 238, "sampl": [239, 512, 604, 1101, 1164], "schema": [240, 844, 1241], "select": [241, 303, 756, 781, 845, 891, 1276], "select_seq": [242, 846], "set_sort": [243, 606, 848, 1170], "shape": [244, 1171], "shift": [245, 517, 607, 849, 1106, 1172], "shift_and_fil": [246, 608, 850, 1173], "shrink_to_fit": [247, 1175], "slice": [248, 518, 615, 651, 852, 1107, 1181, 1216], "sort": [249, 344, 519, 616, 853, 926, 1108, 1182], "std": [250, 345, 520, 619, 758, 854, 927, 1109, 1184], "sum": [251, 294, 346, 521, 677, 760, 855, 884, 928, 1110, 1243], "sum_horizont": [252, 761], "tail": [253, 295, 522, 678, 762, 856, 885, 1111, 1244], "take_everi": [254, 680, 857, 1246], "to_arrow": [255, 1249], "to_dict": [256, 257], "to_dummi": [258, 1250], "to_init_repr": [259, 1252], "to_numpi": [260, 1254], "to_panda": [261, 1255], "to_seri": 262, "to_struct": [263, 525, 1114], "top_k": [264, 684, 858, 1257], "transpos": 265, "uniqu": [266, 348, 526, 686, 859, 930, 1115, 1258], "unnest": [267, 860, 1242], "unstack": 268, "updat": [269, 861], "upsampl": 270, "var": [271, 349, 527, 690, 766, 862, 931, 1116, 1262], "vstack": 272, "width": [273, 863], "with_column": [274, 864], "with_columns_seq": [275, 865], "with_row_count": [276, 867], "with_row_index": [277, 868], "__iter__": 278, "agg": [279, 869], "all": [280, 312, 329, 487, 693, 870, 896, 911, 1076], "first": [283, 336, 449, 499, 728, 813, 873, 918, 1088], "last": [285, 339, 483, 504, 737, 826, 875, 921, 1093], "len": [286, 485, 505, 738, 876, 1074, 1094], "map_group": [287, 742, 877], "attribut": [296, 886, 1266], "comput": [297, 775, 1270], "descript": [298, 887, 1271], "export": [299, 1272], "miscellan": [302, 780, 788, 890, 1275], "manipul": [303, 781, 891, 1276], "plot": [304, 1277], "data": 305, "type": 305, "numer": [305, 783], "tempor": [305, 786, 1280], "nest": 305, "other": 305, "expr": [308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692], "ab": [308, 894], "add": 309, "agg_group": 310, "alia": [311, 895], "and_": 313, "ani": [314, 330, 488, 695, 897, 912, 1077], "append": [315, 898], "arcco": [318, 900], "arccosh": [319, 901], "arcsin": [320, 902], "arcsinh": [321, 903], "arctan": [322, 904], "arctanh": [323, 905], "arg_max": [324, 331, 489, 906, 913, 1078], "arg_min": [325, 332, 490, 907, 914, 1079], "arg_sort": [326, 908], "arg_tru": [327, 909], "arg_uniqu": [328, 910], "arr": [329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931], "contain": [333, 351, 492, 621, 915, 932, 1081, 1186], "count_match": [334, 493, 494, 623, 624, 916, 1082, 1083, 1188, 1189], "get": [337, 458, 501, 919, 1090], "to_list": [347, 929, 1253], "backward_fil": 350, "bin": [351, 352, 353, 354, 355, 932, 933, 934, 935, 936], "decod": [352, 625, 933, 1190], "encod": [353, 626, 934, 1191], "ends_with": [354, 627, 935, 1192], "starts_with": [355, 655, 936, 1220], "cat": [358, 359, 939, 940, 941, 942, 943], "get_categori": [358, 939], "set_ord": [359, 941], "cbrt": [360, 944], "ceil": [361, 945], "clip": [362, 948], "clip_max": [363, 949], "clip_min": [364, 950], "co": [365, 952], "cosh": [366, 953], "cot": [367, 954], "cum_count": [369, 710], "cum_max": [370, 955], "cum_min": [371, 956], "cum_prod": [372, 957], "cum_sum": [373, 713, 958], "cumcount": 374, "cummax": [375, 959], "cummin": [376, 960], "cumprod": [377, 961], "cumsum": [378, 717, 962], "cumulative_ev": [379, 963], "cut": [380, 964], "degre": 381, "diff": [382, 495, 966, 1084], "dot": [383, 967], "drop_nan": [384, 968], "dt": [386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023], "base_utc_offset": [386, 970], "cast_time_unit": [387, 971], "centuri": [388, 972], "combin": [389, 973], "convert_time_zon": [390, 974], "dai": [393, 394, 977, 978], "dst_offset": [395, 979], "epoch": [396, 980], "hour": [397, 398, 981, 982], "is_leap_year": [399, 983], "iso_year": [400, 984], "microsecond": [401, 402, 988, 989], "millennium": [403, 990], "millisecond": [404, 405, 991, 992], "minut": [406, 407, 994, 995], "month": [408, 996], "month_end": [409, 997], "month_start": [410, 998], "nanosecond": [411, 412, 999, 1000], "offset_bi": [413, 1001], "ordinal_dai": [414, 1002], "quarter": [415, 1003], "replace_time_zon": [416, 1004], "round": [417, 602, 1005, 1162], "second": [418, 419, 1006, 1007], "strftime": [420, 1008], "timestamp": [422, 1010], "to_str": [423, 1011], "total_dai": [424, 1012], "total_hour": [425, 1013], "total_microsecond": [426, 1014], "total_millisecond": [427, 1015], "total_minut": [428, 1016], "total_nanosecond": [429, 1017], "total_second": [430, 1018], "truncat": [431, 1019], "week": [432, 1020], "weekdai": [433, 1021], "with_time_unit": [434, 1022], "year": [435, 1023], "entropi": [436, 1025], "eq": [437, 541], "eq_miss": 438, "ewm_mean": [439, 1028], "ewm_std": [440, 1029], "ewm_var": [441, 1030], "exclud": [442, 727], "exp": [443, 1031], "extend_const": [445, 1034], "flatten": 450, "floor": [451, 1039], "floordiv": 452, "forward_fil": 453, "from_json": 454, "gather": [455, 500, 1040, 1089], "ge": 457, "gt": 459, "hash": [460, 1044], "hist": [462, 1046], "implod": [463, 734, 1047], "inspect": [464, 822], "is_between": [466, 1050], "is_finit": [468, 1054], "is_first": [469, 1055], "is_first_distinct": [470, 1056], "is_in": [471, 1058], "is_infinit": [472, 1059], "is_last": [473, 1061], "is_last_distinct": [474, 1062], "is_nan": [475, 1063], "is_not": 476, "is_not_nan": [477, 1064], "is_not_nul": [478, 1065], "is_nul": [479, 1066], "keep_nam": 481, "kurtosi": [482, 1073], "le": 484, "eval": [497, 1086], "length": [506, 638, 1095, 1203], "set_differ": [513, 1102], "set_intersect": [514, 1103], "set_symmetric_differ": [515, 1104], "set_union": [516, 1105], "take": [523, 679, 1112, 1245], "to_arrai": [524, 1113], "log": [528, 1117], "log10": [529, 1118], "log1p": [530, 1119], "lower_bound": [531, 1120], "lt": 532, "map": [533, 557, 740, 829], "map_alia": 534, "map_batch": [535, 741, 830], "map_dict": [536, 1121], "map_el": [537, 1122], "meta": [541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 779], "has_multiple_output": 542, "is_regex_project": 543, "ne": [544, 564], "output_nam": 545, "pop": 546, "root_nam": 547, "tree_format": 548, "undo_alias": 549, "mod": 552, "mode": [553, 1127], "mul": 554, "name": [556, 557, 558, 559, 560, 561, 774, 782, 1130], "keep": 556, "prefix": [558, 576], "suffix": [559, 676], "to_lowercas": [560, 667, 1232], "to_uppercas": [561, 670, 1235], "nan_max": [562, 1131], "nan_min": [563, 1132], "ne_miss": 565, "neg": 566, "not_": [567, 1134], "or_": 569, "over": 570, "pct_chang": [571, 1136], "peak_max": [572, 1137], "peak_min": [573, 1138], "pow": 575, "qcut": [578, 1140], "radian": 580, "rank": [581, 1142], "reinterpret": [583, 1144], "repeat_bi": 584, "reshap": [586, 1147], "rle": [588, 1149], "rle_id": [589, 1150], "rolling_appli": [591, 1151], "rolling_map": [592, 1152], "rolling_max": [593, 1153], "rolling_mean": [594, 1154], "rolling_median": [595, 1155], "rolling_min": [596, 1156], "rolling_quantil": [597, 1157], "rolling_skew": [598, 1158], "rolling_std": [599, 1159], "rolling_sum": [600, 1160], "rolling_var": [601, 1161], "round_sig_fig": [603, 1163], "search_sort": [605, 1166], "shrink_dtyp": [609, 1174], "shuffl": [610, 1176], "sign": [611, 1177], "sin": [612, 1178], "sinh": [613, 1179], "skew": [614, 1180], "sort_bi": 617, "sqrt": [618, 1183], "str": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236], "contains_ani": [622, 1187], "extract": [629, 1194], "extract_al": [630, 1195], "extract_group": [631, 1196], "find": [632, 1197], "json_decod": [633, 1198], "json_extract": [634, 1199], "json_path_match": [635, 1200], "len_byt": [636, 1201], "len_char": [637, 1202], "ljust": [639, 1204], "lstrip": [640, 1205], "n_char": [641, 1206], "pad_end": [642, 1207], "pad_start": [643, 1208], "parse_int": [644, 1209], "replace_al": [646, 1211], "replace_mani": [647, 1212], "rjust": [649, 1214], "rstrip": [650, 1215], "split": [652, 1217], "split_exact": [653, 1218], "splitn": [654, 1219], "strip": [656, 1221], "strip_char": [657, 1222], "strip_chars_end": [658, 1223], "strip_chars_start": [659, 1224], "strip_prefix": [660, 1225], "strip_suffix": [661, 1226], "strptime": [662, 1227], "to_dat": [663, 1228], "to_datetim": [664, 1229], "to_decim": [665, 1230], "to_integ": [666, 1231], "to_tim": [668, 1233], "to_titlecas": [669, 1234], "zfill": [671, 1236], "field": [672, 1237, 1238], "json_encod": [673, 1239], "rename_field": [674, 1240], "sub": 675, "tan": [681, 1247], "tanh": [682, 1248], "to_phys": [683, 1256], "truediv": 685, "unique_count": [687, 1259], "upper_bound": [688, 1260], "value_count": [689, 1261], "where": 691, "xor": 692, "all_horizont": 694, "any_horizont": 696, "arang": 699, "arctan2": 700, "arctan2d": 701, "arg_sort_bi": 702, "arg_wher": 703, "coalesc": 704, "concat_list": 705, "concat_str": 706, "cov": 709, "cum_fold": 711, "cum_reduc": 712, "cum_sum_horizont": 714, "cumfold": 715, "cumreduc": 716, "cumsum_horizont": 718, "date_rang": [720, 721], "datetime_rang": [723, 724], "element": 726, "format": 730, "from_epoch": 731, "group": 732, "int_rang": [735, 736], "lit": 739, "ones": 750, "reduc": 752, "repeat": 753, "rolling_corr": 754, "rolling_cov": 755, "sql_expr": 757, "time_rang": [764, 765], "when": 767, "zero": 768, "categori": [772, 1269], "col": 773, "express": 777, "oper": [783, 892], "conjunct": 783, "comparison": 783, "window": 787, "convers": 788, "parallel": 788, "random": 788, "refer": 789, "input": 790, "output": 790, "feather": 790, "ipc": 790, "parquet": 790, "databas": 790, "json": 790, "avro": 790, "spreadsheet": 790, "apach": 790, "iceberg": 790, "delta": 790, "lake": 790, "dataset": 790, "cach": 794, "collect": 798, "collect_async": 799, "deseri": 803, "explain": 807, "fetch": 809, "profil": [839, 1282], "serial": 847, "show_graph": 851, "with_context": 866, "lazygroupbi": [869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885], "read": 890, "write": 890, "logic": 890, "plan": 890, "selector": 892, "import": 892, "set": [892, 1168], "is_loc": 940, "to_loc": 942, "uses_lexical_ord": 943, "chunk_length": 946, "get_chunk": 1042, "has_valid": 1043, "inner_dtyp": 1048, "is_boolean": 1051, "is_float": 1057, "is_integ": 1060, "is_numer": 1067, "is_sort": 1068, "is_tempor": 1069, "is_utf8": 1071, "new_from_index": 1133, "scatter": 1165, "series_equ": 1167, "set_at_idx": 1169, "to_fram": 1251, "view": 1263, "zip_with": 1264, "sql": 1281, "method": 1281, "assert": 1282, "primit": 1282, "strategi": 1282, "helper": 1282, "util": 1283}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"polars.DataFrame.insert_at_idx": [[197, "polars-dataframe-insert-at-idx"]], "polars.DataFrame.glimpse": [[186, "polars-dataframe-glimpse"]], "polars.DataFrame.map_rows": [[211, "polars-dataframe-map-rows"]], "polars.DataFrame.max_horizontal": [[213, "polars-dataframe-max-horizontal"]], "polars.DataFrame.dtypes": [[170, "polars-dataframe-dtypes"]], "polars.DataFrame.fill_nan": [[175, "polars-dataframe-fill-nan"]], "polars.DataFrame.melt": [[217, "polars-dataframe-melt"]], "polars.DataFrame.is_duplicated": [[200, "polars-dataframe-is-duplicated"]], "polars.DataFrame.lazy": [[209, "polars-dataframe-lazy"]], "polars.DataFrame.group_by_rolling": [[189, "polars-dataframe-group-by-rolling"]], "polars.DataFrame.groupby_rolling": [[192, "polars-dataframe-groupby-rolling"]], "polars.DataFrame.insert_column": [[198, "polars-dataframe-insert-column"]], "polars.DataFrame.groupby": [[190, "polars-dataframe-groupby"]], "polars.DataFrame.merge_sorted": [[218, "polars-dataframe-merge-sorted"]], "polars.DataFrame.iter_columns": [[204, "polars-dataframe-iter-columns"]], "polars.DataFrame.hash_rows": [[193, "polars-dataframe-hash-rows"]], "polars.DataFrame.iter_rows": [[205, "polars-dataframe-iter-rows"]], "polars.DataFrame.null_count": [[223, "polars-dataframe-null-count"]], "polars.DataFrame.hstack": [[196, "polars-dataframe-hstack"]], "polars.DataFrame.group_by": [[187, "polars-dataframe-group-by"]], "polars.DataFrame.get_column_index": [[184, "polars-dataframe-get-column-index"]], "polars.DataFrame.is_unique": [[202, "polars-dataframe-is-unique"]], "polars.DataFrame.iter_slices": [[206, "polars-dataframe-iter-slices"]], "polars.DataFrame.flags": [[179, "polars-dataframe-flags"]], "polars.DataFrame.head": [[194, "polars-dataframe-head"]], "polars.DataFrame.fold": [[180, "polars-dataframe-fold"]], "polars.DataFrame.limit": [[210, "polars-dataframe-limit"]], "polars.DataFrame.max": [[212, "polars-dataframe-max"]], "polars.DataFrame.median": [[216, "polars-dataframe-median"]], "polars.DataFrame.n_unique": [[222, "polars-dataframe-n-unique"]], "polars.DataFrame.join": [[207, "polars-dataframe-join"]], "polars.DataFrame.mean_horizontal": [[215, "polars-dataframe-mean-horizontal"]], "polars.DataFrame.get_columns": [[185, "polars-dataframe-get-columns"]], "polars.DataFrame.estimated_size": [[172, "polars-dataframe-estimated-size"]], "polars.DataFrame.group_by_dynamic": [[188, "polars-dataframe-group-by-dynamic"]], "polars.DataFrame.explode": [[173, "polars-dataframe-explode"]], "polars.DataFrame.join_asof": [[208, "polars-dataframe-join-asof"]], "polars.DataFrame.min_horizontal": [[220, "polars-dataframe-min-horizontal"]], "polars.DataFrame.interpolate": [[199, "polars-dataframe-interpolate"]], "polars.DataFrame.extend": [[174, "polars-dataframe-extend"]], "polars.DataFrame.groupby_dynamic": [[191, "polars-dataframe-groupby-dynamic"]], "polars.DataFrame.is_empty": [[201, "polars-dataframe-is-empty"]], "polars.DataFrame.equals": [[171, "polars-dataframe-equals"]], "polars.DataFrame.fill_null": [[176, "polars-dataframe-fill-null"]], "polars.DataFrame.filter": [[177, "polars-dataframe-filter"]], "polars.DataFrame.item": [[203, "polars-dataframe-item"]], "polars.DataFrame.mean": [[214, "polars-dataframe-mean"]], "polars.DataFrame.n_chunks": [[221, "polars-dataframe-n-chunks"]], "polars.DataFrame.drop_nulls": [[169, "polars-dataframe-drop-nulls"]], "polars.DataFrame.get_column": [[183, "polars-dataframe-get-column"]], "polars.DataFrame.height": [[195, "polars-dataframe-height"]], "polars.DataFrame.drop_in_place": [[168, "polars-dataframe-drop-in-place"]], "polars.DataFrame.gather_every": [[182, "polars-dataframe-gather-every"]], "polars.DataFrame.frame_equal": [[181, "polars-dataframe-frame-equal"]], "polars.DataFrame.find_idx_by_name": [[178, "polars-dataframe-find-idx-by-name"]], "polars.DataFrame.min": [[219, "polars-dataframe-min"]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[116, "polars-io-csv-batched-reader-batchedcsvreader-next-batches"]], "polars.DataFrame.clone": [[162, "polars-dataframe-clone"]], "polars.scan_csv": [[132, "polars-scan-csv"]], "polars.read_csv_batched": [[119, "polars-read-csv-batched"]], "polars.scan_iceberg": [[134, "polars-scan-iceberg"]], "polars.read_avro": [[117, "polars-read-avro"]], "polars.read_parquet_schema": [[131, "polars-read-parquet-schema"]], "polars.show_versions": [[140, "polars-show-versions"]], "polars.scan_pyarrow_dataset": [[138, "polars-scan-pyarrow-dataset"]], "polars.testing.assert_series_equal": [[143, "polars-testing-assert-series-equal"]], "polars.testing.assert_series_not_equal": [[144, "polars-testing-assert-series-not-equal"]], "polars.read_csv": [[118, "polars-read-csv"]], "polars.read_ndjson": [[128, "polars-read-ndjson"]], "polars.DataFrame.clear": [[161, "polars-dataframe-clear"]], "polars.testing.assert_frame_equal": [[141, "polars-testing-assert-frame-equal"]], "polars.DataFrame.drop": [[167, "polars-dataframe-drop"]], "polars.DataFrame.count": [[165, "polars-dataframe-count"]], "polars.read_ods": [[129, "polars-read-ods"]], "polars.testing.parametric.column": [[145, "polars-testing-parametric-column"]], "polars.read_delta": [[122, "polars-read-delta"]], "polars.testing.parametric.columns": [[146, "polars-testing-parametric-columns"]], "polars.get_index_type": [[115, "polars-get-index-type"]], "polars.set_random_seed": [[139, "polars-set-random-seed"]], "polars.testing.parametric.series": [[150, "polars-testing-parametric-series"]], "polars.from_pandas": [[112, "polars-from-pandas"]], "polars.testing.parametric.dataframes": [[148, "polars-testing-parametric-dataframes"]], "polars.read_ipc_schema": [[125, "polars-read-ipc-schema"]], "polars.read_ipc_stream": [[126, "polars-read-ipc-stream"]], "polars.DataFrame.corr": [[164, "polars-dataframe-corr"]], "polars.from_repr": [[114, "polars-from-repr"]], "polars.scan_delta": [[133, "polars-scan-delta"]], "polars.testing.parametric.load_profile": [[149, "polars-testing-parametric-load-profile"]], "polars.DataFrame.approx_n_unique": [[158, "polars-dataframe-approx-n-unique"]], "polars.testing.parametric.set_profile": [[151, "polars-testing-parametric-set-profile"]], "Config": [[154, "config"]], "Config options": [[154, "config-options"]], "Config load, save, and current state": [[154, "config-load-save-and-current-state"]], "Use as a context manager": [[154, "use-as-a-context-manager"]], "Use as a function decorator": [[154, "use-as-a-function-decorator"]], "polars.DataFrame.columns": [[163, "polars-dataframe-columns"]], "polars.scan_parquet": [[137, "polars-scan-parquet"]], "polars.scan_ndjson": [[136, "polars-scan-ndjson"]], "Aggregation": [[155, "aggregation"], [791, "aggregation"], [893, "aggregation"], [307, "aggregation"]], "polars.testing.parametric.create_list_strategy": [[147, "polars-testing-parametric-create-list-strategy"]], "polars.threadpool_size": [[152, "polars-threadpool-size"]], "polars.read_database": [[120, "polars-read-database"]], "polars.read_json": [[127, "polars-read-json"]], "polars.DataFrame.__dataframe__": [[156, "polars-dataframe-dataframe"]], "polars.DataFrame.apply": [[157, "polars-dataframe-apply"]], "polars.read_excel": [[123, "polars-read-excel"]], "polars.DataFrame.cast": [[160, "polars-dataframe-cast"]], "polars.read_parquet": [[130, "polars-read-parquet"]], "polars.testing.assert_frame_not_equal": [[142, "polars-testing-assert-frame-not-equal"]], "polars.using_string_cache": [[153, "polars-using-string-cache"]], "polars.read_ipc": [[124, "polars-read-ipc"]], "polars.read_database_uri": [[121, "polars-read-database-uri"]], "polars.scan_ipc": [[135, "polars-scan-ipc"]], "polars.from_records": [[113, "polars-from-records"]], "polars.DataFrame.bottom_k": [[159, "polars-dataframe-bottom-k"]], "polars.DataFrame.describe": [[166, "polars-dataframe-describe"]], "polars.Series.str.json_decode": [[1198, "polars-series-str-json-decode"]], "polars.Series.str.contains_any": [[1187, "polars-series-str-contains-any"]], "polars.Series.str.count_matches": [[1189, "polars-series-str-count-matches"]], "polars.Series.str.rjust": [[1214, "polars-series-str-rjust"]], "polars.Series.std": [[1184, "polars-series-std"]], "polars.Series.str.len_bytes": [[1201, "polars-series-str-len-bytes"]], "polars.Series.str.contains": [[1186, "polars-series-str-contains"]], "polars.Series.str.len_chars": [[1202, "polars-series-str-len-chars"]], "polars.Series.str.parse_int": [[1209, "polars-series-str-parse-int"]], "polars.Series.shuffle": [[1176, "polars-series-shuffle"]], "polars.Series.str.concat": [[1185, "polars-series-str-concat"]], "polars.Series.str.strip": [[1221, "polars-series-str-strip"]], "polars.Series.str.strptime": [[1227, "polars-series-str-strptime"]], "polars.Series.sign": [[1177, "polars-series-sign"]], "polars.Series.str.lstrip": [[1205, "polars-series-str-lstrip"]], "polars.Series.str.replace_all": [[1211, "polars-series-str-replace-all"]], "polars.Series.str.to_integer": [[1231, "polars-series-str-to-integer"]], "polars.Series.str.n_chars": [[1206, "polars-series-str-n-chars"]], "polars.Series.str.to_decimal": [[1230, "polars-series-str-to-decimal"]], "polars.Series.str.starts_with": [[1220, "polars-series-str-starts-with"]], "polars.Series.str.extract": [[1194, "polars-series-str-extract"]], "polars.Series.str.encode": [[1191, "polars-series-str-encode"]], "polars.Series.str.strip_chars_end": [[1223, "polars-series-str-strip-chars-end"]], "polars.Series.str.replace": [[1210, "polars-series-str-replace"]], "polars.Series.sin": [[1178, "polars-series-sin"]], "polars.Series.str.split_exact": [[1218, "polars-series-str-split-exact"]], "polars.Series.str.explode": [[1193, "polars-series-str-explode"]], "polars.Series.str.strip_chars_start": [[1224, "polars-series-str-strip-chars-start"]], "polars.Series.slice": [[1181, "polars-series-slice"]], "polars.Series.sort": [[1182, "polars-series-sort"]], "polars.Series.str.strip_prefix": [[1225, "polars-series-str-strip-prefix"]], "polars.Series.str.reverse": [[1213, "polars-series-str-reverse"]], "polars.Series.str.pad_end": [[1207, "polars-series-str-pad-end"]], "polars.Series.str.json_path_match": [[1200, "polars-series-str-json-path-match"]], "polars.Series.str.replace_many": [[1212, "polars-series-str-replace-many"]], "polars.Series.str.lengths": [[1203, "polars-series-str-lengths"]], "polars.Series.str.rstrip": [[1215, "polars-series-str-rstrip"]], "polars.Series.sqrt": [[1183, "polars-series-sqrt"]], "polars.Series.str.count_match": [[1188, "polars-series-str-count-match"]], "polars.Series.str.decode": [[1190, "polars-series-str-decode"]], "polars.Series.str.extract_groups": [[1196, "polars-series-str-extract-groups"]], "polars.Series.str.splitn": [[1219, "polars-series-str-splitn"]], "polars.Series.str.strip_chars": [[1222, "polars-series-str-strip-chars"]], "polars.Series.sinh": [[1179, "polars-series-sinh"]], "polars.Series.str.extract_all": [[1195, "polars-series-str-extract-all"]], "polars.Series.str.json_extract": [[1199, "polars-series-str-json-extract"]], "polars.Series.str.ljust": [[1204, "polars-series-str-ljust"]], "polars.Series.str.ends_with": [[1192, "polars-series-str-ends-with"]], "polars.Series.str.find": [[1197, "polars-series-str-find"]], "polars.Series.str.split": [[1217, "polars-series-str-split"]], "polars.Series.str.pad_start": [[1208, "polars-series-str-pad-start"]], "polars.Series.skew": [[1180, "polars-series-skew"]], "polars.Series.str.slice": [[1216, "polars-series-str-slice"]], "polars.Series.str.to_datetime": [[1229, "polars-series-str-to-datetime"]], "polars.Series.str.to_date": [[1228, "polars-series-str-to-date"]], "polars.Series.str.strip_suffix": [[1226, "polars-series-str-strip-suffix"]], "polars.exceptions.NoRowsReturnedError": [[98, "polars-exceptions-norowsreturnederror"]], "polars.exceptions.RowsError": [[101, "polars-exceptions-rowserror"]], "polars.LazyFrame.sink_csv": [[58, "polars-lazyframe-sink-csv"]], "polars.align_frames": [[81, "polars-align-frames"]], "polars.SQLContext.unregister": [[70, "polars-sqlcontext-unregister"]], "polars.exceptions.SchemaFieldNotFoundError": [[103, "polars-exceptions-schemafieldnotfounderror"]], "polars.exceptions.StructFieldNotFoundError": [[105, "polars-exceptions-structfieldnotfounderror"]], "polars.collect_all_async": [[88, "polars-collect-all-async"]], "polars.UInt64": [[77, "polars-uint64"]], "polars.SQLContext.execute": [[65, "polars-sqlcontext-execute"]], "polars.api.register_dataframe_namespace": [[82, "polars-api-register-dataframe-namespace"]], "polars.exceptions.SchemaError": [[102, "polars-exceptions-schemaerror"]], "polars.Int8": [[57, "polars-int8"]], "polars.exceptions.ArrowError": [[92, "polars-exceptions-arrowerror"]], "polars.exceptions.ShapeError": [[104, "polars-exceptions-shapeerror"]], "polars.LazyFrame.sink_ipc": [[59, "polars-lazyframe-sink-ipc"]], "polars.api.register_series_namespace": [[85, "polars-api-register-series-namespace"]], "polars.Utf8": [[80, "polars-utf8"]], "polars.collect_all": [[87, "polars-collect-all"]], "polars.from_dataframe": [[108, "polars-from-dataframe"]], "polars.SQLContext.register_many": [[68, "polars-sqlcontext-register-many"]], "polars.Object": [[64, "polars-object"]], "polars.List": [[62, "polars-list"]], "polars.LazyFrame.sink_ndjson": [[60, "polars-lazyframe-sink-ndjson"]], "polars.UInt32": [[76, "polars-uint32"]], "polars.Null": [[63, "polars-null"]], "polars.api.register_lazyframe_namespace": [[84, "polars-api-register-lazyframe-namespace"]], "polars.StringCache": [[72, "polars-stringcache"]], "polars.exceptions.NoDataError": [[97, "polars-exceptions-nodataerror"]], "polars.from_dicts": [[110, "polars-from-dicts"]], "polars.LazyFrame.sink_parquet": [[61, "polars-lazyframe-sink-parquet"]], "polars.exceptions.InvalidOperationError": [[96, "polars-exceptions-invalidoperationerror"]], "polars.SQLContext.tables": [[69, "polars-sqlcontext-tables"]], "polars.exceptions.TooManyRowsReturnedError": [[106, "polars-exceptions-toomanyrowsreturnederror"]], "polars.UInt16": [[75, "polars-uint16"]], "polars.exceptions.ColumnNotFoundError": [[93, "polars-exceptions-columnnotfounderror"]], "polars.concat": [[89, "polars-concat"]], "polars.String": [[71, "polars-string"]], "polars.disable_string_cache": [[90, "polars-disable-string-cache"]], "polars.exceptions.PolarsPanicError": [[100, "polars-exceptions-polarspanicerror"]], "polars.Time": [[74, "polars-time"]], "polars.api.register_expr_namespace": [[83, "polars-api-register-expr-namespace"]], "polars.enable_string_cache": [[91, "polars-enable-string-cache"]], "polars.exceptions.ComputeError": [[94, "polars-exceptions-computeerror"]], "polars.SQLContext.register_globals": [[67, "polars-sqlcontext-register-globals"]], "polars.SQLContext.register": [[66, "polars-sqlcontext-register"]], "polars.Int64": [[56, "polars-int64"]], "polars.build_info": [[86, "polars-build-info"]], "polars.exceptions.PolarsError": [[99, "polars-exceptions-polarserror"]], "polars.from_numpy": [[111, "polars-from-numpy"]], "polars.exceptions.DuplicateError": [[95, "polars-exceptions-duplicateerror"]], "polars.from_arrow": [[107, "polars-from-arrow"]], "polars.from_dict": [[109, "polars-from-dict"]], "polars.UInt8": [[78, "polars-uint8"]], "polars.Struct": [[73, "polars-struct"]], "polars.Unknown": [[79, "polars-unknown"]], "polars.Config.restore_defaults": [[9, "polars-config-restore-defaults"]], "polars.Config.set_tbl_hide_dtype_separator": [[29, "polars-config-set-tbl-hide-dtype-separator"]], "polars.Float32": [[52, "polars-float32"]], "polars.DataFrame.write_database": [[38, "polars-dataframe-write-database"]], "polars.Config.set_float_precision": [[15, "polars-config-set-float-precision"]], "polars.Config.set_tbl_formatting": [[25, "polars-config-set-tbl-formatting"]], "polars.Config.set_tbl_cell_alignment": [[20, "polars-config-set-tbl-cell-alignment"]], "polars.Config.set_ascii_tables": [[12, "polars-config-set-ascii-tables"]], "polars.Config.set_tbl_dataframe_shape_below": [[24, "polars-config-set-tbl-dataframe-shape-below"]], "polars.Config.set_fmt_float": [[16, "polars-config-set-fmt-float"]], "polars.DataFrame.write_ipc_stream": [[42, "polars-dataframe-write-ipc-stream"]], "polars.Config.set_fmt_str_lengths": [[17, "polars-config-set-fmt-str-lengths"]], "polars.Config.state": [[35, "polars-config-state"]], "polars.Decimal": [[49, "polars-decimal"]], "polars.Date": [[47, "polars-date"]], "polars.DataFrame.write_csv": [[37, "polars-dataframe-write-csv"]], "polars.Config.set_trim_decimal_zeros": [[33, "polars-config-set-trim-decimal-zeros"]], "polars.Config.set_decimal_separator": [[14, "polars-config-set-decimal-separator"]], "polars.Config.set_tbl_cell_numeric_alignment": [[21, "polars-config-set-tbl-cell-numeric-alignment"]], "polars.Config.set_tbl_hide_column_names": [[27, "polars-config-set-tbl-hide-column-names"]], "polars.Int32": [[55, "polars-int32"]], "polars.Config.set_streaming_chunk_size": [[19, "polars-config-set-streaming-chunk-size"]], "polars.DataFrame.write_json": [[43, "polars-dataframe-write-json"]], "polars.Config.save": [[10, "polars-config-save"]], "polars.DataFrame.write_parquet": [[45, "polars-dataframe-write-parquet"]], "polars.Config.load_from_file": [[8, "polars-config-load-from-file"]], "polars.Config.activate_decimals": [[6, "polars-config-activate-decimals"]], "polars.Config.set_fmt_table_cell_list_len": [[18, "polars-config-set-fmt-table-cell-list-len"]], "polars.Duration": [[50, "polars-duration"]], "polars.Array": [[2, "polars-array"]], "polars.DataFrame.write_avro": [[36, "polars-dataframe-write-avro"]], "polars.Config.set_verbose": [[34, "polars-config-set-verbose"]], "polars.Config.set_tbl_cols": [[22, "polars-config-set-tbl-cols"]], "polars.DataFrame.write_ndjson": [[44, "polars-dataframe-write-ndjson"]], "polars.Config.save_to_file": [[11, "polars-config-save-to-file"]], "polars.Enum": [[51, "polars-enum"]], "polars.Int16": [[54, "polars-int16"]], "Extending the API": [[1, "extending-the-api"]], "Providing new functionality": [[1, "providing-new-functionality"]], "Available registrations": [[1, "available-registrations"]], "Examples": [[1, "examples"], [892, "examples"], [1277, "examples"], [1282, "examples"], [304, "examples"]], "polars.Config.set_thousands_separator": [[32, "polars-config-set-thousands-separator"]], "polars.Binary": [[3, "polars-binary"]], "polars.DataFrame.write_excel": [[40, "polars-dataframe-write-excel"]], "polars.Float64": [[53, "polars-float64"]], "Index": [[0, "index"]], "polars.Config.load": [[7, "polars-config-load"]], "polars.DataFrame.write_ipc": [[41, "polars-dataframe-write-ipc"]], "polars.DataFrame.write_delta": [[39, "polars-dataframe-write-delta"]], "polars.DataType": [[46, "polars-datatype"]], "polars.Config.set_tbl_hide_dataframe_shape": [[28, "polars-config-set-tbl-hide-dataframe-shape"]], "polars.Config.set_tbl_width_chars": [[31, "polars-config-set-tbl-width-chars"]], "polars.Config.set_tbl_column_data_type_inline": [[23, "polars-config-set-tbl-column-data-type-inline"]], "polars.Datetime": [[48, "polars-datetime"]], "polars.Config.set_tbl_rows": [[30, "polars-config-set-tbl-rows"]], "polars.Config.set_auto_structify": [[13, "polars-config-set-auto-structify"]], "polars.Boolean": [[4, "polars-boolean"]], "polars.Categorical": [[5, "polars-categorical"]], "polars.Config.set_tbl_hide_column_data_types": [[26, "polars-config-set-tbl-hide-column-data-types"]], "polars.Series.list.eval": [[1086, "polars-series-list-eval"]], "polars.Series.log": [[1117, "polars-series-log"]], "polars.Series.is_utf8": [[1071, "polars-series-is-utf8"]], "polars.Series.is_sorted": [[1068, "polars-series-is-sorted"]], "polars.Series.limit": [[1075, "polars-series-limit"]], "polars.Series.is_not_nan": [[1064, "polars-series-is-not-nan"]], "polars.Series.list.head": [[1091, "polars-series-list-head"]], "polars.Series.list.sample": [[1101, "polars-series-list-sample"]], "polars.Series.list.last": [[1093, "polars-series-list-last"]], "polars.Series.list.lengths": [[1095, "polars-series-list-lengths"]], "polars.Series.list.reverse": [[1100, "polars-series-list-reverse"]], "polars.Series.list.slice": [[1107, "polars-series-list-slice"]], "polars.Series.len": [[1074, "polars-series-len"]], "polars.Series.list.min": [[1099, "polars-series-list-min"]], "polars.Series.list.mean": [[1097, "polars-series-list-mean"]], "polars.Series.kurtosis": [[1073, "polars-series-kurtosis"]], "polars.Series.list.diff": [[1084, "polars-series-list-diff"]], "polars.Series.is_numeric": [[1067, "polars-series-is-numeric"]], "polars.Series.is_temporal": [[1069, "polars-series-is-temporal"]], "polars.Series.list.take": [[1112, "polars-series-list-take"]], "polars.Series.log10": [[1118, "polars-series-log10"]], "polars.Series.list.any": [[1077, "polars-series-list-any"]], "polars.Series.list.to_array": [[1113, "polars-series-list-to-array"]], "polars.Series.list.join": [[1092, "polars-series-list-join"]], "polars.Series.list.set_union": [[1105, "polars-series-list-set-union"]], "polars.Series.list.count_match": [[1082, "polars-series-list-count-match"]], "polars.Series.list.set_intersection": [[1103, "polars-series-list-set-intersection"]], "polars.Series.list.set_symmetric_difference": [[1104, "polars-series-list-set-symmetric-difference"]], "polars.Series.list.count_matches": [[1083, "polars-series-list-count-matches"]], "polars.Series.list.tail": [[1111, "polars-series-list-tail"]], "polars.Series.list.var": [[1116, "polars-series-list-var"]], "polars.Series.list.contains": [[1081, "polars-series-list-contains"]], "polars.Series.list.arg_max": [[1078, "polars-series-list-arg-max"]], "polars.Series.list.explode": [[1087, "polars-series-list-explode"]], "polars.Series.is_unique": [[1070, "polars-series-is-unique"]], "polars.Series.is_null": [[1066, "polars-series-is-null"]], "polars.Series.list.median": [[1098, "polars-series-list-median"]], "polars.Series.list.first": [[1088, "polars-series-list-first"]], "polars.Series.list.set_difference": [[1102, "polars-series-list-set-difference"]], "polars.Series.list.sort": [[1108, "polars-series-list-sort"]], "polars.Series.list.std": [[1109, "polars-series-list-std"]], "polars.Series.list.unique": [[1115, "polars-series-list-unique"]], "polars.Series.list.len": [[1094, "polars-series-list-len"]], "polars.Series.list.gather": [[1089, "polars-series-list-gather"]], "polars.Series.log1p": [[1119, "polars-series-log1p"]], "polars.Series.list.sum": [[1110, "polars-series-list-sum"]], "polars.Series.list.arg_min": [[1079, "polars-series-list-arg-min"]], "polars.Series.list.to_struct": [[1114, "polars-series-list-to-struct"]], "polars.Series.list.drop_nulls": [[1085, "polars-series-list-drop-nulls"]], "polars.Series.list.max": [[1096, "polars-series-list-max"]], "polars.Series.list.shift": [[1106, "polars-series-list-shift"]], "polars.Series.list.get": [[1090, "polars-series-list-get"]], "polars.Series.item": [[1072, "polars-series-item"]], "polars.Series.is_not_null": [[1065, "polars-series-is-not-null"]], "polars.Series.list.all": [[1076, "polars-series-list-all"]], "polars.Series.list.concat": [[1080, "polars-series-list-concat"]], "polars.Series.pct_change": [[1136, "polars-series-pct-change"]], "polars.Series.mean": [[1124, "polars-series-mean"]], "polars.Series.rechunk": [[1143, "polars-series-rechunk"]], "polars.Series.replace": [[1146, "polars-series-replace"]], "polars.Series.rolling_std": [[1159, "polars-series-rolling-std"]], "polars.Series.rolling_sum": [[1160, "polars-series-rolling-sum"]], "polars.Series.round_sig_figs": [[1163, "polars-series-round-sig-figs"]], "polars.Series.set": [[1168, "polars-series-set"]], "polars.Series.sample": [[1164, "polars-series-sample"]], "polars.Series.shrink_dtype": [[1174, "polars-series-shrink-dtype"]], "polars.Series.shrink_to_fit": [[1175, "polars-series-shrink-to-fit"]], "polars.Series.peak_min": [[1138, "polars-series-peak-min"]], "polars.Series.rolling_apply": [[1151, "polars-series-rolling-apply"]], "polars.Series.rolling_quantile": [[1157, "polars-series-rolling-quantile"]], "polars.Series.qcut": [[1140, "polars-series-qcut"]], "polars.Series.quantile": [[1141, "polars-series-quantile"]], "polars.Series.rank": [[1142, "polars-series-rank"]], "polars.Series.map_dict": [[1121, "polars-series-map-dict"]], "polars.Series.n_chunks": [[1128, "polars-series-n-chunks"]], "polars.Series.rolling_median": [[1155, "polars-series-rolling-median"]], "polars.Series.lower_bound": [[1120, "polars-series-lower-bound"]], "polars.Series.rle": [[1149, "polars-series-rle"]], "polars.Series.rolling_mean": [[1154, "polars-series-rolling-mean"]], "polars.Series.reinterpret": [[1144, "polars-series-reinterpret"]], "polars.Series.rle_id": [[1150, "polars-series-rle-id"]], "polars.Series.nan_min": [[1132, "polars-series-nan-min"]], "polars.Series.median": [[1125, "polars-series-median"]], "polars.Series.rolling_var": [[1161, "polars-series-rolling-var"]], "polars.Series.null_count": [[1135, "polars-series-null-count"]], "polars.Series.set_sorted": [[1170, "polars-series-set-sorted"]], "polars.Series.shape": [[1171, "polars-series-shape"]], "polars.Series.rolling_max": [[1153, "polars-series-rolling-max"]], "polars.Series.min": [[1126, "polars-series-min"]], "polars.Series.search_sorted": [[1166, "polars-series-search-sorted"]], "polars.Series.shift": [[1172, "polars-series-shift"]], "polars.Series.not_": [[1134, "polars-series-not"]], "polars.Series.series_equal": [[1167, "polars-series-series-equal"]], "polars.Series.rename": [[1145, "polars-series-rename"]], "polars.Series.max": [[1123, "polars-series-max"]], "polars.Series.reshape": [[1147, "polars-series-reshape"]], "polars.Series.rolling_min": [[1156, "polars-series-rolling-min"]], "polars.Series.product": [[1139, "polars-series-product"]], "polars.Series.rolling_skew": [[1158, "polars-series-rolling-skew"]], "polars.Series.n_unique": [[1129, "polars-series-n-unique"]], "polars.Series.scatter": [[1165, "polars-series-scatter"]], "polars.Series.mode": [[1127, "polars-series-mode"]], "polars.Series.map_elements": [[1122, "polars-series-map-elements"]], "polars.Series.new_from_index": [[1133, "polars-series-new-from-index"]], "polars.Series.set_at_idx": [[1169, "polars-series-set-at-idx"]], "polars.Series.shift_and_fill": [[1173, "polars-series-shift-and-fill"]], "polars.Series.name": [[1130, "polars-series-name"]], "polars.Series.reverse": [[1148, "polars-series-reverse"]], "polars.Series.nan_max": [[1131, "polars-series-nan-max"]], "polars.Series.peak_max": [[1137, "polars-series-peak-max"]], "polars.Series.round": [[1162, "polars-series-round"]], "polars.Series.rolling_map": [[1152, "polars-series-rolling-map"]], "polars.Series.is_empty": [[1053, "polars-series-is-empty"]], "polars.Series.is_last_distinct": [[1062, "polars-series-is-last-distinct"]], "polars.Series.explode": [[1032, "polars-series-explode"]], "polars.Series.dt.with_time_unit": [[1022, "polars-series-dt-with-time-unit"]], "polars.Series.dt.total_days": [[1012, "polars-series-dt-total-days"]], "polars.Series.dt.total_minutes": [[1016, "polars-series-dt-total-minutes"]], "polars.Series.is_duplicated": [[1052, "polars-series-is-duplicated"]], "polars.Series.is_nan": [[1063, "polars-series-is-nan"]], "polars.Series.has_validity": [[1043, "polars-series-has-validity"]], "polars.Series.hash": [[1044, "polars-series-hash"]], "polars.Series.hist": [[1046, "polars-series-hist"]], "polars.Series.gather": [[1040, "polars-series-gather"]], "polars.Series.dt.time": [[1009, "polars-series-dt-time"]], "polars.Series.implode": [[1047, "polars-series-implode"]], "polars.Series.ewm_std": [[1029, "polars-series-ewm-std"]], "polars.Series.floor": [[1039, "polars-series-floor"]], "polars.Series.dt.year": [[1023, "polars-series-dt-year"]], "polars.Series.exp": [[1031, "polars-series-exp"]], "polars.Series.dt.total_seconds": [[1018, "polars-series-dt-total-seconds"]], "polars.Series.is_between": [[1050, "polars-series-is-between"]], "polars.Series.interpolate": [[1049, "polars-series-interpolate"]], "polars.Series.is_last": [[1061, "polars-series-is-last"]], "polars.Series.fill_nan": [[1035, "polars-series-fill-nan"]], "polars.Series.is_boolean": [[1051, "polars-series-is-boolean"]], "polars.Series.dt.truncate": [[1019, "polars-series-dt-truncate"]], "polars.Series.dt.timestamp": [[1010, "polars-series-dt-timestamp"]], "polars.Series.is_integer": [[1060, "polars-series-is-integer"]], "polars.Series.inner_dtype": [[1048, "polars-series-inner-dtype"]], "polars.Series.is_infinite": [[1059, "polars-series-is-infinite"]], "polars.Series.estimated_size": [[1027, "polars-series-estimated-size"]], "polars.Series.is_first_distinct": [[1056, "polars-series-is-first-distinct"]], "polars.Series.ewm_var": [[1030, "polars-series-ewm-var"]], "polars.Series.is_finite": [[1054, "polars-series-is-finite"]], "polars.Series.is_float": [[1057, "polars-series-is-float"]], "polars.Series.dt.weekday": [[1021, "polars-series-dt-weekday"]], "polars.Series.filter": [[1037, "polars-series-filter"]], "polars.Series.is_first": [[1055, "polars-series-is-first"]], "polars.Series.dt.week": [[1020, "polars-series-dt-week"]], "polars.Series.dt.total_microseconds": [[1014, "polars-series-dt-total-microseconds"]], "polars.Series.dt.strftime": [[1008, "polars-series-dt-strftime"]], "polars.Series.entropy": [[1025, "polars-series-entropy"]], "polars.Series.flags": [[1038, "polars-series-flags"]], "polars.Series.dt.total_milliseconds": [[1015, "polars-series-dt-total-milliseconds"]], "polars.Series.dt.to_string": [[1011, "polars-series-dt-to-string"]], "polars.Series.dt.total_hours": [[1013, "polars-series-dt-total-hours"]], "polars.Series.dtype": [[1024, "polars-series-dtype"]], "polars.Series.ewm_mean": [[1028, "polars-series-ewm-mean"]], "polars.Series.get_chunks": [[1042, "polars-series-get-chunks"]], "polars.Series.head": [[1045, "polars-series-head"]], "polars.Series.fill_null": [[1036, "polars-series-fill-null"]], "polars.Series.equals": [[1026, "polars-series-equals"]], "polars.Series.is_in": [[1058, "polars-series-is-in"]], "polars.Series.dt.total_nanoseconds": [[1017, "polars-series-dt-total-nanoseconds"]], "polars.Series.gather_every": [[1041, "polars-series-gather-every"]], "polars.Series.extend": [[1033, "polars-series-extend"]], "polars.Series.extend_constant": [[1034, "polars-series-extend-constant"]], "polars.Series.arr.last": [[921, "polars-series-arr-last"]], "polars.Series.cat.to_local": [[942, "polars-series-cat-to-local"]], "polars.Series.apply": [[899, "polars-series-apply"]], "polars.Series.cat.is_local": [[940, "polars-series-cat-is-local"]], "polars.Series.clip_max": [[949, "polars-series-clip-max"]], "polars.Series.arr.median": [[923, "polars-series-arr-median"]], "polars.Series.arcsinh": [[903, "polars-series-arcsinh"]], "polars.Series.arctanh": [[905, "polars-series-arctanh"]], "polars.Series.cat.uses_lexical_ordering": [[943, "polars-series-cat-uses-lexical-ordering"]], "polars.Series.bin.decode": [[933, "polars-series-bin-decode"]], "polars.Series.arccosh": [[901, "polars-series-arccosh"]], "polars.Series.arr.arg_min": [[914, "polars-series-arr-arg-min"]], "polars.Series.clip_min": [[950, "polars-series-clip-min"]], "polars.Series.arr.std": [[927, "polars-series-arr-std"]], "polars.Series.ceil": [[945, "polars-series-ceil"]], "polars.Series.any": [[897, "polars-series-any"]], "polars.Series.arcsin": [[902, "polars-series-arcsin"]], "polars.Series.arr.contains": [[915, "polars-series-arr-contains"]], "polars.Series.arr.min": [[924, "polars-series-arr-min"]], "polars.Series.arr.explode": [[917, "polars-series-arr-explode"]], "polars.Series.append": [[898, "polars-series-append"]], "polars.Series.cbrt": [[944, "polars-series-cbrt"]], "polars.Series.arr.join": [[920, "polars-series-arr-join"]], "polars.Series.arccos": [[900, "polars-series-arccos"]], "polars.Series.arg_min": [[907, "polars-series-arg-min"]], "polars.Series.arg_unique": [[910, "polars-series-arg-unique"]], "polars.Series.clone": [[951, "polars-series-clone"]], "polars.Series.arctan": [[904, "polars-series-arctan"]], "polars.Series.arr.first": [[918, "polars-series-arr-first"]], "polars.Series.arr.unique": [[930, "polars-series-arr-unique"]], "polars.Series.arr.any": [[912, "polars-series-arr-any"]], "polars.Series.arr.count_matches": [[916, "polars-series-arr-count-matches"]], "polars.Series.arr.get": [[919, "polars-series-arr-get"]], "polars.Series.arg_true": [[909, "polars-series-arg-true"]], "polars.Series.all": [[896, "polars-series-all"]], "polars.Series.bin.starts_with": [[936, "polars-series-bin-starts-with"]], "polars.Series.arr.sort": [[926, "polars-series-arr-sort"]], "polars.Series.arr.all": [[911, "polars-series-arr-all"]], "polars.Series.arr.max": [[922, "polars-series-arr-max"]], "polars.Series.bin.ends_with": [[935, "polars-series-bin-ends-with"]], "polars.Series.arr.sum": [[928, "polars-series-arr-sum"]], "polars.Series.cat.get_categories": [[939, "polars-series-cat-get-categories"]], "polars.Series.bin.contains": [[932, "polars-series-bin-contains"]], "polars.Series.arg_max": [[906, "polars-series-arg-max"]], "polars.Series.clear": [[947, "polars-series-clear"]], "polars.Series.arr.to_list": [[929, "polars-series-arr-to-list"]], "polars.Series.bottom_k": [[937, "polars-series-bottom-k"]], "polars.Series.cat.set_ordering": [[941, "polars-series-cat-set-ordering"]], "polars.Series.arg_sort": [[908, "polars-series-arg-sort"]], "polars.Series.arr.var": [[931, "polars-series-arr-var"]], "polars.Series.bin.encode": [[934, "polars-series-bin-encode"]], "polars.Series.clip": [[948, "polars-series-clip"]], "polars.Series.arr.arg_max": [[913, "polars-series-arr-arg-max"]], "polars.Series.chunk_lengths": [[946, "polars-series-chunk-lengths"]], "polars.Series.arr.reverse": [[925, "polars-series-arr-reverse"]], "polars.Series.cast": [[938, "polars-series-cast"]], "polars.Series.dt.days": [[978, "polars-series-dt-days"]], "polars.Series.dt.dst_offset": [[979, "polars-series-dt-dst-offset"]], "polars.Series.dt.microsecond": [[988, "polars-series-dt-microsecond"]], "polars.Series.dt.datetime": [[976, "polars-series-dt-datetime"]], "polars.Series.dt.offset_by": [[1001, "polars-series-dt-offset-by"]], "polars.Series.dt.hours": [[982, "polars-series-dt-hours"]], "polars.Series.dt.quarter": [[1003, "polars-series-dt-quarter"]], "polars.Series.describe": [[965, "polars-series-describe"]], "polars.Series.dt.seconds": [[1007, "polars-series-dt-seconds"]], "polars.Series.dt.century": [[972, "polars-series-dt-century"]], "polars.Series.cumulative_eval": [[963, "polars-series-cumulative-eval"]], "polars.Series.dt.iso_year": [[984, "polars-series-dt-iso-year"]], "polars.Series.dt.month_end": [[997, "polars-series-dt-month-end"]], "polars.Series.dt.max": [[985, "polars-series-dt-max"]], "polars.Series.dt.median": [[987, "polars-series-dt-median"]], "polars.Series.cot": [[954, "polars-series-cot"]], "polars.Series.dt.second": [[1006, "polars-series-dt-second"]], "polars.Series.cum_min": [[956, "polars-series-cum-min"]], "polars.Series.dt.month_start": [[998, "polars-series-dt-month-start"]], "polars.Series.cum_sum": [[958, "polars-series-cum-sum"]], "polars.Series.dt.milliseconds": [[992, "polars-series-dt-milliseconds"]], "polars.Series.dt.nanosecond": [[999, "polars-series-dt-nanosecond"]], "polars.Series.dt.epoch": [[980, "polars-series-dt-epoch"]], "polars.Series.dt.hour": [[981, "polars-series-dt-hour"]], "polars.Series.cum_prod": [[957, "polars-series-cum-prod"]], "polars.Series.dt.date": [[975, "polars-series-dt-date"]], "polars.Series.dt.cast_time_unit": [[971, "polars-series-dt-cast-time-unit"]], "polars.Series.dt.ordinal_day": [[1002, "polars-series-dt-ordinal-day"]], "polars.Series.diff": [[966, "polars-series-diff"]], "polars.Series.dt.microseconds": [[989, "polars-series-dt-microseconds"]], "polars.Series.cos": [[952, "polars-series-cos"]], "polars.Series.drop_nulls": [[969, "polars-series-drop-nulls"]], "polars.Series.dt.min": [[993, "polars-series-dt-min"]], "polars.Series.dt.combine": [[973, "polars-series-dt-combine"]], "polars.Series.dt.millennium": [[990, "polars-series-dt-millennium"]], "polars.Series.dot": [[967, "polars-series-dot"]], "polars.Series.dt.round": [[1005, "polars-series-dt-round"]], "polars.Series.dt.day": [[977, "polars-series-dt-day"]], "polars.Series.dt.month": [[996, "polars-series-dt-month"]], "polars.Series.cosh": [[953, "polars-series-cosh"]], "polars.Series.cummax": [[959, "polars-series-cummax"]], "polars.Series.dt.is_leap_year": [[983, "polars-series-dt-is-leap-year"]], "polars.Series.dt.mean": [[986, "polars-series-dt-mean"]], "polars.Series.dt.millisecond": [[991, "polars-series-dt-millisecond"]], "polars.Series.dt.minutes": [[995, "polars-series-dt-minutes"]], "polars.Series.cummin": [[960, "polars-series-cummin"]], "polars.Series.dt.minute": [[994, "polars-series-dt-minute"]], "polars.Series.cut": [[964, "polars-series-cut"]], "polars.Series.dt.base_utc_offset": [[970, "polars-series-dt-base-utc-offset"]], "polars.Series.dt.nanoseconds": [[1000, "polars-series-dt-nanoseconds"]], "polars.Series.dt.replace_time_zone": [[1004, "polars-series-dt-replace-time-zone"]], "polars.Series.cum_max": [[955, "polars-series-cum-max"]], "polars.Series.dt.convert_time_zone": [[974, "polars-series-dt-convert-time-zone"]], "polars.Series.drop_nans": [[968, "polars-series-drop-nans"]], "polars.Series.cumsum": [[962, "polars-series-cumsum"]], "polars.Series.cumprod": [[961, "polars-series-cumprod"]], "polars.LazyFrame.fetch": [[809, "polars-lazyframe-fetch"]], "polars.LazyFrame.explode": [[808, "polars-lazyframe-explode"]], "Window": [[787, "window"]], "Temporal": [[786, "temporal"], [1280, "temporal"], [305, "temporal"]], "polars.LazyFrame.limit": [[828, "polars-lazyframe-limit"]], "polars.LazyFrame.interpolate": [[823, "polars-lazyframe-interpolate"]], "polars.LazyFrame.fill_nan": [[810, "polars-lazyframe-fill-nan"]], "polars.LazyFrame.gather_every": [[814, "polars-lazyframe-gather-every"]], "Functions": [[788, "functions"], [892, "functions"], [776, "functions"]], "Conversion": [[788, "conversion"]], "Miscellaneous": [[788, "miscellaneous"], [890, "miscellaneous"], [1275, "miscellaneous"], [780, "miscellaneous"], [302, "miscellaneous"]], "Parallelization": [[788, "parallelization"]], "Random": [[788, "random"]], "StringCache": [[788, "stringcache"]], "polars.LazyFrame.head": [[821, "polars-lazyframe-head"]], "polars.LazyFrame.group_by": [[815, "polars-lazyframe-group-by"]], "polars.LazyFrame.cache": [[794, "polars-lazyframe-cache"]], "polars.LazyFrame.cast": [[795, "polars-lazyframe-cast"]], "polars.LazyFrame.lazy": [[827, "polars-lazyframe-lazy"]], "polars.LazyFrame.max": [[831, "polars-lazyframe-max"]], "polars.LazyFrame.clear": [[796, "polars-lazyframe-clear"]], "String": [[784, "string"], [1278, "string"]], "polars.LazyFrame.first": [[813, "polars-lazyframe-first"]], "polars.LazyFrame.merge_sorted": [[835, "polars-lazyframe-merge-sorted"]], "polars.LazyFrame.groupby_dynamic": [[819, "polars-lazyframe-groupby-dynamic"]], "polars.LazyFrame.groupby_rolling": [[820, "polars-lazyframe-groupby-rolling"]], "polars.LazyFrame.groupby": [[818, "polars-lazyframe-groupby"]], "polars.LazyFrame.profile": [[839, "polars-lazyframe-profile"]], "API reference": [[789, "api-reference"]], "polars.LazyFrame.approx_n_unique": [[792, "polars-lazyframe-approx-n-unique"]], "polars.LazyFrame.count": [[801, "polars-lazyframe-count"]], "polars.LazyFrame.group_by_rolling": [[817, "polars-lazyframe-group-by-rolling"]], "polars.LazyFrame.columns": [[800, "polars-lazyframe-columns"]], "polars.LazyFrame.null_count": [[837, "polars-lazyframe-null-count"]], "polars.LazyFrame.mean": [[832, "polars-lazyframe-mean"]], "Struct": [[785, "struct"], [1279, "struct"]], "polars.LazyFrame.collect_async": [[799, "polars-lazyframe-collect-async"]], "polars.LazyFrame.inspect": [[822, "polars-lazyframe-inspect"]], "polars.LazyFrame.join_asof": [[825, "polars-lazyframe-join-asof"]], "polars.LazyFrame.fill_null": [[811, "polars-lazyframe-fill-null"]], "polars.LazyFrame.filter": [[812, "polars-lazyframe-filter"]], "polars.LazyFrame.median": [[833, "polars-lazyframe-median"]], "polars.LazyFrame.describe": [[802, "polars-lazyframe-describe"]], "polars.LazyFrame.group_by_dynamic": [[816, "polars-lazyframe-group-by-dynamic"]], "polars.LazyFrame.map": [[829, "polars-lazyframe-map"]], "polars.LazyFrame.last": [[826, "polars-lazyframe-last"]], "polars.LazyFrame.min": [[836, "polars-lazyframe-min"]], "polars.LazyFrame.join": [[824, "polars-lazyframe-join"]], "polars.LazyFrame.bottom_k": [[793, "polars-lazyframe-bottom-k"]], "polars.LazyFrame.drop": [[804, "polars-lazyframe-drop"]], "polars.LazyFrame.dtypes": [[806, "polars-lazyframe-dtypes"]], "polars.LazyFrame.deserialize": [[803, "polars-lazyframe-deserialize"]], "Input/output": [[790, "input-output"]], "CSV": [[790, "csv"]], "Feather/ IPC": [[790, "feather-ipc"]], "Parquet": [[790, "parquet"]], "Database": [[790, "database"]], "JSON": [[790, "json"]], "AVRO": [[790, "avro"]], "Spreadsheet": [[790, "spreadsheet"]], "Apache Iceberg": [[790, "apache-iceberg"]], "Delta Lake": [[790, "delta-lake"]], "Datasets": [[790, "datasets"]], "BatchedCsvReader": [[790, "batchedcsvreader"]], "polars.LazyFrame.melt": [[834, "polars-lazyframe-melt"]], "polars.LazyFrame.pipe": [[838, "polars-lazyframe-pipe"]], "polars.LazyFrame.collect": [[798, "polars-lazyframe-collect"]], "polars.LazyFrame.map_batches": [[830, "polars-lazyframe-map-batches"]], "polars.LazyFrame.explain": [[807, "polars-lazyframe-explain"]], "polars.LazyFrame.clone": [[797, "polars-lazyframe-clone"]], "polars.LazyFrame.drop_nulls": [[805, "polars-lazyframe-drop-nulls"]], "Descriptive": [[887, "descriptive"], [1271, "descriptive"], [298, "descriptive"]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[883, "polars-lazyframe-group-by-lazygroupby-quantile"]], "Manipulation/selection": [[891, "manipulation-selection"], [1276, "manipulation-selection"], [781, "manipulation-selection"], [303, "manipulation-selection"]], "polars.lazyframe.group_by.LazyGroupBy.head": [[874, "polars-lazyframe-group-by-lazygroupby-head"]], "polars.LazyFrame.quantile": [[840, "polars-lazyframe-quantile"]], "polars.LazyFrame.select_seq": [[846, "polars-lazyframe-select-seq"]], "polars.lazyframe.group_by.LazyGroupBy.last": [[875, "polars-lazyframe-group-by-lazygroupby-last"]], "polars.LazyFrame.shift": [[849, "polars-lazyframe-shift"]], "Selectors": [[892, "selectors"]], "Importing": [[892, "importing"]], "Set operations": [[892, "set-operations"]], "polars.lazyframe.group_by.LazyGroupBy.max": [[878, "polars-lazyframe-group-by-lazygroupby-max"]], "polars.LazyFrame.rename": [[841, "polars-lazyframe-rename"]], "polars.Series.alias": [[895, "polars-series-alias"]], "polars.LazyFrame.var": [[862, "polars-lazyframe-var"]], "polars.lazyframe.group_by.LazyGroupBy.len": [[876, "polars-lazyframe-group-by-lazygroupby-len"]], "polars.LazyFrame.with_row_count": [[867, "polars-lazyframe-with-row-count"]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[882, "polars-lazyframe-group-by-lazygroupby-n-unique"]], "polars.LazyFrame.slice": [[852, "polars-lazyframe-slice"]], "polars.LazyFrame.select": [[845, "polars-lazyframe-select"]], "polars.LazyFrame.show_graph": [[851, "polars-lazyframe-show-graph"]], "polars.LazyFrame.top_k": [[858, "polars-lazyframe-top-k"]], "polars.LazyFrame.tail": [[856, "polars-lazyframe-tail"]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[885, "polars-lazyframe-group-by-lazygroupby-tail"]], "polars.LazyFrame.with_context": [[866, "polars-lazyframe-with-context"]], "polars.Series.abs": [[894, "polars-series-abs"]], "polars.lazyframe.group_by.LazyGroupBy.median": [[880, "polars-lazyframe-group-by-lazygroupby-median"]], "polars.LazyFrame.unique": [[859, "polars-lazyframe-unique"]], "polars.LazyFrame.width": [[863, "polars-lazyframe-width"]], "polars.LazyFrame.with_row_index": [[868, "polars-lazyframe-with-row-index"]], "polars.LazyFrame.with_columns_seq": [[865, "polars-lazyframe-with-columns-seq"]], "polars.LazyFrame.std": [[854, "polars-lazyframe-std"]], "polars.lazyframe.group_by.LazyGroupBy.first": [[873, "polars-lazyframe-group-by-lazygroupby-first"]], "polars.LazyFrame.shift_and_fill": [[850, "polars-lazyframe-shift-and-fill"]], "polars.lazyframe.group_by.LazyGroupBy.min": [[881, "polars-lazyframe-group-by-lazygroupby-min"]], "polars.lazyframe.group_by.LazyGroupBy.all": [[870, "polars-lazyframe-group-by-lazygroupby-all"]], "polars.LazyFrame.take_every": [[857, "polars-lazyframe-take-every"]], "polars.LazyFrame.sum": [[855, "polars-lazyframe-sum"]], "polars.LazyFrame.set_sorted": [[848, "polars-lazyframe-set-sorted"]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[877, "polars-lazyframe-group-by-lazygroupby-map-groups"]], "LazyFrame": [[889, "lazyframe"]], "polars.LazyFrame.serialize": [[847, "polars-lazyframe-serialize"]], "polars.LazyFrame.sort": [[853, "polars-lazyframe-sort"]], "polars.LazyFrame.reverse": [[842, "polars-lazyframe-reverse"]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[869, "polars-lazyframe-group-by-lazygroupby-agg"]], "GroupBy": [[888, "groupby"], [300, "groupby"]], "polars.lazyframe.group_by.LazyGroupBy.apply": [[871, "polars-lazyframe-group-by-lazygroupby-apply"]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[879, "polars-lazyframe-group-by-lazygroupby-mean"]], "polars.LazyFrame.update": [[861, "polars-lazyframe-update"]], "polars.lazyframe.group_by.LazyGroupBy.count": [[872, "polars-lazyframe-group-by-lazygroupby-count"]], "polars.LazyFrame.unnest": [[860, "polars-lazyframe-unnest"]], "polars.LazyFrame.schema": [[844, "polars-lazyframe-schema"]], "polars.LazyFrame.rolling": [[843, "polars-lazyframe-rolling"]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[884, "polars-lazyframe-group-by-lazygroupby-sum"]], "Attributes": [[886, "attributes"], [1266, "attributes"], [296, "attributes"]], "polars.LazyFrame.with_columns": [[864, "polars-lazyframe-with-columns"]], "Read/write logical plan": [[890, "read-write-logical-plan"]], "polars.Series.top_k": [[1257, "polars-series-top-k"]], "Boolean": [[1268, "boolean"], [771, "boolean"]], "polars.Series.str.to_time": [[1233, "polars-series-str-to-time"]], "polars.Series.tanh": [[1248, "polars-series-tanh"]], "polars.Series.struct.rename_fields": [[1240, "polars-series-struct-rename-fields"]], "polars.Series.unique_counts": [[1259, "polars-series-unique-counts"]], "Binary": [[1267, "binary"], [783, "binary"], [770, "binary"]], "Array": [[1265, "array"], [769, "array"]], "polars.Series.take": [[1245, "polars-series-take"]], "polars.Series.to_dummies": [[1250, "polars-series-to-dummies"]], "polars.Series.struct.schema": [[1241, "polars-series-struct-schema"]], "polars.Series.tail": [[1244, "polars-series-tail"]], "Categories": [[1269, "categories"], [772, "categories"]], "polars.Series.to_frame": [[1251, "polars-series-to-frame"]], "Export": [[1272, "export"], [299, "export"]], "polars.Series.take_every": [[1246, "polars-series-take-every"]], "polars.Series.tan": [[1247, "polars-series-tan"]], "polars.Series.str.to_titlecase": [[1234, "polars-series-str-to-titlecase"]], "polars.Series.to_init_repr": [[1252, "polars-series-to-init-repr"]], "polars.Series.var": [[1262, "polars-series-var"]], "polars.Series.to_numpy": [[1254, "polars-series-to-numpy"]], "List": [[1274, "list"], [778, "list"]], "Utils": [[1283, "utils"]], "polars.Series.sum": [[1243, "polars-series-sum"]], "Plot": [[1277, "plot"], [304, "plot"]], "polars.Series.zip_with": [[1264, "polars-series-zip-with"]], "polars.Series.to_list": [[1253, "polars-series-to-list"]], "polars.Series.value_counts": [[1261, "polars-series-value-counts"]], "polars.Series.str.to_uppercase": [[1235, "polars-series-str-to-uppercase"]], "SQL": [[1281, "sql"]], "Methods": [[1281, "methods"]], "polars.Series.str.zfill": [[1236, "polars-series-str-zfill"]], "polars.Series.to_arrow": [[1249, "polars-series-to-arrow"]], "polars.Series.struct.fields": [[1238, "polars-series-struct-fields"]], "Computation": [[1270, "computation"], [775, "computation"], [297, "computation"]], "Testing": [[1282, "testing"]], "Asserts": [[1282, "asserts"]], "Parametric testing": [[1282, "parametric-testing"]], "Polars primitives": [[1282, "polars-primitives"]], "Strategy helpers": [[1282, "strategy-helpers"]], "Profiles": [[1282, "profiles"]], "polars.Series.struct.unnest": [[1242, "polars-series-struct-unnest"]], "Series": [[1273, "series"]], "polars.Series.struct.json_encode": [[1239, "polars-series-struct-json-encode"]], "polars.Series.str.to_lowercase": [[1232, "polars-series-str-to-lowercase"]], "polars.Series.to_physical": [[1256, "polars-series-to-physical"]], "polars.Series.to_pandas": [[1255, "polars-series-to-pandas"]], "polars.Series.view": [[1263, "polars-series-view"]], "polars.Series.upper_bound": [[1260, "polars-series-upper-bound"]], "polars.Series.struct.field": [[1237, "polars-series-struct-field"]], "polars.Series.unique": [[1258, "polars-series-unique"]], "polars.arctan2d": [[701, "polars-arctan2d"]], "polars.cum_sum_horizontal": [[714, "polars-cum-sum-horizontal"]], "polars.cov": [[709, "polars-cov"]], "polars.cum_reduce": [[712, "polars-cum-reduce"]], "polars.Expr.top_k": [[684, "polars-expr-top-k"]], "polars.Expr.tan": [[681, "polars-expr-tan"]], "polars.cumsum_horizontal": [[718, "polars-cumsum-horizontal"]], "polars.Expr.struct.json_encode": [[673, "polars-expr-struct-json-encode"]], "polars.Expr.take": [[679, "polars-expr-take"]], "polars.cum_fold": [[711, "polars-cum-fold"]], "polars.Expr.tanh": [[682, "polars-expr-tanh"]], "polars.Expr.value_counts": [[689, "polars-expr-value-counts"]], "polars.datetime_range": [[723, "polars-datetime-range"]], "polars.approx_n_unique": [[698, "polars-approx-n-unique"]], "polars.Expr.sum": [[677, "polars-expr-sum"]], "polars.arg_where": [[703, "polars-arg-where"]], "polars.cumreduce": [[716, "polars-cumreduce"]], "polars.corr": [[707, "polars-corr"]], "polars.element": [[726, "polars-element"]], "polars.any_horizontal": [[696, "polars-any-horizontal"]], "polars.cumsum": [[717, "polars-cumsum"]], "polars.arctan2": [[700, "polars-arctan2"]], "polars.date_ranges": [[721, "polars-date-ranges"]], "polars.Expr.var": [[690, "polars-expr-var"]], "polars.any": [[695, "polars-any"]], "polars.Expr.unique_counts": [[687, "polars-expr-unique-counts"]], "polars.arg_sort_by": [[702, "polars-arg-sort-by"]], "polars.Expr.to_physical": [[683, "polars-expr-to-physical"]], "polars.Expr.xor": [[692, "polars-expr-xor"]], "polars.Expr.tail": [[678, "polars-expr-tail"]], "polars.coalesce": [[704, "polars-coalesce"]], "polars.date": [[719, "polars-date"]], "polars.duration": [[725, "polars-duration"]], "polars.Expr.suffix": [[676, "polars-expr-suffix"]], "polars.all_horizontal": [[694, "polars-all-horizontal"]], "polars.arange": [[699, "polars-arange"]], "polars.Expr.where": [[691, "polars-expr-where"]], "polars.Expr.unique": [[686, "polars-expr-unique"]], "polars.Expr.struct.field": [[672, "polars-expr-struct-field"]], "polars.exclude": [[727, "polars-exclude"]], "polars.Expr.struct.rename_fields": [[674, "polars-expr-struct-rename-fields"]], "polars.cum_sum": [[713, "polars-cum-sum"]], "polars.Expr.sub": [[675, "polars-expr-sub"]], "polars.all": [[693, "polars-all"]], "polars.Expr.truediv": [[685, "polars-expr-truediv"]], "polars.concat_str": [[706, "polars-concat-str"]], "polars.cumfold": [[715, "polars-cumfold"]], "polars.datetime": [[722, "polars-datetime"]], "polars.concat_list": [[705, "polars-concat-list"]], "polars.Expr.take_every": [[680, "polars-expr-take-every"]], "polars.date_range": [[720, "polars-date-range"]], "polars.datetime_ranges": [[724, "polars-datetime-ranges"]], "polars.Expr.upper_bound": [[688, "polars-expr-upper-bound"]], "polars.cum_count": [[710, "polars-cum-count"]], "polars.count": [[708, "polars-count"]], "polars.apply": [[697, "polars-apply"]], "polars.Expr.str.encode": [[626, "polars-expr-str-encode"]], "polars.Expr.str.parse_int": [[644, "polars-expr-str-parse-int"]], "polars.Expr.str.strip_chars_end": [[658, "polars-expr-str-strip-chars-end"]], "polars.Expr.str.to_decimal": [[665, "polars-expr-str-to-decimal"]], "polars.Expr.str.replace": [[645, "polars-expr-str-replace"]], "polars.Expr.str.explode": [[628, "polars-expr-str-explode"]], "polars.Expr.str.concat": [[620, "polars-expr-str-concat"]], "polars.Expr.sort": [[616, "polars-expr-sort"]], "polars.Expr.sort_by": [[617, "polars-expr-sort-by"]], "polars.Expr.str.rstrip": [[650, "polars-expr-str-rstrip"]], "polars.Expr.str.ends_with": [[627, "polars-expr-str-ends-with"]], "polars.Expr.str.reverse": [[648, "polars-expr-str-reverse"]], "polars.Expr.sqrt": [[618, "polars-expr-sqrt"]], "polars.Expr.str.strip": [[656, "polars-expr-str-strip"]], "polars.Expr.str.pad_end": [[642, "polars-expr-str-pad-end"]], "polars.Expr.str.to_datetime": [[664, "polars-expr-str-to-datetime"]], "polars.Expr.str.splitn": [[654, "polars-expr-str-splitn"]], "polars.Expr.str.decode": [[625, "polars-expr-str-decode"]], "polars.Expr.str.strptime": [[662, "polars-expr-str-strptime"]], "polars.Expr.std": [[619, "polars-expr-std"]], "polars.Expr.str.n_chars": [[641, "polars-expr-str-n-chars"]], "polars.Expr.str.to_integer": [[666, "polars-expr-str-to-integer"]], "polars.Expr.str.replace_many": [[647, "polars-expr-str-replace-many"]], "polars.Expr.str.json_extract": [[634, "polars-expr-str-json-extract"]], "polars.Expr.str.strip_chars": [[657, "polars-expr-str-strip-chars"]], "polars.Expr.str.to_time": [[668, "polars-expr-str-to-time"]], "polars.Expr.str.rjust": [[649, "polars-expr-str-rjust"]], "polars.Expr.str.len_bytes": [[636, "polars-expr-str-len-bytes"]], "polars.Expr.str.extract_all": [[630, "polars-expr-str-extract-all"]], "polars.Expr.str.strip_suffix": [[661, "polars-expr-str-strip-suffix"]], "polars.Expr.str.json_decode": [[633, "polars-expr-str-json-decode"]], "polars.Expr.str.json_path_match": [[635, "polars-expr-str-json-path-match"]], "polars.Expr.str.starts_with": [[655, "polars-expr-str-starts-with"]], "polars.Expr.str.pad_start": [[643, "polars-expr-str-pad-start"]], "polars.Expr.str.find": [[632, "polars-expr-str-find"]], "polars.Expr.str.split_exact": [[653, "polars-expr-str-split-exact"]], "polars.Expr.str.contains_any": [[622, "polars-expr-str-contains-any"]], "polars.Expr.str.slice": [[651, "polars-expr-str-slice"]], "polars.Expr.str.extract_groups": [[631, "polars-expr-str-extract-groups"]], "polars.Expr.str.to_titlecase": [[669, "polars-expr-str-to-titlecase"]], "polars.Expr.str.split": [[652, "polars-expr-str-split"]], "polars.Expr.str.strip_chars_start": [[659, "polars-expr-str-strip-chars-start"]], "polars.Expr.str.to_lowercase": [[667, "polars-expr-str-to-lowercase"]], "polars.Expr.str.lengths": [[638, "polars-expr-str-lengths"]], "polars.Expr.str.to_uppercase": [[670, "polars-expr-str-to-uppercase"]], "polars.Expr.str.contains": [[621, "polars-expr-str-contains"]], "polars.Expr.str.strip_prefix": [[660, "polars-expr-str-strip-prefix"]], "polars.Expr.str.count_matches": [[624, "polars-expr-str-count-matches"]], "polars.Expr.str.to_date": [[663, "polars-expr-str-to-date"]], "polars.Expr.str.extract": [[629, "polars-expr-str-extract"]], "polars.Expr.str.lstrip": [[640, "polars-expr-str-lstrip"]], "polars.Expr.str.count_match": [[623, "polars-expr-str-count-match"]], "polars.Expr.str.len_chars": [[637, "polars-expr-str-len-chars"]], "polars.Expr.str.zfill": [[671, "polars-expr-str-zfill"]], "polars.Expr.str.replace_all": [[646, "polars-expr-str-replace-all"]], "polars.Expr.str.ljust": [[639, "polars-expr-str-ljust"]], "polars.Expr.sample": [[604, "polars-expr-sample"]], "polars.Expr.nan_min": [[563, "polars-expr-nan-min"]], "polars.Expr.rolling": [[590, "polars-expr-rolling"]], "polars.Expr.round": [[602, "polars-expr-round"]], "polars.Expr.name.to_lowercase": [[560, "polars-expr-name-to-lowercase"]], "polars.Expr.rolling_apply": [[591, "polars-expr-rolling-apply"]], "polars.Expr.pow": [[575, "polars-expr-pow"]], "polars.Expr.replace": [[585, "polars-expr-replace"]], "polars.Expr.sin": [[612, "polars-expr-sin"]], "polars.Expr.null_count": [[568, "polars-expr-null-count"]], "polars.Expr.rolling_min": [[596, "polars-expr-rolling-min"]], "polars.Expr.search_sorted": [[605, "polars-expr-search-sorted"]], "polars.Expr.not_": [[567, "polars-expr-not"]], "polars.Expr.pct_change": [[571, "polars-expr-pct-change"]], "polars.Expr.peak_min": [[573, "polars-expr-peak-min"]], "polars.Expr.qcut": [[578, "polars-expr-qcut"]], "polars.Expr.peak_max": [[572, "polars-expr-peak-max"]], "polars.Expr.prefix": [[576, "polars-expr-prefix"]], "polars.Expr.reshape": [[586, "polars-expr-reshape"]], "polars.Expr.round_sig_figs": [[603, "polars-expr-round-sig-figs"]], "polars.Expr.reinterpret": [[583, "polars-expr-reinterpret"]], "polars.Expr.shift_and_fill": [[608, "polars-expr-shift-and-fill"]], "polars.Expr.name.to_uppercase": [[561, "polars-expr-name-to-uppercase"]], "polars.Expr.sinh": [[613, "polars-expr-sinh"]], "polars.Expr.skew": [[614, "polars-expr-skew"]], "polars.Expr.shuffle": [[610, "polars-expr-shuffle"]], "polars.Expr.radians": [[580, "polars-expr-radians"]], "polars.Expr.rank": [[581, "polars-expr-rank"]], "polars.Expr.or_": [[569, "polars-expr-or"]], "polars.Expr.product": [[577, "polars-expr-product"]], "polars.Expr.rle": [[588, "polars-expr-rle"]], "polars.Expr.rechunk": [[582, "polars-expr-rechunk"]], "polars.Expr.rolling_quantile": [[597, "polars-expr-rolling-quantile"]], "polars.Expr.rolling_sum": [[600, "polars-expr-rolling-sum"]], "polars.Expr.pipe": [[574, "polars-expr-pipe"]], "polars.Expr.shrink_dtype": [[609, "polars-expr-shrink-dtype"]], "polars.Expr.repeat_by": [[584, "polars-expr-repeat-by"]], "polars.Expr.reverse": [[587, "polars-expr-reverse"]], "polars.Expr.rolling_std": [[599, "polars-expr-rolling-std"]], "polars.Expr.rolling_median": [[595, "polars-expr-rolling-median"]], "polars.Expr.rolling_var": [[601, "polars-expr-rolling-var"]], "polars.Expr.slice": [[615, "polars-expr-slice"]], "polars.Expr.neg": [[566, "polars-expr-neg"]], "polars.Expr.over": [[570, "polars-expr-over"]], "polars.Expr.nan_max": [[562, "polars-expr-nan-max"]], "polars.Expr.ne": [[564, "polars-expr-ne"]], "polars.Expr.quantile": [[579, "polars-expr-quantile"]], "polars.Expr.rolling_skew": [[598, "polars-expr-rolling-skew"]], "polars.Expr.ne_missing": [[565, "polars-expr-ne-missing"]], "polars.Expr.set_sorted": [[606, "polars-expr-set-sorted"]], "polars.Expr.sign": [[611, "polars-expr-sign"]], "polars.Expr.shift": [[607, "polars-expr-shift"]], "polars.Expr.rolling_max": [[593, "polars-expr-rolling-max"]], "polars.Expr.rle_id": [[589, "polars-expr-rle-id"]], "polars.Expr.rolling_mean": [[594, "polars-expr-rolling-mean"]], "polars.Expr.rolling_map": [[592, "polars-expr-rolling-map"]], "polars.Expr.median": [[540, "polars-expr-median"]], "polars.Expr.meta.eq": [[541, "polars-expr-meta-eq"]], "polars.Expr.list.std": [[520, "polars-expr-list-std"]], "polars.Expr.list.min": [[510, "polars-expr-list-min"]], "polars.Expr.list.sample": [[512, "polars-expr-list-sample"]], "polars.Expr.list.slice": [[518, "polars-expr-list-slice"]], "polars.Expr.map_alias": [[534, "polars-expr-map-alias"]], "polars.Expr.list.sort": [[519, "polars-expr-list-sort"]], "polars.Expr.name.map": [[557, "polars-expr-name-map"]], "polars.Expr.log": [[528, "polars-expr-log"]], "polars.Expr.max": [[538, "polars-expr-max"]], "polars.Expr.list.to_struct": [[525, "polars-expr-list-to-struct"]], "polars.Expr.name.suffix": [[559, "polars-expr-name-suffix"]], "polars.Expr.list.mean": [[508, "polars-expr-list-mean"]], "polars.Expr.list.take": [[523, "polars-expr-list-take"]], "polars.Expr.list.var": [[527, "polars-expr-list-var"]], "polars.Expr.meta.root_names": [[547, "polars-expr-meta-root-names"]], "polars.Expr.log10": [[529, "polars-expr-log10"]], "polars.Expr.list.set_difference": [[513, "polars-expr-list-set-difference"]], "polars.Expr.lt": [[532, "polars-expr-lt"]], "polars.Expr.list.lengths": [[506, "polars-expr-list-lengths"]], "polars.Expr.meta.is_regex_projection": [[543, "polars-expr-meta-is-regex-projection"]], "polars.Expr.meta.output_name": [[545, "polars-expr-meta-output-name"]], "polars.Expr.meta.undo_aliases": [[549, "polars-expr-meta-undo-aliases"]], "polars.Expr.list.reverse": [[511, "polars-expr-list-reverse"]], "polars.Expr.meta.tree_format": [[548, "polars-expr-meta-tree-format"]], "polars.Expr.meta.has_multiple_outputs": [[542, "polars-expr-meta-has-multiple-outputs"]], "polars.Expr.mod": [[552, "polars-expr-mod"]], "polars.Expr.list.to_array": [[524, "polars-expr-list-to-array"]], "polars.Expr.list.sum": [[521, "polars-expr-list-sum"]], "polars.Expr.map_batches": [[535, "polars-expr-map-batches"]], "polars.Expr.mode": [[553, "polars-expr-mode"]], "polars.Expr.list.set_intersection": [[514, "polars-expr-list-set-intersection"]], "polars.Expr.mul": [[554, "polars-expr-mul"]], "polars.Expr.list.shift": [[517, "polars-expr-list-shift"]], "polars.Expr.meta.pop": [[546, "polars-expr-meta-pop"]], "polars.Expr.name.prefix": [[558, "polars-expr-name-prefix"]], "polars.Expr.meta.write_json": [[550, "polars-expr-meta-write-json"]], "polars.Expr.map_elements": [[537, "polars-expr-map-elements"]], "polars.Expr.list.len": [[505, "polars-expr-list-len"]], "polars.Expr.list.unique": [[526, "polars-expr-list-unique"]], "polars.Expr.mean": [[539, "polars-expr-mean"]], "polars.Expr.map": [[533, "polars-expr-map"]], "polars.Expr.n_unique": [[555, "polars-expr-n-unique"]], "polars.Expr.name.keep": [[556, "polars-expr-name-keep"]], "polars.Expr.min": [[551, "polars-expr-min"]], "polars.Expr.list.last": [[504, "polars-expr-list-last"]], "polars.Expr.list.set_union": [[516, "polars-expr-list-set-union"]], "polars.Expr.map_dict": [[536, "polars-expr-map-dict"]], "polars.Expr.lower_bound": [[531, "polars-expr-lower-bound"]], "polars.Expr.list.max": [[507, "polars-expr-list-max"]], "polars.Expr.log1p": [[530, "polars-expr-log1p"]], "polars.Expr.list.median": [[509, "polars-expr-list-median"]], "polars.Expr.meta.ne": [[544, "polars-expr-meta-ne"]], "polars.Expr.list.tail": [[522, "polars-expr-list-tail"]], "polars.Expr.list.set_symmetric_difference": [[515, "polars-expr-list-set-symmetric-difference"]], "polars.Expr.is_null": [[479, "polars-expr-is-null"]], "polars.Expr.is_not_null": [[478, "polars-expr-is-not-null"]], "polars.Expr.flatten": [[450, "polars-expr-flatten"]], "polars.Expr.gt": [[459, "polars-expr-gt"]], "polars.Expr.list.get": [[501, "polars-expr-list-get"]], "polars.Expr.gather_every": [[456, "polars-expr-gather-every"]], "polars.Expr.hash": [[460, "polars-expr-hash"]], "polars.Expr.hist": [[462, "polars-expr-hist"]], "polars.Expr.list.contains": [[492, "polars-expr-list-contains"]], "polars.Expr.implode": [[463, "polars-expr-implode"]], "polars.Expr.is_last": [[473, "polars-expr-is-last"]], "polars.Expr.ge": [[457, "polars-expr-ge"]], "polars.Expr.is_finite": [[468, "polars-expr-is-finite"]], "polars.Expr.is_in": [[471, "polars-expr-is-in"]], "polars.Expr.is_first": [[469, "polars-expr-is-first"]], "polars.Expr.le": [[484, "polars-expr-le"]], "polars.Expr.filter": [[448, "polars-expr-filter"]], "polars.Expr.floordiv": [[452, "polars-expr-floordiv"]], "polars.Expr.is_duplicated": [[467, "polars-expr-is-duplicated"]], "polars.Expr.is_not": [[476, "polars-expr-is-not"]], "polars.Expr.list.gather": [[500, "polars-expr-list-gather"]], "polars.Expr.is_nan": [[475, "polars-expr-is-nan"]], "polars.Expr.floor": [[451, "polars-expr-floor"]], "polars.Expr.inspect": [[464, "polars-expr-inspect"]], "polars.Expr.head": [[461, "polars-expr-head"]], "polars.Expr.is_infinite": [[472, "polars-expr-is-infinite"]], "polars.Expr.is_unique": [[480, "polars-expr-is-unique"]], "polars.Expr.forward_fill": [[453, "polars-expr-forward-fill"]], "polars.Expr.last": [[483, "polars-expr-last"]], "polars.Expr.list.drop_nulls": [[496, "polars-expr-list-drop-nulls"]], "polars.Expr.interpolate": [[465, "polars-expr-interpolate"]], "polars.Expr.list.explode": [[498, "polars-expr-list-explode"]], "polars.Expr.is_between": [[466, "polars-expr-is-between"]], "polars.Expr.list.head": [[502, "polars-expr-list-head"]], "polars.Expr.list.diff": [[495, "polars-expr-list-diff"]], "polars.Expr.first": [[449, "polars-expr-first"]], "polars.Expr.list.join": [[503, "polars-expr-list-join"]], "polars.Expr.list.arg_min": [[490, "polars-expr-list-arg-min"]], "polars.Expr.from_json": [[454, "polars-expr-from-json"]], "polars.Expr.is_first_distinct": [[470, "polars-expr-is-first-distinct"]], "polars.Expr.len": [[485, "polars-expr-len"]], "polars.Expr.list.any": [[488, "polars-expr-list-any"]], "polars.Expr.keep_name": [[481, "polars-expr-keep-name"]], "polars.Expr.limit": [[486, "polars-expr-limit"]], "polars.Expr.list.all": [[487, "polars-expr-list-all"]], "polars.Expr.list.arg_max": [[489, "polars-expr-list-arg-max"]], "polars.Expr.list.concat": [[491, "polars-expr-list-concat"]], "polars.Expr.list.count_matches": [[494, "polars-expr-list-count-matches"]], "polars.Expr.get": [[458, "polars-expr-get"]], "polars.Expr.list.count_match": [[493, "polars-expr-list-count-match"]], "polars.Expr.is_last_distinct": [[474, "polars-expr-is-last-distinct"]], "polars.Expr.is_not_nan": [[477, "polars-expr-is-not-nan"]], "polars.Expr.kurtosis": [[482, "polars-expr-kurtosis"]], "polars.Expr.gather": [[455, "polars-expr-gather"]], "polars.Expr.list.first": [[499, "polars-expr-list-first"]], "polars.Expr.list.eval": [[497, "polars-expr-list-eval"]], "polars.Expr.dt.microseconds": [[402, "polars-expr-dt-microseconds"]], "polars.Expr.dt.dst_offset": [[395, "polars-expr-dt-dst-offset"]], "polars.Expr.dt.strftime": [[420, "polars-expr-dt-strftime"]], "polars.Expr.dt.truncate": [[431, "polars-expr-dt-truncate"]], "polars.Expr.extend_constant": [[445, "polars-expr-extend-constant"]], "polars.Expr.dt.day": [[393, "polars-expr-dt-day"]], "polars.Expr.dt.iso_year": [[400, "polars-expr-dt-iso-year"]], "polars.Expr.dt.month": [[408, "polars-expr-dt-month"]], "polars.Expr.ewm_var": [[441, "polars-expr-ewm-var"]], "polars.Expr.dt.quarter": [[415, "polars-expr-dt-quarter"]], "polars.Expr.dt.total_milliseconds": [[427, "polars-expr-dt-total-milliseconds"]], "polars.Expr.dt.total_minutes": [[428, "polars-expr-dt-total-minutes"]], "polars.Expr.dt.days": [[394, "polars-expr-dt-days"]], "polars.Expr.dt.total_nanoseconds": [[429, "polars-expr-dt-total-nanoseconds"]], "polars.Expr.dt.hours": [[398, "polars-expr-dt-hours"]], "polars.Expr.dt.ordinal_day": [[414, "polars-expr-dt-ordinal-day"]], "polars.Expr.dt.timestamp": [[422, "polars-expr-dt-timestamp"]], "polars.Expr.eq_missing": [[438, "polars-expr-eq-missing"]], "polars.Expr.entropy": [[436, "polars-expr-entropy"]], "polars.Expr.dt.total_hours": [[425, "polars-expr-dt-total-hours"]], "polars.Expr.ewm_mean": [[439, "polars-expr-ewm-mean"]], "polars.Expr.dt.minutes": [[407, "polars-expr-dt-minutes"]], "polars.Expr.dt.millennium": [[403, "polars-expr-dt-millennium"]], "polars.Expr.dt.weekday": [[433, "polars-expr-dt-weekday"]], "polars.Expr.dt.year": [[435, "polars-expr-dt-year"]], "polars.Expr.dt.time": [[421, "polars-expr-dt-time"]], "polars.Expr.fill_null": [[447, "polars-expr-fill-null"]], "polars.Expr.explode": [[444, "polars-expr-explode"]], "polars.Expr.dt.total_microseconds": [[426, "polars-expr-dt-total-microseconds"]], "polars.Expr.dt.nanoseconds": [[412, "polars-expr-dt-nanoseconds"]], "polars.Expr.dt.replace_time_zone": [[416, "polars-expr-dt-replace-time-zone"]], "polars.Expr.dt.to_string": [[423, "polars-expr-dt-to-string"]], "polars.Expr.dt.millisecond": [[404, "polars-expr-dt-millisecond"]], "polars.Expr.dt.offset_by": [[413, "polars-expr-dt-offset-by"]], "polars.Expr.dt.total_days": [[424, "polars-expr-dt-total-days"]], "polars.Expr.dt.month_start": [[410, "polars-expr-dt-month-start"]], "polars.Expr.dt.is_leap_year": [[399, "polars-expr-dt-is-leap-year"]], "polars.Expr.dt.datetime": [[392, "polars-expr-dt-datetime"]], "polars.Expr.dt.hour": [[397, "polars-expr-dt-hour"]], "polars.Expr.dt.seconds": [[419, "polars-expr-dt-seconds"]], "polars.Expr.dt.nanosecond": [[411, "polars-expr-dt-nanosecond"]], "polars.Expr.dt.with_time_unit": [[434, "polars-expr-dt-with-time-unit"]], "polars.Expr.dt.month_end": [[409, "polars-expr-dt-month-end"]], "polars.Expr.exclude": [[442, "polars-expr-exclude"]], "polars.Expr.dt.epoch": [[396, "polars-expr-dt-epoch"]], "polars.Expr.dt.milliseconds": [[405, "polars-expr-dt-milliseconds"]], "polars.Expr.fill_nan": [[446, "polars-expr-fill-nan"]], "polars.Expr.dt.second": [[418, "polars-expr-dt-second"]], "polars.Expr.dt.microsecond": [[401, "polars-expr-dt-microsecond"]], "polars.Expr.dt.minute": [[406, "polars-expr-dt-minute"]], "polars.Expr.dt.total_seconds": [[430, "polars-expr-dt-total-seconds"]], "polars.Expr.eq": [[437, "polars-expr-eq"]], "polars.Expr.dt.round": [[417, "polars-expr-dt-round"]], "polars.Expr.dt.week": [[432, "polars-expr-dt-week"]], "polars.Expr.ewm_std": [[440, "polars-expr-ewm-std"]], "polars.Expr.exp": [[443, "polars-expr-exp"]], "polars.Expr.backward_fill": [[350, "polars-expr-backward-fill"]], "polars.Expr.arr.median": [[341, "polars-expr-arr-median"]], "polars.Expr.arr.std": [[345, "polars-expr-arr-std"]], "polars.Expr.count": [[368, "polars-expr-count"]], "polars.Expr.dt.base_utc_offset": [[386, "polars-expr-dt-base-utc-offset"]], "polars.Expr.cosh": [[366, "polars-expr-cosh"]], "polars.Expr.arr.sum": [[346, "polars-expr-arr-sum"]], "polars.Expr.dt.cast_time_unit": [[387, "polars-expr-dt-cast-time-unit"]], "polars.Expr.cum_sum": [[373, "polars-expr-cum-sum"]], "polars.Expr.cummax": [[375, "polars-expr-cummax"]], "polars.Expr.arr.max": [[340, "polars-expr-arr-max"]], "polars.Expr.diff": [[382, "polars-expr-diff"]], "polars.Expr.cos": [[365, "polars-expr-cos"]], "polars.Expr.cat.get_categories": [[358, "polars-expr-cat-get-categories"]], "polars.Expr.drop_nulls": [[385, "polars-expr-drop-nulls"]], "polars.Expr.arr.get": [[337, "polars-expr-arr-get"]], "polars.Expr.cut": [[380, "polars-expr-cut"]], "polars.Expr.cummin": [[376, "polars-expr-cummin"]], "polars.Expr.bin.contains": [[351, "polars-expr-bin-contains"]], "polars.Expr.bin.decode": [[352, "polars-expr-bin-decode"]], "polars.Expr.dt.combine": [[389, "polars-expr-dt-combine"]], "polars.Expr.arr.min": [[342, "polars-expr-arr-min"]], "polars.Expr.cast": [[357, "polars-expr-cast"]], "polars.Expr.cot": [[367, "polars-expr-cot"]], "polars.Expr.cum_min": [[371, "polars-expr-cum-min"]], "polars.Expr.ceil": [[361, "polars-expr-ceil"]], "polars.Expr.cumcount": [[374, "polars-expr-cumcount"]], "polars.Expr.clip": [[362, "polars-expr-clip"]], "polars.Expr.cumulative_eval": [[379, "polars-expr-cumulative-eval"]], "polars.Expr.cumsum": [[378, "polars-expr-cumsum"]], "polars.Expr.drop_nans": [[384, "polars-expr-drop-nans"]], "polars.Expr.arr.reverse": [[343, "polars-expr-arr-reverse"]], "polars.Expr.cumprod": [[377, "polars-expr-cumprod"]], "polars.Expr.cum_prod": [[372, "polars-expr-cum-prod"]], "polars.Expr.arr.last": [[339, "polars-expr-arr-last"]], "polars.Expr.arr.first": [[336, "polars-expr-arr-first"]], "polars.Expr.arr.to_list": [[347, "polars-expr-arr-to-list"]], "polars.Expr.arr.join": [[338, "polars-expr-arr-join"]], "polars.Expr.bin.ends_with": [[354, "polars-expr-bin-ends-with"]], "polars.Expr.dt.century": [[388, "polars-expr-dt-century"]], "polars.Expr.dt.convert_time_zone": [[390, "polars-expr-dt-convert-time-zone"]], "polars.Expr.arr.unique": [[348, "polars-expr-arr-unique"]], "polars.Expr.bottom_k": [[356, "polars-expr-bottom-k"]], "polars.Expr.bin.starts_with": [[355, "polars-expr-bin-starts-with"]], "polars.Expr.cbrt": [[360, "polars-expr-cbrt"]], "polars.Expr.clip_max": [[363, "polars-expr-clip-max"]], "polars.Expr.degrees": [[381, "polars-expr-degrees"]], "polars.Expr.dot": [[383, "polars-expr-dot"]], "polars.Expr.arr.sort": [[344, "polars-expr-arr-sort"]], "polars.Expr.bin.encode": [[353, "polars-expr-bin-encode"]], "polars.Expr.cat.set_ordering": [[359, "polars-expr-cat-set-ordering"]], "polars.Expr.clip_min": [[364, "polars-expr-clip-min"]], "polars.Expr.cum_count": [[369, "polars-expr-cum-count"]], "polars.Expr.dt.date": [[391, "polars-expr-dt-date"]], "polars.Expr.cum_max": [[370, "polars-expr-cum-max"]], "polars.Expr.arr.var": [[349, "polars-expr-arr-var"]], "polars.from_epoch": [[731, "polars-from-epoch"]], "polars.reduce": [[752, "polars-reduce"]], "polars.head": [[733, "polars-head"]], "Meta": [[779, "meta"]], "polars.col": [[773, "polars-col"]], "Name": [[782, "name"]], "polars.repeat": [[753, "polars-repeat"]], "Expressions": [[777, "expressions"]], "polars.struct": [[759, "polars-struct"]], "polars.lit": [[739, "polars-lit"]], "polars.len": [[738, "polars-len"]], "polars.int_range": [[735, "polars-int-range"]], "polars.when": [[767, "polars-when"]], "polars.format": [[730, "polars-format"]], "polars.ones": [[750, "polars-ones"]], "polars.time_range": [[764, "polars-time-range"]], "polars.first": [[728, "polars-first"]], "Operators": [[783, "operators"]], "Conjunction": [[783, "conjunction"]], "Comparison": [[783, "comparison"]], "Numeric": [[783, "numeric"], [305, "numeric"]], "polars.int_ranges": [[736, "polars-int-ranges"]], "polars.rolling_corr": [[754, "polars-rolling-corr"]], "polars.time_ranges": [[765, "polars-time-ranges"]], "polars.map_batches": [[741, "polars-map-batches"]], "polars.sum_horizontal": [[761, "polars-sum-horizontal"]], "polars.groups": [[732, "polars-groups"]], "Columns / names": [[774, "columns-names"]], "polars.zeros": [[768, "polars-zeros"]], "polars.map_groups": [[742, "polars-map-groups"]], "polars.min": [[747, "polars-min"]], "polars.quantile": [[751, "polars-quantile"]], "polars.fold": [[729, "polars-fold"]], "polars.sum": [[760, "polars-sum"]], "polars.mean": [[745, "polars-mean"]], "polars.n_unique": [[749, "polars-n-unique"]], "polars.map": [[740, "polars-map"]], "polars.min_horizontal": [[748, "polars-min-horizontal"]], "polars.select": [[756, "polars-select"]], "polars.time": [[763, "polars-time"]], "polars.tail": [[762, "polars-tail"]], "polars.std": [[758, "polars-std"]], "polars.rolling_cov": [[755, "polars-rolling-cov"]], "polars.median": [[746, "polars-median"]], "polars.max": [[743, "polars-max"]], "polars.sql_expr": [[757, "polars-sql-expr"]], "polars.implode": [[734, "polars-implode"]], "polars.max_horizontal": [[744, "polars-max-horizontal"]], "polars.last": [[737, "polars-last"]], "polars.var": [[766, "polars-var"]], "polars.DataFrame.std": [[250, "polars-dataframe-std"]], "polars.DataFrame.row": [[236, "polars-dataframe-row"]], "polars.DataFrame.to_init_repr": [[259, "polars-dataframe-to-init-repr"]], "polars.DataFrame.to_pandas": [[261, "polars-dataframe-to-pandas"]], "polars.dataframe.group_by.GroupBy.agg": [[279, "polars-dataframe-group-by-groupby-agg"]], "polars.DataFrame.pivot": [[226, "polars-dataframe-pivot"]], "polars.DataFrame.rename": [[230, "polars-dataframe-rename"]], "polars.DataFrame.to_dummies": [[258, "polars-dataframe-to-dummies"]], "polars.DataFrame.width": [[273, "polars-dataframe-width"]], "polars.dataframe.group_by.GroupBy.__iter__": [[278, "polars-dataframe-group-by-groupby-iter"]], "polars.DataFrame.to_series": [[262, "polars-dataframe-to-series"]], "polars.DataFrame.shift_and_fill": [[246, "polars-dataframe-shift-and-fill"]], "polars.DataFrame.to_dict": [[256, "polars-dataframe-to-dict"]], "polars.DataFrame.vstack": [[272, "polars-dataframe-vstack"]], "polars.DataFrame.pipe": [[225, "polars-dataframe-pipe"]], "polars.DataFrame.rows_by_key": [[238, "polars-dataframe-rows-by-key"]], "polars.DataFrame.sort": [[249, "polars-dataframe-sort"]], "polars.DataFrame.upsample": [[270, "polars-dataframe-upsample"]], "polars.DataFrame.rolling": [[235, "polars-dataframe-rolling"]], "polars.DataFrame.replace_column": [[233, "polars-dataframe-replace-column"]], "polars.DataFrame.partition_by": [[224, "polars-dataframe-partition-by"]], "polars.DataFrame.product": [[227, "polars-dataframe-product"]], "polars.DataFrame.sample": [[239, "polars-dataframe-sample"]], "polars.DataFrame.unnest": [[267, "polars-dataframe-unnest"]], "polars.DataFrame.reverse": [[234, "polars-dataframe-reverse"]], "polars.DataFrame.shape": [[244, "polars-dataframe-shape"]], "polars.DataFrame.with_columns_seq": [[275, "polars-dataframe-with-columns-seq"]], "polars.DataFrame.to_dicts": [[257, "polars-dataframe-to-dicts"]], "polars.DataFrame.unique": [[266, "polars-dataframe-unique"]], "polars.DataFrame.with_row_index": [[277, "polars-dataframe-with-row-index"]], "polars.DataFrame.replace_at_idx": [[232, "polars-dataframe-replace-at-idx"]], "polars.DataFrame.rechunk": [[229, "polars-dataframe-rechunk"]], "polars.DataFrame.replace": [[231, "polars-dataframe-replace"]], "polars.DataFrame.to_arrow": [[255, "polars-dataframe-to-arrow"]], "polars.DataFrame.rows": [[237, "polars-dataframe-rows"]], "polars.DataFrame.select": [[241, "polars-dataframe-select"]], "polars.DataFrame.sum_horizontal": [[252, "polars-dataframe-sum-horizontal"]], "polars.DataFrame.shrink_to_fit": [[247, "polars-dataframe-shrink-to-fit"]], "polars.DataFrame.sum": [[251, "polars-dataframe-sum"]], "polars.DataFrame.shift": [[245, "polars-dataframe-shift"]], "polars.DataFrame.to_numpy": [[260, "polars-dataframe-to-numpy"]], "polars.DataFrame.unstack": [[268, "polars-dataframe-unstack"]], "polars.DataFrame.schema": [[240, "polars-dataframe-schema"]], "polars.DataFrame.var": [[271, "polars-dataframe-var"]], "polars.DataFrame.with_row_count": [[276, "polars-dataframe-with-row-count"]], "polars.DataFrame.to_struct": [[263, "polars-dataframe-to-struct"]], "polars.DataFrame.take_every": [[254, "polars-dataframe-take-every"]], "polars.DataFrame.tail": [[253, "polars-dataframe-tail"]], "polars.DataFrame.slice": [[248, "polars-dataframe-slice"]], "polars.DataFrame.with_columns": [[274, "polars-dataframe-with-columns"]], "polars.DataFrame.update": [[269, "polars-dataframe-update"]], "polars.DataFrame.quantile": [[228, "polars-dataframe-quantile"]], "polars.DataFrame.set_sorted": [[243, "polars-dataframe-set-sorted"]], "polars.DataFrame.select_seq": [[242, "polars-dataframe-select-seq"]], "polars.DataFrame.transpose": [[265, "polars-dataframe-transpose"]], "polars.DataFrame.top_k": [[264, "polars-dataframe-top-k"]], "polars.dataframe.group_by.GroupBy.mean": [[289, "polars-dataframe-group-by-groupby-mean"]], "polars.dataframe.group_by.GroupBy.tail": [[295, "polars-dataframe-group-by-groupby-tail"]], "polars.Expr.arccos": [[318, "polars-expr-arccos"]], "polars.dataframe.group_by.GroupBy.min": [[291, "polars-dataframe-group-by-groupby-min"]], "polars.Expr.arctan": [[322, "polars-expr-arctan"]], "polars.dataframe.group_by.GroupBy.apply": [[281, "polars-dataframe-group-by-groupby-apply"]], "polars.Expr.alias": [[311, "polars-expr-alias"]], "polars.Expr.arccosh": [[319, "polars-expr-arccosh"]], "polars.Expr.arr.explode": [[335, "polars-expr-arr-explode"]], "polars.Expr.abs": [[308, "polars-expr-abs"]], "polars.Expr.arr.arg_min": [[332, "polars-expr-arr-arg-min"]], "Exceptions": [[306, "exceptions"]], "polars.Expr.all": [[312, "polars-expr-all"]], "polars.Expr.any": [[314, "polars-expr-any"]], "polars.dataframe.group_by.GroupBy.count": [[282, "polars-dataframe-group-by-groupby-count"]], "polars.dataframe.group_by.GroupBy.first": [[283, "polars-dataframe-group-by-groupby-first"]], "polars.Expr.append": [[315, "polars-expr-append"]], "polars.Expr.arr.count_matches": [[334, "polars-expr-arr-count-matches"]], "polars.Expr.arr.all": [[329, "polars-expr-arr-all"]], "polars.Expr.apply": [[316, "polars-expr-apply"]], "polars.dataframe.group_by.GroupBy.sum": [[294, "polars-dataframe-group-by-groupby-sum"]], "polars.Expr.approx_n_unique": [[317, "polars-expr-approx-n-unique"]], "polars.Expr.arctanh": [[323, "polars-expr-arctanh"]], "DataFrame": [[301, "dataframe"]], "Data types": [[305, "data-types"]], "Nested": [[305, "nested"]], "Other": [[305, "other"]], "polars.Expr.arg_true": [[327, "polars-expr-arg-true"]], "polars.Expr.arr.contains": [[333, "polars-expr-arr-contains"]], "polars.dataframe.group_by.GroupBy.last": [[285, "polars-dataframe-group-by-groupby-last"]], "polars.Expr.and_": [[313, "polars-expr-and"]], "polars.Expr.arr.any": [[330, "polars-expr-arr-any"]], "polars.Expr.arr.arg_max": [[331, "polars-expr-arr-arg-max"]], "polars.dataframe.group_by.GroupBy.head": [[284, "polars-dataframe-group-by-groupby-head"]], "polars.dataframe.group_by.GroupBy.quantile": [[293, "polars-dataframe-group-by-groupby-quantile"]], "polars.dataframe.group_by.GroupBy.all": [[280, "polars-dataframe-group-by-groupby-all"]], "polars.dataframe.group_by.GroupBy.map_groups": [[287, "polars-dataframe-group-by-groupby-map-groups"]], "polars.dataframe.group_by.GroupBy.median": [[290, "polars-dataframe-group-by-groupby-median"]], "polars.Expr.agg_groups": [[310, "polars-expr-agg-groups"]], "polars.Expr.arcsinh": [[321, "polars-expr-arcsinh"]], "polars.Expr.arg_max": [[324, "polars-expr-arg-max"]], "polars.Expr.arg_min": [[325, "polars-expr-arg-min"]], "polars.Expr.arg_unique": [[328, "polars-expr-arg-unique"]], "polars.dataframe.group_by.GroupBy.n_unique": [[292, "polars-dataframe-group-by-groupby-n-unique"]], "polars.Expr.arcsin": [[320, "polars-expr-arcsin"]], "polars.Expr.add": [[309, "polars-expr-add"]], "polars.dataframe.group_by.GroupBy.max": [[288, "polars-dataframe-group-by-groupby-max"]], "polars.Expr.arg_sort": [[326, "polars-expr-arg-sort"]], "polars.dataframe.group_by.GroupBy.len": [[286, "polars-dataframe-group-by-groupby-len"]]}, "indexentries": {"array (class in polars)": [[2, "polars.Array"]], "__init__() (polars.array method)": [[2, "polars.Array.__init__"]], "binary (class in polars)": [[3, "polars.Binary"]], "__init__() (polars.binary method)": [[3, "polars.Binary.__init__"]], "boolean (class in polars)": [[4, "polars.Boolean"]], "__init__() (polars.boolean method)": [[4, "polars.Boolean.__init__"]], "categorical (class in polars)": [[5, "polars.Categorical"]], "__init__() (polars.categorical method)": [[5, "polars.Categorical.__init__"]], "activate_decimals() (polars.config class method)": [[6, "polars.Config.activate_decimals"]], "load() (polars.config class method)": [[7, "polars.Config.load"]], "load_from_file() (polars.config class method)": [[8, "polars.Config.load_from_file"]], "restore_defaults() (polars.config class method)": [[9, "polars.Config.restore_defaults"]], "save() (polars.config class method)": [[10, "polars.Config.save"]], "save_to_file() (polars.config class method)": [[11, "polars.Config.save_to_file"]], "set_ascii_tables() (polars.config class method)": [[12, "polars.Config.set_ascii_tables"]], "set_auto_structify() (polars.config class method)": [[13, "polars.Config.set_auto_structify"]], "set_decimal_separator() (polars.config class method)": [[14, "polars.Config.set_decimal_separator"]], "set_float_precision() (polars.config class method)": [[15, "polars.Config.set_float_precision"]], "set_fmt_float() (polars.config class method)": [[16, "polars.Config.set_fmt_float"]], "set_fmt_str_lengths() (polars.config class method)": [[17, "polars.Config.set_fmt_str_lengths"]], "set_fmt_table_cell_list_len() (polars.config class method)": [[18, "polars.Config.set_fmt_table_cell_list_len"]], "set_streaming_chunk_size() (polars.config class method)": [[19, "polars.Config.set_streaming_chunk_size"]], "set_tbl_cell_alignment() (polars.config class method)": [[20, "polars.Config.set_tbl_cell_alignment"]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[21, "polars.Config.set_tbl_cell_numeric_alignment"]], "set_tbl_cols() (polars.config class method)": [[22, "polars.Config.set_tbl_cols"]], "set_tbl_column_data_type_inline() (polars.config class method)": [[23, "polars.Config.set_tbl_column_data_type_inline"]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[24, "polars.Config.set_tbl_dataframe_shape_below"]], "set_tbl_formatting() (polars.config class method)": [[25, "polars.Config.set_tbl_formatting"]], "set_tbl_hide_column_data_types() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_column_data_types"]], "set_tbl_hide_column_names() (polars.config class method)": [[27, "polars.Config.set_tbl_hide_column_names"]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[28, "polars.Config.set_tbl_hide_dataframe_shape"]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[29, "polars.Config.set_tbl_hide_dtype_separator"]], "set_tbl_rows() (polars.config class method)": [[30, "polars.Config.set_tbl_rows"]], "set_tbl_width_chars() (polars.config class method)": [[31, "polars.Config.set_tbl_width_chars"]], "set_thousands_separator() (polars.config class method)": [[32, "polars.Config.set_thousands_separator"]], "set_trim_decimal_zeros() (polars.config class method)": [[33, "polars.Config.set_trim_decimal_zeros"]], "set_verbose() (polars.config class method)": [[34, "polars.Config.set_verbose"]], "state() (polars.config class method)": [[35, "polars.Config.state"]], "write_avro() (polars.dataframe method)": [[36, "polars.DataFrame.write_avro"]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv"]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database"]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta"]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel"]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc"]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream"]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json"]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson"]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet"]], "datatype (class in polars)": [[46, "polars.DataType"]], "__init__() (polars.datatype method)": [[46, "polars.DataType.__init__"]], "date (class in polars)": [[47, "polars.Date"]], "__init__() (polars.date method)": [[47, "polars.Date.__init__"]], "datetime (class in polars)": [[48, "polars.Datetime"]], "__init__() (polars.datetime method)": [[48, "polars.Datetime.__init__"]], "decimal (class in polars)": [[49, "polars.Decimal"]], "__init__() (polars.decimal method)": [[49, "polars.Decimal.__init__"]], "duration (class in polars)": [[50, "polars.Duration"]], "__init__() (polars.duration method)": [[50, "polars.Duration.__init__"]], "enum (class in polars)": [[51, "polars.Enum"]], "__init__() (polars.enum method)": [[51, "polars.Enum.__init__"]], "float32 (class in polars)": [[52, "polars.Float32"]], "__init__() (polars.float32 method)": [[52, "polars.Float32.__init__"]], "float64 (class in polars)": [[53, "polars.Float64"]], "__init__() (polars.float64 method)": [[53, "polars.Float64.__init__"]], "int16 (class in polars)": [[54, "polars.Int16"]], "__init__() (polars.int16 method)": [[54, "polars.Int16.__init__"]], "int32 (class in polars)": [[55, "polars.Int32"]], "__init__() (polars.int32 method)": [[55, "polars.Int32.__init__"]], "int64 (class in polars)": [[56, "polars.Int64"]], "__init__() (polars.int64 method)": [[56, "polars.Int64.__init__"]], "int8 (class in polars)": [[57, "polars.Int8"]], "__init__() (polars.int8 method)": [[57, "polars.Int8.__init__"]], "sink_csv() (polars.lazyframe method)": [[58, "polars.LazyFrame.sink_csv"]], "sink_ipc() (polars.lazyframe method)": [[59, "polars.LazyFrame.sink_ipc"]], "sink_ndjson() (polars.lazyframe method)": [[60, "polars.LazyFrame.sink_ndjson"]], "sink_parquet() (polars.lazyframe method)": [[61, "polars.LazyFrame.sink_parquet"]], "list (class in polars)": [[62, "polars.List"]], "__init__() (polars.list method)": [[62, "polars.List.__init__"]], "null (class in polars)": [[63, "polars.Null"]], "__init__() (polars.null method)": [[63, "polars.Null.__init__"]], "object (class in polars)": [[64, "polars.Object"]], "__init__() (polars.object method)": [[64, "polars.Object.__init__"]], "execute() (polars.sqlcontext method)": [[65, "polars.SQLContext.execute"]], "register() (polars.sqlcontext method)": [[66, "polars.SQLContext.register"]], "register_globals() (polars.sqlcontext method)": [[67, "polars.SQLContext.register_globals"]], "register_many() (polars.sqlcontext method)": [[68, "polars.SQLContext.register_many"]], "tables() (polars.sqlcontext method)": [[69, "polars.SQLContext.tables"]], "unregister() (polars.sqlcontext method)": [[70, "polars.SQLContext.unregister"]], "string (class in polars)": [[71, "polars.String"]], "__init__() (polars.string method)": [[71, "polars.String.__init__"]], "stringcache (class in polars)": [[72, "polars.StringCache"]], "__init__() (polars.stringcache method)": [[72, "polars.StringCache.__init__"]], "struct (class in polars)": [[73, "polars.Struct"]], "__init__() (polars.struct method)": [[73, "polars.Struct.__init__"]], "time (class in polars)": [[74, "polars.Time"]], "__init__() (polars.time method)": [[74, "polars.Time.__init__"]], "uint16 (class in polars)": [[75, "polars.UInt16"]], "__init__() (polars.uint16 method)": [[75, "polars.UInt16.__init__"]], "uint32 (class in polars)": [[76, "polars.UInt32"]], "__init__() (polars.uint32 method)": [[76, "polars.UInt32.__init__"]], "uint64 (class in polars)": [[77, "polars.UInt64"]], "__init__() (polars.uint64 method)": [[77, "polars.UInt64.__init__"]], "uint8 (class in polars)": [[78, "polars.UInt8"]], "__init__() (polars.uint8 method)": [[78, "polars.UInt8.__init__"]], "unknown (class in polars)": [[79, "polars.Unknown"]], "__init__() (polars.unknown method)": [[79, "polars.Unknown.__init__"]], "utf8 (in module polars)": [[80, "polars.Utf8"]], "align_frames() (in module polars)": [[81, "polars.align_frames"]], "register_dataframe_namespace() (in module polars.api)": [[82, "polars.api.register_dataframe_namespace"]], "register_expr_namespace() (in module polars.api)": [[83, "polars.api.register_expr_namespace"]], "register_lazyframe_namespace() (in module polars.api)": [[84, "polars.api.register_lazyframe_namespace"]], "register_series_namespace() (in module polars.api)": [[85, "polars.api.register_series_namespace"]], "build_info() (in module polars)": [[86, "polars.build_info"]], "collect_all() (in module polars)": [[87, "polars.collect_all"]], "collect_all_async() (in module polars)": [[88, "polars.collect_all_async"]], "concat() (in module polars)": [[89, "polars.concat"]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache"]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache"]], "arrowerror": [[92, "polars.exceptions.ArrowError"]], "columnnotfounderror": [[93, "polars.exceptions.ColumnNotFoundError"]], "computeerror": [[94, "polars.exceptions.ComputeError"]], "duplicateerror": [[95, "polars.exceptions.DuplicateError"]], "invalidoperationerror": [[96, "polars.exceptions.InvalidOperationError"]], "nodataerror": [[97, "polars.exceptions.NoDataError"]], "norowsreturnederror": [[98, "polars.exceptions.NoRowsReturnedError"]], "polarserror": [[99, "polars.exceptions.PolarsError"]], "polarspanicerror": [[100, "polars.exceptions.PolarsPanicError"]], "rowserror": [[101, "polars.exceptions.RowsError"]], "schemaerror": [[102, "polars.exceptions.SchemaError"]], "schemafieldnotfounderror": [[103, "polars.exceptions.SchemaFieldNotFoundError"]], "shapeerror": [[104, "polars.exceptions.ShapeError"]], "structfieldnotfounderror": [[105, "polars.exceptions.StructFieldNotFoundError"]], "toomanyrowsreturnederror": [[106, "polars.exceptions.TooManyRowsReturnedError"]], "from_arrow() (in module polars)": [[107, "polars.from_arrow"]], "from_dataframe() (in module polars)": [[108, "polars.from_dataframe"]], "from_dict() (in module polars)": [[109, "polars.from_dict"]], "from_dicts() (in module polars)": [[110, "polars.from_dicts"]], "from_numpy() (in module polars)": [[111, "polars.from_numpy"]], "from_pandas() (in module polars)": [[112, "polars.from_pandas"]], "from_records() (in module polars)": [[113, "polars.from_records"]], "from_repr() (in module polars)": [[114, "polars.from_repr"]], "get_index_type() (in module polars)": [[115, "polars.get_index_type"]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[116, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches"]], "read_avro() (in module polars)": [[117, "polars.read_avro"]], "read_csv() (in module polars)": [[118, "polars.read_csv"]], "read_csv_batched() (in module polars)": [[119, "polars.read_csv_batched"]], "read_database() (in module polars)": [[120, "polars.read_database"]], "read_database_uri() (in module polars)": [[121, "polars.read_database_uri"]], "read_delta() (in module polars)": [[122, "polars.read_delta"]], "read_excel() (in module polars)": [[123, "polars.read_excel"]], "read_ipc() (in module polars)": [[124, "polars.read_ipc"]], "read_ipc_schema() (in module polars)": [[125, "polars.read_ipc_schema"]], "read_ipc_stream() (in module polars)": [[126, "polars.read_ipc_stream"]], "read_json() (in module polars)": [[127, "polars.read_json"]], "read_ndjson() (in module polars)": [[128, "polars.read_ndjson"]], "read_ods() (in module polars)": [[129, "polars.read_ods"]], "read_parquet() (in module polars)": [[130, "polars.read_parquet"]], "read_parquet_schema() (in module polars)": [[131, "polars.read_parquet_schema"]], "scan_csv() (in module polars)": [[132, "polars.scan_csv"]], "scan_delta() (in module polars)": [[133, "polars.scan_delta"]], "scan_iceberg() (in module polars)": [[134, "polars.scan_iceberg"]], "scan_ipc() (in module polars)": [[135, "polars.scan_ipc"]], "scan_ndjson() (in module polars)": [[136, "polars.scan_ndjson"]], "scan_parquet() (in module polars)": [[137, "polars.scan_parquet"]], "scan_pyarrow_dataset() (in module polars)": [[138, "polars.scan_pyarrow_dataset"]], "set_random_seed() (in module polars)": [[139, "polars.set_random_seed"]], "show_versions() (in module polars)": [[140, "polars.show_versions"]], "assert_frame_equal() (in module polars.testing)": [[141, "polars.testing.assert_frame_equal"]], "assert_frame_not_equal() (in module polars.testing)": [[142, "polars.testing.assert_frame_not_equal"]], "assert_series_equal() (in module polars.testing)": [[143, "polars.testing.assert_series_equal"]], "assert_series_not_equal() (in module polars.testing)": [[144, "polars.testing.assert_series_not_equal"]], "__init__() (polars.testing.parametric.column method)": [[145, "polars.testing.parametric.column.__init__"]], "column (class in polars.testing.parametric)": [[145, "polars.testing.parametric.column"]], "columns() (in module polars.testing.parametric)": [[146, "polars.testing.parametric.columns"]], "create_list_strategy() (in module polars.testing.parametric)": [[147, "polars.testing.parametric.create_list_strategy"]], "dataframes() (in module polars.testing.parametric)": [[148, "polars.testing.parametric.dataframes"]], "load_profile() (in module polars.testing.parametric)": [[149, "polars.testing.parametric.load_profile"]], "series() (in module polars.testing.parametric)": [[150, "polars.testing.parametric.series"]], "set_profile() (in module polars.testing.parametric)": [[151, "polars.testing.parametric.set_profile"]], "threadpool_size() (in module polars)": [[152, "polars.threadpool_size"]], "using_string_cache() (in module polars)": [[153, "polars.using_string_cache"]], "__dataframe__() (polars.dataframe method)": [[156, "polars.DataFrame.__dataframe__"]], "apply() (polars.dataframe method)": [[157, "polars.DataFrame.apply"]], "approx_n_unique() (polars.dataframe method)": [[158, "polars.DataFrame.approx_n_unique"]], "bottom_k() (polars.dataframe method)": [[159, "polars.DataFrame.bottom_k"]], "cast() (polars.dataframe method)": [[160, "polars.DataFrame.cast"]], "clear() (polars.dataframe method)": [[161, "polars.DataFrame.clear"]], "clone() (polars.dataframe method)": [[162, "polars.DataFrame.clone"]], "columns (polars.dataframe property)": [[163, "polars.DataFrame.columns"]], "corr() (polars.dataframe method)": [[164, "polars.DataFrame.corr"]], "count() (polars.dataframe method)": [[165, "polars.DataFrame.count"]], "describe() (polars.dataframe method)": [[166, "polars.DataFrame.describe"]], "drop() (polars.dataframe method)": [[167, "polars.DataFrame.drop"]], "drop_in_place() (polars.dataframe method)": [[168, "polars.DataFrame.drop_in_place"]], "drop_nulls() (polars.dataframe method)": [[169, "polars.DataFrame.drop_nulls"]], "dtypes (polars.dataframe property)": [[170, "polars.DataFrame.dtypes"]], "equals() (polars.dataframe method)": [[171, "polars.DataFrame.equals"]], "estimated_size() (polars.dataframe method)": [[172, "polars.DataFrame.estimated_size"]], "explode() (polars.dataframe method)": [[173, "polars.DataFrame.explode"]], "extend() (polars.dataframe method)": [[174, "polars.DataFrame.extend"]], "fill_nan() (polars.dataframe method)": [[175, "polars.DataFrame.fill_nan"]], "fill_null() (polars.dataframe method)": [[176, "polars.DataFrame.fill_null"]], "filter() (polars.dataframe method)": [[177, "polars.DataFrame.filter"]], "find_idx_by_name() (polars.dataframe method)": [[178, "polars.DataFrame.find_idx_by_name"]], "flags (polars.dataframe property)": [[179, "polars.DataFrame.flags"]], "fold() (polars.dataframe method)": [[180, "polars.DataFrame.fold"]], "frame_equal() (polars.dataframe method)": [[181, "polars.DataFrame.frame_equal"]], "gather_every() (polars.dataframe method)": [[182, "polars.DataFrame.gather_every"]], "get_column() (polars.dataframe method)": [[183, "polars.DataFrame.get_column"]], "get_column_index() (polars.dataframe method)": [[184, "polars.DataFrame.get_column_index"]], "get_columns() (polars.dataframe method)": [[185, "polars.DataFrame.get_columns"]], "glimpse() (polars.dataframe method)": [[186, "polars.DataFrame.glimpse"]], "group_by() (polars.dataframe method)": [[187, "polars.DataFrame.group_by"]], "group_by_dynamic() (polars.dataframe method)": [[188, "polars.DataFrame.group_by_dynamic"]], "group_by_rolling() (polars.dataframe method)": [[189, "polars.DataFrame.group_by_rolling"]], "groupby() (polars.dataframe method)": [[190, "polars.DataFrame.groupby"]], "groupby_dynamic() (polars.dataframe method)": [[191, "polars.DataFrame.groupby_dynamic"]], "groupby_rolling() (polars.dataframe method)": [[192, "polars.DataFrame.groupby_rolling"]], "hash_rows() (polars.dataframe method)": [[193, "polars.DataFrame.hash_rows"]], "head() (polars.dataframe method)": [[194, "polars.DataFrame.head"]], "height (polars.dataframe property)": [[195, "polars.DataFrame.height"]], "hstack() (polars.dataframe method)": [[196, "polars.DataFrame.hstack"]], "insert_at_idx() (polars.dataframe method)": [[197, "polars.DataFrame.insert_at_idx"]], "insert_column() (polars.dataframe method)": [[198, "polars.DataFrame.insert_column"]], "interpolate() (polars.dataframe method)": [[199, "polars.DataFrame.interpolate"]], "is_duplicated() (polars.dataframe method)": [[200, "polars.DataFrame.is_duplicated"]], "is_empty() (polars.dataframe method)": [[201, "polars.DataFrame.is_empty"]], "is_unique() (polars.dataframe method)": [[202, "polars.DataFrame.is_unique"]], "item() (polars.dataframe method)": [[203, "polars.DataFrame.item"]], "iter_columns() (polars.dataframe method)": [[204, "polars.DataFrame.iter_columns"]], "iter_rows() (polars.dataframe method)": [[205, "polars.DataFrame.iter_rows"]], "iter_slices() (polars.dataframe method)": [[206, "polars.DataFrame.iter_slices"]], "join() (polars.dataframe method)": [[207, "polars.DataFrame.join"]], "join_asof() (polars.dataframe method)": [[208, "polars.DataFrame.join_asof"]], "lazy() (polars.dataframe method)": [[209, "polars.DataFrame.lazy"]], "limit() (polars.dataframe method)": [[210, "polars.DataFrame.limit"]], "map_rows() (polars.dataframe method)": [[211, "polars.DataFrame.map_rows"]], "max() (polars.dataframe method)": [[212, "polars.DataFrame.max"]], "max_horizontal() (polars.dataframe method)": [[213, "polars.DataFrame.max_horizontal"]], "mean() (polars.dataframe method)": [[214, "polars.DataFrame.mean"]], "mean_horizontal() (polars.dataframe method)": [[215, "polars.DataFrame.mean_horizontal"]], "median() (polars.dataframe method)": [[216, "polars.DataFrame.median"]], "melt() (polars.dataframe method)": [[217, "polars.DataFrame.melt"]], "merge_sorted() (polars.dataframe method)": [[218, "polars.DataFrame.merge_sorted"]], "min() (polars.dataframe method)": [[219, "polars.DataFrame.min"]], "min_horizontal() (polars.dataframe method)": [[220, "polars.DataFrame.min_horizontal"]], "n_chunks() (polars.dataframe method)": [[221, "polars.DataFrame.n_chunks"]], "n_unique() (polars.dataframe method)": [[222, "polars.DataFrame.n_unique"]], "null_count() (polars.dataframe method)": [[223, "polars.DataFrame.null_count"]], "partition_by() (polars.dataframe method)": [[224, "polars.DataFrame.partition_by"]], "pipe() (polars.dataframe method)": [[225, "polars.DataFrame.pipe"]], "pivot() (polars.dataframe method)": [[226, "polars.DataFrame.pivot"]], "product() (polars.dataframe method)": [[227, "polars.DataFrame.product"]], "quantile() (polars.dataframe method)": [[228, "polars.DataFrame.quantile"]], "rechunk() (polars.dataframe method)": [[229, "polars.DataFrame.rechunk"]], "rename() (polars.dataframe method)": [[230, "polars.DataFrame.rename"]], "replace() (polars.dataframe method)": [[231, "polars.DataFrame.replace"]], "replace_at_idx() (polars.dataframe method)": [[232, "polars.DataFrame.replace_at_idx"]], "replace_column() (polars.dataframe method)": [[233, "polars.DataFrame.replace_column"]], "reverse() (polars.dataframe method)": [[234, "polars.DataFrame.reverse"]], "rolling() (polars.dataframe method)": [[235, "polars.DataFrame.rolling"]], "row() (polars.dataframe method)": [[236, "polars.DataFrame.row"]], "rows() (polars.dataframe method)": [[237, "polars.DataFrame.rows"]], "rows_by_key() (polars.dataframe method)": [[238, "polars.DataFrame.rows_by_key"]], "sample() (polars.dataframe method)": [[239, "polars.DataFrame.sample"]], "schema (polars.dataframe property)": [[240, "polars.DataFrame.schema"]], "select() (polars.dataframe method)": [[241, "polars.DataFrame.select"]], "select_seq() (polars.dataframe method)": [[242, "polars.DataFrame.select_seq"]], "set_sorted() (polars.dataframe method)": [[243, "polars.DataFrame.set_sorted"]], "shape (polars.dataframe property)": [[244, "polars.DataFrame.shape"]], "shift() (polars.dataframe method)": [[245, "polars.DataFrame.shift"]], "shift_and_fill() (polars.dataframe method)": [[246, "polars.DataFrame.shift_and_fill"]], "shrink_to_fit() (polars.dataframe method)": [[247, "polars.DataFrame.shrink_to_fit"]], "slice() (polars.dataframe method)": [[248, "polars.DataFrame.slice"]], "sort() (polars.dataframe method)": [[249, "polars.DataFrame.sort"]], "std() (polars.dataframe method)": [[250, "polars.DataFrame.std"]], "sum() (polars.dataframe method)": [[251, "polars.DataFrame.sum"]], "sum_horizontal() (polars.dataframe method)": [[252, "polars.DataFrame.sum_horizontal"]], "tail() (polars.dataframe method)": [[253, "polars.DataFrame.tail"]], "take_every() (polars.dataframe method)": [[254, "polars.DataFrame.take_every"]], "to_arrow() (polars.dataframe method)": [[255, "polars.DataFrame.to_arrow"]], "to_dict() (polars.dataframe method)": [[256, "polars.DataFrame.to_dict"]], "to_dicts() (polars.dataframe method)": [[257, "polars.DataFrame.to_dicts"]], "to_dummies() (polars.dataframe method)": [[258, "polars.DataFrame.to_dummies"]], "to_init_repr() (polars.dataframe method)": [[259, "polars.DataFrame.to_init_repr"]], "to_numpy() (polars.dataframe method)": [[260, "polars.DataFrame.to_numpy"]], "to_pandas() (polars.dataframe method)": [[261, "polars.DataFrame.to_pandas"]], "to_series() (polars.dataframe method)": [[262, "polars.DataFrame.to_series"]], "to_struct() (polars.dataframe method)": [[263, "polars.DataFrame.to_struct"]], "top_k() (polars.dataframe method)": [[264, "polars.DataFrame.top_k"]], "transpose() (polars.dataframe method)": [[265, "polars.DataFrame.transpose"]], "unique() (polars.dataframe method)": [[266, "polars.DataFrame.unique"]], "unnest() (polars.dataframe method)": [[267, "polars.DataFrame.unnest"]], "unstack() (polars.dataframe method)": [[268, "polars.DataFrame.unstack"]], "update() (polars.dataframe method)": [[269, "polars.DataFrame.update"]], "upsample() (polars.dataframe method)": [[270, "polars.DataFrame.upsample"]], "var() (polars.dataframe method)": [[271, "polars.DataFrame.var"]], "vstack() (polars.dataframe method)": [[272, "polars.DataFrame.vstack"]], "width (polars.dataframe property)": [[273, "polars.DataFrame.width"]], "with_columns() (polars.dataframe method)": [[274, "polars.DataFrame.with_columns"]], "with_columns_seq() (polars.dataframe method)": [[275, "polars.DataFrame.with_columns_seq"]], "with_row_count() (polars.dataframe method)": [[276, "polars.DataFrame.with_row_count"]], "with_row_index() (polars.dataframe method)": [[277, "polars.DataFrame.with_row_index"]], "__iter__() (polars.dataframe.group_by.groupby method)": [[278, "polars.dataframe.group_by.GroupBy.__iter__"]], "agg() (polars.dataframe.group_by.groupby method)": [[279, "polars.dataframe.group_by.GroupBy.agg"]], "all() (polars.dataframe.group_by.groupby method)": [[280, "polars.dataframe.group_by.GroupBy.all"]], "apply() (polars.dataframe.group_by.groupby method)": [[281, "polars.dataframe.group_by.GroupBy.apply"]], "count() (polars.dataframe.group_by.groupby method)": [[282, "polars.dataframe.group_by.GroupBy.count"]], "first() (polars.dataframe.group_by.groupby method)": [[283, "polars.dataframe.group_by.GroupBy.first"]], "head() (polars.dataframe.group_by.groupby method)": [[284, "polars.dataframe.group_by.GroupBy.head"]], "last() (polars.dataframe.group_by.groupby method)": [[285, "polars.dataframe.group_by.GroupBy.last"]], "len() (polars.dataframe.group_by.groupby method)": [[286, "polars.dataframe.group_by.GroupBy.len"]], "map_groups() (polars.dataframe.group_by.groupby method)": [[287, "polars.dataframe.group_by.GroupBy.map_groups"]], "max() (polars.dataframe.group_by.groupby method)": [[288, "polars.dataframe.group_by.GroupBy.max"]], "mean() (polars.dataframe.group_by.groupby method)": [[289, "polars.dataframe.group_by.GroupBy.mean"]], "median() (polars.dataframe.group_by.groupby method)": [[290, "polars.dataframe.group_by.GroupBy.median"]], "min() (polars.dataframe.group_by.groupby method)": [[291, "polars.dataframe.group_by.GroupBy.min"]], "n_unique() (polars.dataframe.group_by.groupby method)": [[292, "polars.dataframe.group_by.GroupBy.n_unique"]], "quantile() (polars.dataframe.group_by.groupby method)": [[293, "polars.dataframe.group_by.GroupBy.quantile"]], "sum() (polars.dataframe.group_by.groupby method)": [[294, "polars.dataframe.group_by.GroupBy.sum"]], "tail() (polars.dataframe.group_by.groupby method)": [[295, "polars.dataframe.group_by.GroupBy.tail"]], "abs() (polars.expr method)": [[308, "polars.Expr.abs"]], "add() (polars.expr method)": [[309, "polars.Expr.add"]], "agg_groups() (polars.expr method)": [[310, "polars.Expr.agg_groups"]], "alias() (polars.expr method)": [[311, "polars.Expr.alias"]], "all() (polars.expr method)": [[312, "polars.Expr.all"]], "and_() (polars.expr method)": [[313, "polars.Expr.and_"]], "any() (polars.expr method)": [[314, "polars.Expr.any"]], "append() (polars.expr method)": [[315, "polars.Expr.append"]], "apply() (polars.expr method)": [[316, "polars.Expr.apply"]], "approx_n_unique() (polars.expr method)": [[317, "polars.Expr.approx_n_unique"]], "arccos() (polars.expr method)": [[318, "polars.Expr.arccos"]], "arccosh() (polars.expr method)": [[319, "polars.Expr.arccosh"]], "arcsin() (polars.expr method)": [[320, "polars.Expr.arcsin"]], "arcsinh() (polars.expr method)": [[321, "polars.Expr.arcsinh"]], "arctan() (polars.expr method)": [[322, "polars.Expr.arctan"]], "arctanh() (polars.expr method)": [[323, "polars.Expr.arctanh"]], "arg_max() (polars.expr method)": [[324, "polars.Expr.arg_max"]], "arg_min() (polars.expr method)": [[325, "polars.Expr.arg_min"]], "arg_sort() (polars.expr method)": [[326, "polars.Expr.arg_sort"]], "arg_true() (polars.expr method)": [[327, "polars.Expr.arg_true"]], "arg_unique() (polars.expr method)": [[328, "polars.Expr.arg_unique"]], "all() (polars.expr.arr method)": [[329, "polars.Expr.arr.all"]], "any() (polars.expr.arr method)": [[330, "polars.Expr.arr.any"]], "arg_max() (polars.expr.arr method)": [[331, "polars.Expr.arr.arg_max"]], "arg_min() (polars.expr.arr method)": [[332, "polars.Expr.arr.arg_min"]], "contains() (polars.expr.arr method)": [[333, "polars.Expr.arr.contains"]], "count_matches() (polars.expr.arr method)": [[334, "polars.Expr.arr.count_matches"]], "explode() (polars.expr.arr method)": [[335, "polars.Expr.arr.explode"]], "first() (polars.expr.arr method)": [[336, "polars.Expr.arr.first"]], "get() (polars.expr.arr method)": [[337, "polars.Expr.arr.get"]], "join() (polars.expr.arr method)": [[338, "polars.Expr.arr.join"]], "last() (polars.expr.arr method)": [[339, "polars.Expr.arr.last"]], "max() (polars.expr.arr method)": [[340, "polars.Expr.arr.max"]], "median() (polars.expr.arr method)": [[341, "polars.Expr.arr.median"]], "min() (polars.expr.arr method)": [[342, "polars.Expr.arr.min"]], "reverse() (polars.expr.arr method)": [[343, "polars.Expr.arr.reverse"]], "sort() (polars.expr.arr method)": [[344, "polars.Expr.arr.sort"]], "std() (polars.expr.arr method)": [[345, "polars.Expr.arr.std"]], "sum() (polars.expr.arr method)": [[346, "polars.Expr.arr.sum"]], "to_list() (polars.expr.arr method)": [[347, "polars.Expr.arr.to_list"]], "unique() (polars.expr.arr method)": [[348, "polars.Expr.arr.unique"]], "var() (polars.expr.arr method)": [[349, "polars.Expr.arr.var"]], "backward_fill() (polars.expr method)": [[350, "polars.Expr.backward_fill"]], "contains() (polars.expr.bin method)": [[351, "polars.Expr.bin.contains"]], "decode() (polars.expr.bin method)": [[352, "polars.Expr.bin.decode"]], "encode() (polars.expr.bin method)": [[353, "polars.Expr.bin.encode"]], "ends_with() (polars.expr.bin method)": [[354, "polars.Expr.bin.ends_with"]], "starts_with() (polars.expr.bin method)": [[355, "polars.Expr.bin.starts_with"]], "bottom_k() (polars.expr method)": [[356, "polars.Expr.bottom_k"]], "cast() (polars.expr method)": [[357, "polars.Expr.cast"]], "get_categories() (polars.expr.cat method)": [[358, "polars.Expr.cat.get_categories"]], "set_ordering() (polars.expr.cat method)": [[359, "polars.Expr.cat.set_ordering"]], "cbrt() (polars.expr method)": [[360, "polars.Expr.cbrt"]], "ceil() (polars.expr method)": [[361, "polars.Expr.ceil"]], "clip() (polars.expr method)": [[362, "polars.Expr.clip"]], "clip_max() (polars.expr method)": [[363, "polars.Expr.clip_max"]], "clip_min() (polars.expr method)": [[364, "polars.Expr.clip_min"]], "cos() (polars.expr method)": [[365, "polars.Expr.cos"]], "cosh() (polars.expr method)": [[366, "polars.Expr.cosh"]], "cot() (polars.expr method)": [[367, "polars.Expr.cot"]], "count() (polars.expr method)": [[368, "polars.Expr.count"]], "cum_count() (polars.expr method)": [[369, "polars.Expr.cum_count"]], "cum_max() (polars.expr method)": [[370, "polars.Expr.cum_max"]], "cum_min() (polars.expr method)": [[371, "polars.Expr.cum_min"]], "cum_prod() (polars.expr method)": [[372, "polars.Expr.cum_prod"]], "cum_sum() (polars.expr method)": [[373, "polars.Expr.cum_sum"]], "cumcount() (polars.expr method)": [[374, "polars.Expr.cumcount"]], "cummax() (polars.expr method)": [[375, "polars.Expr.cummax"]], "cummin() (polars.expr method)": [[376, "polars.Expr.cummin"]], "cumprod() (polars.expr method)": [[377, "polars.Expr.cumprod"]], "cumsum() (polars.expr method)": [[378, "polars.Expr.cumsum"]], "cumulative_eval() (polars.expr method)": [[379, "polars.Expr.cumulative_eval"]], "cut() (polars.expr method)": [[380, "polars.Expr.cut"]], "degrees() (polars.expr method)": [[381, "polars.Expr.degrees"]], "diff() (polars.expr method)": [[382, "polars.Expr.diff"]], "dot() (polars.expr method)": [[383, "polars.Expr.dot"]], "drop_nans() (polars.expr method)": [[384, "polars.Expr.drop_nans"]], "drop_nulls() (polars.expr method)": [[385, "polars.Expr.drop_nulls"]], "base_utc_offset() (polars.expr.dt method)": [[386, "polars.Expr.dt.base_utc_offset"]], "cast_time_unit() (polars.expr.dt method)": [[387, "polars.Expr.dt.cast_time_unit"]], "century() (polars.expr.dt method)": [[388, "polars.Expr.dt.century"]], "combine() (polars.expr.dt method)": [[389, "polars.Expr.dt.combine"]], "convert_time_zone() (polars.expr.dt method)": [[390, "polars.Expr.dt.convert_time_zone"]], "date() (polars.expr.dt method)": [[391, "polars.Expr.dt.date"]], "datetime() (polars.expr.dt method)": [[392, "polars.Expr.dt.datetime"]], "day() (polars.expr.dt method)": [[393, "polars.Expr.dt.day"]], "days() (polars.expr.dt method)": [[394, "polars.Expr.dt.days"]], "dst_offset() (polars.expr.dt method)": [[395, "polars.Expr.dt.dst_offset"]], "epoch() (polars.expr.dt method)": [[396, "polars.Expr.dt.epoch"]], "hour() (polars.expr.dt method)": [[397, "polars.Expr.dt.hour"]], "hours() (polars.expr.dt method)": [[398, "polars.Expr.dt.hours"]], "is_leap_year() (polars.expr.dt method)": [[399, "polars.Expr.dt.is_leap_year"]], "iso_year() (polars.expr.dt method)": [[400, "polars.Expr.dt.iso_year"]], "microsecond() (polars.expr.dt method)": [[401, "polars.Expr.dt.microsecond"]], "microseconds() (polars.expr.dt method)": [[402, "polars.Expr.dt.microseconds"]], "millennium() (polars.expr.dt method)": [[403, "polars.Expr.dt.millennium"]], "millisecond() (polars.expr.dt method)": [[404, "polars.Expr.dt.millisecond"]], "milliseconds() (polars.expr.dt method)": [[405, "polars.Expr.dt.milliseconds"]], "minute() (polars.expr.dt method)": [[406, "polars.Expr.dt.minute"]], "minutes() (polars.expr.dt method)": [[407, "polars.Expr.dt.minutes"]], "month() (polars.expr.dt method)": [[408, "polars.Expr.dt.month"]], "month_end() (polars.expr.dt method)": [[409, "polars.Expr.dt.month_end"]], "month_start() (polars.expr.dt method)": [[410, "polars.Expr.dt.month_start"]], "nanosecond() (polars.expr.dt method)": [[411, "polars.Expr.dt.nanosecond"]], "nanoseconds() (polars.expr.dt method)": [[412, "polars.Expr.dt.nanoseconds"]], "offset_by() (polars.expr.dt method)": [[413, "polars.Expr.dt.offset_by"]], "ordinal_day() (polars.expr.dt method)": [[414, "polars.Expr.dt.ordinal_day"]], "quarter() (polars.expr.dt method)": [[415, "polars.Expr.dt.quarter"]], "replace_time_zone() (polars.expr.dt method)": [[416, "polars.Expr.dt.replace_time_zone"]], "round() (polars.expr.dt method)": [[417, "polars.Expr.dt.round"]], "second() (polars.expr.dt method)": [[418, "polars.Expr.dt.second"]], "seconds() (polars.expr.dt method)": [[419, "polars.Expr.dt.seconds"]], "strftime() (polars.expr.dt method)": [[420, "polars.Expr.dt.strftime"]], "time() (polars.expr.dt method)": [[421, "polars.Expr.dt.time"]], "timestamp() (polars.expr.dt method)": [[422, "polars.Expr.dt.timestamp"]], "to_string() (polars.expr.dt method)": [[423, "polars.Expr.dt.to_string"]], "total_days() (polars.expr.dt method)": [[424, "polars.Expr.dt.total_days"]], "total_hours() (polars.expr.dt method)": [[425, "polars.Expr.dt.total_hours"]], "total_microseconds() (polars.expr.dt method)": [[426, "polars.Expr.dt.total_microseconds"]], "total_milliseconds() (polars.expr.dt method)": [[427, "polars.Expr.dt.total_milliseconds"]], "total_minutes() (polars.expr.dt method)": [[428, "polars.Expr.dt.total_minutes"]], "total_nanoseconds() (polars.expr.dt method)": [[429, "polars.Expr.dt.total_nanoseconds"]], "total_seconds() (polars.expr.dt method)": [[430, "polars.Expr.dt.total_seconds"]], "truncate() (polars.expr.dt method)": [[431, "polars.Expr.dt.truncate"]], "week() (polars.expr.dt method)": [[432, "polars.Expr.dt.week"]], "weekday() (polars.expr.dt method)": [[433, "polars.Expr.dt.weekday"]], "with_time_unit() (polars.expr.dt method)": [[434, "polars.Expr.dt.with_time_unit"]], "year() (polars.expr.dt method)": [[435, "polars.Expr.dt.year"]], "entropy() (polars.expr method)": [[436, "polars.Expr.entropy"]], "eq() (polars.expr method)": [[437, "polars.Expr.eq"]], "eq_missing() (polars.expr method)": [[438, "polars.Expr.eq_missing"]], "ewm_mean() (polars.expr method)": [[439, "polars.Expr.ewm_mean"]], "ewm_std() (polars.expr method)": [[440, "polars.Expr.ewm_std"]], "ewm_var() (polars.expr method)": [[441, "polars.Expr.ewm_var"]], "exclude() (polars.expr method)": [[442, "polars.Expr.exclude"]], "exp() (polars.expr method)": [[443, "polars.Expr.exp"]], "explode() (polars.expr method)": [[444, "polars.Expr.explode"]], "extend_constant() (polars.expr method)": [[445, "polars.Expr.extend_constant"]], "fill_nan() (polars.expr method)": [[446, "polars.Expr.fill_nan"]], "fill_null() (polars.expr method)": [[447, "polars.Expr.fill_null"]], "filter() (polars.expr method)": [[448, "polars.Expr.filter"]], "first() (polars.expr method)": [[449, "polars.Expr.first"]], "flatten() (polars.expr method)": [[450, "polars.Expr.flatten"]], "floor() (polars.expr method)": [[451, "polars.Expr.floor"]], "floordiv() (polars.expr method)": [[452, "polars.Expr.floordiv"]], "forward_fill() (polars.expr method)": [[453, "polars.Expr.forward_fill"]], "from_json() (polars.expr class method)": [[454, "polars.Expr.from_json"]], "gather() (polars.expr method)": [[455, "polars.Expr.gather"]], "gather_every() (polars.expr method)": [[456, "polars.Expr.gather_every"]], "ge() (polars.expr method)": [[457, "polars.Expr.ge"]], "get() (polars.expr method)": [[458, "polars.Expr.get"]], "gt() (polars.expr method)": [[459, "polars.Expr.gt"]], "hash() (polars.expr method)": [[460, "polars.Expr.hash"]], "head() (polars.expr method)": [[461, "polars.Expr.head"]], "hist() (polars.expr method)": [[462, "polars.Expr.hist"]], "implode() (polars.expr method)": [[463, "polars.Expr.implode"]], "inspect() (polars.expr method)": [[464, "polars.Expr.inspect"]], "interpolate() (polars.expr method)": [[465, "polars.Expr.interpolate"]], "is_between() (polars.expr method)": [[466, "polars.Expr.is_between"]], "is_duplicated() (polars.expr method)": [[467, "polars.Expr.is_duplicated"]], "is_finite() (polars.expr method)": [[468, "polars.Expr.is_finite"]], "is_first() (polars.expr method)": [[469, "polars.Expr.is_first"]], "is_first_distinct() (polars.expr method)": [[470, "polars.Expr.is_first_distinct"]], "is_in() (polars.expr method)": [[471, "polars.Expr.is_in"]], "is_infinite() (polars.expr method)": [[472, "polars.Expr.is_infinite"]], "is_last() (polars.expr method)": [[473, "polars.Expr.is_last"]], "is_last_distinct() (polars.expr method)": [[474, "polars.Expr.is_last_distinct"]], "is_nan() (polars.expr method)": [[475, "polars.Expr.is_nan"]], "is_not() (polars.expr method)": [[476, "polars.Expr.is_not"]], "is_not_nan() (polars.expr method)": [[477, "polars.Expr.is_not_nan"]], "is_not_null() (polars.expr method)": [[478, "polars.Expr.is_not_null"]], "is_null() (polars.expr method)": [[479, "polars.Expr.is_null"]], "is_unique() (polars.expr method)": [[480, "polars.Expr.is_unique"]], "keep_name() (polars.expr method)": [[481, "polars.Expr.keep_name"]], "kurtosis() (polars.expr method)": [[482, "polars.Expr.kurtosis"]], "last() (polars.expr method)": [[483, "polars.Expr.last"]], "le() (polars.expr method)": [[484, "polars.Expr.le"]], "len() (polars.expr method)": [[485, "polars.Expr.len"]], "limit() (polars.expr method)": [[486, "polars.Expr.limit"]], "all() (polars.expr.list method)": [[487, "polars.Expr.list.all"]], "any() (polars.expr.list method)": [[488, "polars.Expr.list.any"]], "arg_max() (polars.expr.list method)": [[489, "polars.Expr.list.arg_max"]], "arg_min() (polars.expr.list method)": [[490, "polars.Expr.list.arg_min"]], "concat() (polars.expr.list method)": [[491, "polars.Expr.list.concat"]], "contains() (polars.expr.list method)": [[492, "polars.Expr.list.contains"]], "count_match() (polars.expr.list method)": [[493, "polars.Expr.list.count_match"]], "count_matches() (polars.expr.list method)": [[494, "polars.Expr.list.count_matches"]], "diff() (polars.expr.list method)": [[495, "polars.Expr.list.diff"]], "drop_nulls() (polars.expr.list method)": [[496, "polars.Expr.list.drop_nulls"]], "eval() (polars.expr.list method)": [[497, "polars.Expr.list.eval"]], "explode() (polars.expr.list method)": [[498, "polars.Expr.list.explode"]], "first() (polars.expr.list method)": [[499, "polars.Expr.list.first"]], "gather() (polars.expr.list method)": [[500, "polars.Expr.list.gather"]], "get() (polars.expr.list method)": [[501, "polars.Expr.list.get"]], "head() (polars.expr.list method)": [[502, "polars.Expr.list.head"]], "join() (polars.expr.list method)": [[503, "polars.Expr.list.join"]], "last() (polars.expr.list method)": [[504, "polars.Expr.list.last"]], "len() (polars.expr.list method)": [[505, "polars.Expr.list.len"]], "lengths() (polars.expr.list method)": [[506, "polars.Expr.list.lengths"]], "max() (polars.expr.list method)": [[507, "polars.Expr.list.max"]], "mean() (polars.expr.list method)": [[508, "polars.Expr.list.mean"]], "median() (polars.expr.list method)": [[509, "polars.Expr.list.median"]], "min() (polars.expr.list method)": [[510, "polars.Expr.list.min"]], "reverse() (polars.expr.list method)": [[511, "polars.Expr.list.reverse"]], "sample() (polars.expr.list method)": [[512, "polars.Expr.list.sample"]], "set_difference() (polars.expr.list method)": [[513, "polars.Expr.list.set_difference"]], "set_intersection() (polars.expr.list method)": [[514, "polars.Expr.list.set_intersection"]], "set_symmetric_difference() (polars.expr.list method)": [[515, "polars.Expr.list.set_symmetric_difference"]], "set_union() (polars.expr.list method)": [[516, "polars.Expr.list.set_union"]], "shift() (polars.expr.list method)": [[517, "polars.Expr.list.shift"]], "slice() (polars.expr.list method)": [[518, "polars.Expr.list.slice"]], "sort() (polars.expr.list method)": [[519, "polars.Expr.list.sort"]], "std() (polars.expr.list method)": [[520, "polars.Expr.list.std"]], "sum() (polars.expr.list method)": [[521, "polars.Expr.list.sum"]], "tail() (polars.expr.list method)": [[522, "polars.Expr.list.tail"]], "take() (polars.expr.list method)": [[523, "polars.Expr.list.take"]], "to_array() (polars.expr.list method)": [[524, "polars.Expr.list.to_array"]], "to_struct() (polars.expr.list method)": [[525, "polars.Expr.list.to_struct"]], "unique() (polars.expr.list method)": [[526, "polars.Expr.list.unique"]], "var() (polars.expr.list method)": [[527, "polars.Expr.list.var"]], "log() (polars.expr method)": [[528, "polars.Expr.log"]], "log10() (polars.expr method)": [[529, "polars.Expr.log10"]], "log1p() (polars.expr method)": [[530, "polars.Expr.log1p"]], "lower_bound() (polars.expr method)": [[531, "polars.Expr.lower_bound"]], "lt() (polars.expr method)": [[532, "polars.Expr.lt"]], "map() (polars.expr method)": [[533, "polars.Expr.map"]], "map_alias() (polars.expr method)": [[534, "polars.Expr.map_alias"]], "map_batches() (polars.expr method)": [[535, "polars.Expr.map_batches"]], "map_dict() (polars.expr method)": [[536, "polars.Expr.map_dict"]], "map_elements() (polars.expr method)": [[537, "polars.Expr.map_elements"]], "max() (polars.expr method)": [[538, "polars.Expr.max"]], "mean() (polars.expr method)": [[539, "polars.Expr.mean"]], "median() (polars.expr method)": [[540, "polars.Expr.median"]], "eq() (polars.expr.meta method)": [[541, "polars.Expr.meta.eq"]], "has_multiple_outputs() (polars.expr.meta method)": [[542, "polars.Expr.meta.has_multiple_outputs"]], "is_regex_projection() (polars.expr.meta method)": [[543, "polars.Expr.meta.is_regex_projection"]], "ne() (polars.expr.meta method)": [[544, "polars.Expr.meta.ne"]], "output_name() (polars.expr.meta method)": [[545, "polars.Expr.meta.output_name"]], "pop() (polars.expr.meta method)": [[546, "polars.Expr.meta.pop"]], "root_names() (polars.expr.meta method)": [[547, "polars.Expr.meta.root_names"]], "tree_format() (polars.expr.meta method)": [[548, "polars.Expr.meta.tree_format"]], "undo_aliases() (polars.expr.meta method)": [[549, "polars.Expr.meta.undo_aliases"]], "write_json() (polars.expr.meta method)": [[550, "polars.Expr.meta.write_json"]], "min() (polars.expr method)": [[551, "polars.Expr.min"]], "mod() (polars.expr method)": [[552, "polars.Expr.mod"]], "mode() (polars.expr method)": [[553, "polars.Expr.mode"]], "mul() (polars.expr method)": [[554, "polars.Expr.mul"]], "n_unique() (polars.expr method)": [[555, "polars.Expr.n_unique"]], "keep() (polars.expr.name method)": [[556, "polars.Expr.name.keep"]], "map() (polars.expr.name method)": [[557, "polars.Expr.name.map"]], "prefix() (polars.expr.name method)": [[558, "polars.Expr.name.prefix"]], "suffix() (polars.expr.name method)": [[559, "polars.Expr.name.suffix"]], "to_lowercase() (polars.expr.name method)": [[560, "polars.Expr.name.to_lowercase"]], "to_uppercase() (polars.expr.name method)": [[561, "polars.Expr.name.to_uppercase"]], "nan_max() (polars.expr method)": [[562, "polars.Expr.nan_max"]], "nan_min() (polars.expr method)": [[563, "polars.Expr.nan_min"]], "ne() (polars.expr method)": [[564, "polars.Expr.ne"]], "ne_missing() (polars.expr method)": [[565, "polars.Expr.ne_missing"]], "neg() (polars.expr method)": [[566, "polars.Expr.neg"]], "not_() (polars.expr method)": [[567, "polars.Expr.not_"]], "null_count() (polars.expr method)": [[568, "polars.Expr.null_count"]], "or_() (polars.expr method)": [[569, "polars.Expr.or_"]], "over() (polars.expr method)": [[570, "polars.Expr.over"]], "pct_change() (polars.expr method)": [[571, "polars.Expr.pct_change"]], "peak_max() (polars.expr method)": [[572, "polars.Expr.peak_max"]], "peak_min() (polars.expr method)": [[573, "polars.Expr.peak_min"]], "pipe() (polars.expr method)": [[574, "polars.Expr.pipe"]], "pow() (polars.expr method)": [[575, "polars.Expr.pow"]], "prefix() (polars.expr method)": [[576, "polars.Expr.prefix"]], "product() (polars.expr method)": [[577, "polars.Expr.product"]], "qcut() (polars.expr method)": [[578, "polars.Expr.qcut"]], "quantile() (polars.expr method)": [[579, "polars.Expr.quantile"]], "radians() (polars.expr method)": [[580, "polars.Expr.radians"]], "rank() (polars.expr method)": [[581, "polars.Expr.rank"]], "rechunk() (polars.expr method)": [[582, "polars.Expr.rechunk"]], "reinterpret() (polars.expr method)": [[583, "polars.Expr.reinterpret"]], "repeat_by() (polars.expr method)": [[584, "polars.Expr.repeat_by"]], "replace() (polars.expr method)": [[585, "polars.Expr.replace"]], "reshape() (polars.expr method)": [[586, "polars.Expr.reshape"]], "reverse() (polars.expr method)": [[587, "polars.Expr.reverse"]], "rle() (polars.expr method)": [[588, "polars.Expr.rle"]], "rle_id() (polars.expr method)": [[589, "polars.Expr.rle_id"]], "rolling() (polars.expr method)": [[590, "polars.Expr.rolling"]], "rolling_apply() (polars.expr method)": [[591, "polars.Expr.rolling_apply"]], "rolling_map() (polars.expr method)": [[592, "polars.Expr.rolling_map"]], "rolling_max() (polars.expr method)": [[593, "polars.Expr.rolling_max"]], "rolling_mean() (polars.expr method)": [[594, "polars.Expr.rolling_mean"]], "rolling_median() (polars.expr method)": [[595, "polars.Expr.rolling_median"]], "rolling_min() (polars.expr method)": [[596, "polars.Expr.rolling_min"]], "rolling_quantile() (polars.expr method)": [[597, "polars.Expr.rolling_quantile"]], "rolling_skew() (polars.expr method)": [[598, "polars.Expr.rolling_skew"]], "rolling_std() (polars.expr method)": [[599, "polars.Expr.rolling_std"]], "rolling_sum() (polars.expr method)": [[600, "polars.Expr.rolling_sum"]], "rolling_var() (polars.expr method)": [[601, "polars.Expr.rolling_var"]], "round() (polars.expr method)": [[602, "polars.Expr.round"]], "round_sig_figs() (polars.expr method)": [[603, "polars.Expr.round_sig_figs"]], "sample() (polars.expr method)": [[604, "polars.Expr.sample"]], "search_sorted() (polars.expr method)": [[605, "polars.Expr.search_sorted"]], "set_sorted() (polars.expr method)": [[606, "polars.Expr.set_sorted"]], "shift() (polars.expr method)": [[607, "polars.Expr.shift"]], "shift_and_fill() (polars.expr method)": [[608, "polars.Expr.shift_and_fill"]], "shrink_dtype() (polars.expr method)": [[609, "polars.Expr.shrink_dtype"]], "shuffle() (polars.expr method)": [[610, "polars.Expr.shuffle"]], "sign() (polars.expr method)": [[611, "polars.Expr.sign"]], "sin() (polars.expr method)": [[612, "polars.Expr.sin"]], "sinh() (polars.expr method)": [[613, "polars.Expr.sinh"]], "skew() (polars.expr method)": [[614, "polars.Expr.skew"]], "slice() (polars.expr method)": [[615, "polars.Expr.slice"]], "sort() (polars.expr method)": [[616, "polars.Expr.sort"]], "sort_by() (polars.expr method)": [[617, "polars.Expr.sort_by"]], "sqrt() (polars.expr method)": [[618, "polars.Expr.sqrt"]], "std() (polars.expr method)": [[619, "polars.Expr.std"]], "concat() (polars.expr.str method)": [[620, "polars.Expr.str.concat"]], "contains() (polars.expr.str method)": [[621, "polars.Expr.str.contains"]], "contains_any() (polars.expr.str method)": [[622, "polars.Expr.str.contains_any"]], "count_match() (polars.expr.str method)": [[623, "polars.Expr.str.count_match"]], "count_matches() (polars.expr.str method)": [[624, "polars.Expr.str.count_matches"]], "decode() (polars.expr.str method)": [[625, "polars.Expr.str.decode"]], "encode() (polars.expr.str method)": [[626, "polars.Expr.str.encode"]], "ends_with() (polars.expr.str method)": [[627, "polars.Expr.str.ends_with"]], "explode() (polars.expr.str method)": [[628, "polars.Expr.str.explode"]], "extract() (polars.expr.str method)": [[629, "polars.Expr.str.extract"]], "extract_all() (polars.expr.str method)": [[630, "polars.Expr.str.extract_all"]], "extract_groups() (polars.expr.str method)": [[631, "polars.Expr.str.extract_groups"]], "find() (polars.expr.str method)": [[632, "polars.Expr.str.find"]], "json_decode() (polars.expr.str method)": [[633, "polars.Expr.str.json_decode"]], "json_extract() (polars.expr.str method)": [[634, "polars.Expr.str.json_extract"]], "json_path_match() (polars.expr.str method)": [[635, "polars.Expr.str.json_path_match"]], "len_bytes() (polars.expr.str method)": [[636, "polars.Expr.str.len_bytes"]], "len_chars() (polars.expr.str method)": [[637, "polars.Expr.str.len_chars"]], "lengths() (polars.expr.str method)": [[638, "polars.Expr.str.lengths"]], "ljust() (polars.expr.str method)": [[639, "polars.Expr.str.ljust"]], "lstrip() (polars.expr.str method)": [[640, "polars.Expr.str.lstrip"]], "n_chars() (polars.expr.str method)": [[641, "polars.Expr.str.n_chars"]], "pad_end() (polars.expr.str method)": [[642, "polars.Expr.str.pad_end"]], "pad_start() (polars.expr.str method)": [[643, "polars.Expr.str.pad_start"]], "parse_int() (polars.expr.str method)": [[644, "polars.Expr.str.parse_int"]], "replace() (polars.expr.str method)": [[645, "polars.Expr.str.replace"]], "replace_all() (polars.expr.str method)": [[646, "polars.Expr.str.replace_all"]], "replace_many() (polars.expr.str method)": [[647, "polars.Expr.str.replace_many"]], "reverse() (polars.expr.str method)": [[648, "polars.Expr.str.reverse"]], "rjust() (polars.expr.str method)": [[649, "polars.Expr.str.rjust"]], "rstrip() (polars.expr.str method)": [[650, "polars.Expr.str.rstrip"]], "slice() (polars.expr.str method)": [[651, "polars.Expr.str.slice"]], "split() (polars.expr.str method)": [[652, "polars.Expr.str.split"]], "split_exact() (polars.expr.str method)": [[653, "polars.Expr.str.split_exact"]], "splitn() (polars.expr.str method)": [[654, "polars.Expr.str.splitn"]], "starts_with() (polars.expr.str method)": [[655, "polars.Expr.str.starts_with"]], "strip() (polars.expr.str method)": [[656, "polars.Expr.str.strip"]], "strip_chars() (polars.expr.str method)": [[657, "polars.Expr.str.strip_chars"]], "strip_chars_end() (polars.expr.str method)": [[658, "polars.Expr.str.strip_chars_end"]], "strip_chars_start() (polars.expr.str method)": [[659, "polars.Expr.str.strip_chars_start"]], "strip_prefix() (polars.expr.str method)": [[660, "polars.Expr.str.strip_prefix"]], "strip_suffix() (polars.expr.str method)": [[661, "polars.Expr.str.strip_suffix"]], "strptime() (polars.expr.str method)": [[662, "polars.Expr.str.strptime"]], "to_date() (polars.expr.str method)": [[663, "polars.Expr.str.to_date"]], "to_datetime() (polars.expr.str method)": [[664, "polars.Expr.str.to_datetime"]], "to_decimal() (polars.expr.str method)": [[665, "polars.Expr.str.to_decimal"]], "to_integer() (polars.expr.str method)": [[666, "polars.Expr.str.to_integer"]], "to_lowercase() (polars.expr.str method)": [[667, "polars.Expr.str.to_lowercase"]], "to_time() (polars.expr.str method)": [[668, "polars.Expr.str.to_time"]], "to_titlecase() (polars.expr.str method)": [[669, "polars.Expr.str.to_titlecase"]], "to_uppercase() (polars.expr.str method)": [[670, "polars.Expr.str.to_uppercase"]], "zfill() (polars.expr.str method)": [[671, "polars.Expr.str.zfill"]], "field() (polars.expr.struct method)": [[672, "polars.Expr.struct.field"]], "json_encode() (polars.expr.struct method)": [[673, "polars.Expr.struct.json_encode"]], "rename_fields() (polars.expr.struct method)": [[674, "polars.Expr.struct.rename_fields"]], "sub() (polars.expr method)": [[675, "polars.Expr.sub"]], "suffix() (polars.expr method)": [[676, "polars.Expr.suffix"]], "sum() (polars.expr method)": [[677, "polars.Expr.sum"]], "tail() (polars.expr method)": [[678, "polars.Expr.tail"]], "take() (polars.expr method)": [[679, "polars.Expr.take"]], "take_every() (polars.expr method)": [[680, "polars.Expr.take_every"]], "tan() (polars.expr method)": [[681, "polars.Expr.tan"]], "tanh() (polars.expr method)": [[682, "polars.Expr.tanh"]], "to_physical() (polars.expr method)": [[683, "polars.Expr.to_physical"]], "top_k() (polars.expr method)": [[684, "polars.Expr.top_k"]], "truediv() (polars.expr method)": [[685, "polars.Expr.truediv"]], "unique() (polars.expr method)": [[686, "polars.Expr.unique"]], "unique_counts() (polars.expr method)": [[687, "polars.Expr.unique_counts"]], "upper_bound() (polars.expr method)": [[688, "polars.Expr.upper_bound"]], "value_counts() (polars.expr method)": [[689, "polars.Expr.value_counts"]], "var() (polars.expr method)": [[690, "polars.Expr.var"]], "where() (polars.expr method)": [[691, "polars.Expr.where"]], "xor() (polars.expr method)": [[692, "polars.Expr.xor"]], "all() (in module polars)": [[693, "polars.all"]], "all_horizontal() (in module polars)": [[694, "polars.all_horizontal"]], "any() (in module polars)": [[695, "polars.any"]], "any_horizontal() (in module polars)": [[696, "polars.any_horizontal"]], "apply() (in module polars)": [[697, "polars.apply"]], "approx_n_unique() (in module polars)": [[698, "polars.approx_n_unique"]], "arange() (in module polars)": [[699, "polars.arange"]], "arctan2() (in module polars)": [[700, "polars.arctan2"]], "arctan2d() (in module polars)": [[701, "polars.arctan2d"]], "arg_sort_by() (in module polars)": [[702, "polars.arg_sort_by"]], "arg_where() (in module polars)": [[703, "polars.arg_where"]], "coalesce() (in module polars)": [[704, "polars.coalesce"]], "concat_list() (in module polars)": [[705, "polars.concat_list"]], "concat_str() (in module polars)": [[706, "polars.concat_str"]], "corr() (in module polars)": [[707, "polars.corr"]], "count() (in module polars)": [[708, "polars.count"]], "cov() (in module polars)": [[709, "polars.cov"]], "cum_count() (in module polars)": [[710, "polars.cum_count"]], "cum_fold() (in module polars)": [[711, "polars.cum_fold"]], "cum_reduce() (in module polars)": [[712, "polars.cum_reduce"]], "cum_sum() (in module polars)": [[713, "polars.cum_sum"]], "cum_sum_horizontal() (in module polars)": [[714, "polars.cum_sum_horizontal"]], "cumfold() (in module polars)": [[715, "polars.cumfold"]], "cumreduce() (in module polars)": [[716, "polars.cumreduce"]], "cumsum() (in module polars)": [[717, "polars.cumsum"]], "cumsum_horizontal() (in module polars)": [[718, "polars.cumsum_horizontal"]], "date() (in module polars)": [[719, "polars.date"]], "date_range() (in module polars)": [[720, "polars.date_range"]], "date_ranges() (in module polars)": [[721, "polars.date_ranges"]], "datetime() (in module polars)": [[722, "polars.datetime"]], "datetime_range() (in module polars)": [[723, "polars.datetime_range"]], "datetime_ranges() (in module polars)": [[724, "polars.datetime_ranges"]], "duration() (in module polars)": [[725, "polars.duration"]], "element() (in module polars)": [[726, "polars.element"]], "exclude() (in module polars)": [[727, "polars.exclude"]], "first() (in module polars)": [[728, "polars.first"]], "fold() (in module polars)": [[729, "polars.fold"]], "format() (in module polars)": [[730, "polars.format"]], "from_epoch() (in module polars)": [[731, "polars.from_epoch"]], "groups() (in module polars)": [[732, "polars.groups"]], "head() (in module polars)": [[733, "polars.head"]], "implode() (in module polars)": [[734, "polars.implode"]], "int_range() (in module polars)": [[735, "polars.int_range"]], "int_ranges() (in module polars)": [[736, "polars.int_ranges"]], "last() (in module polars)": [[737, "polars.last"]], "len() (in module polars)": [[738, "polars.len"]], "lit() (in module polars)": [[739, "polars.lit"]], "map() (in module polars)": [[740, "polars.map"]], "map_batches() (in module polars)": [[741, "polars.map_batches"]], "map_groups() (in module polars)": [[742, "polars.map_groups"]], "max() (in module polars)": [[743, "polars.max"]], "max_horizontal() (in module polars)": [[744, "polars.max_horizontal"]], "mean() (in module polars)": [[745, "polars.mean"]], "median() (in module polars)": [[746, "polars.median"]], "min() (in module polars)": [[747, "polars.min"]], "min_horizontal() (in module polars)": [[748, "polars.min_horizontal"]], "n_unique() (in module polars)": [[749, "polars.n_unique"]], "ones() (in module polars)": [[750, "polars.ones"]], "quantile() (in module polars)": [[751, "polars.quantile"]], "reduce() (in module polars)": [[752, "polars.reduce"]], "repeat() (in module polars)": [[753, "polars.repeat"]], "rolling_corr() (in module polars)": [[754, "polars.rolling_corr"]], "rolling_cov() (in module polars)": [[755, "polars.rolling_cov"]], "select() (in module polars)": [[756, "polars.select"]], "sql_expr() (in module polars)": [[757, "polars.sql_expr"]], "std() (in module polars)": [[758, "polars.std"]], "struct() (in module polars)": [[759, "polars.struct"]], "sum() (in module polars)": [[760, "polars.sum"]], "sum_horizontal() (in module polars)": [[761, "polars.sum_horizontal"]], "tail() (in module polars)": [[762, "polars.tail"]], "time() (in module polars)": [[763, "polars.time"]], "time_range() (in module polars)": [[764, "polars.time_range"]], "time_ranges() (in module polars)": [[765, "polars.time_ranges"]], "var() (in module polars)": [[766, "polars.var"]], "when() (in module polars)": [[767, "polars.when"]], "zeros() (in module polars)": [[768, "polars.zeros"]], "approx_n_unique() (polars.lazyframe method)": [[792, "polars.LazyFrame.approx_n_unique"]], "bottom_k() (polars.lazyframe method)": [[793, "polars.LazyFrame.bottom_k"]], "cache() (polars.lazyframe method)": [[794, "polars.LazyFrame.cache"]], "cast() (polars.lazyframe method)": [[795, "polars.LazyFrame.cast"]], "clear() (polars.lazyframe method)": [[796, "polars.LazyFrame.clear"]], "clone() (polars.lazyframe method)": [[797, "polars.LazyFrame.clone"]], "collect() (polars.lazyframe method)": [[798, "polars.LazyFrame.collect"]], "collect_async() (polars.lazyframe method)": [[799, "polars.LazyFrame.collect_async"]], "columns (polars.lazyframe property)": [[800, "polars.LazyFrame.columns"]], "count() (polars.lazyframe method)": [[801, "polars.LazyFrame.count"]], "describe() (polars.lazyframe method)": [[802, "polars.LazyFrame.describe"]], "deserialize() (polars.lazyframe class method)": [[803, "polars.LazyFrame.deserialize"]], "drop() (polars.lazyframe method)": [[804, "polars.LazyFrame.drop"]], "drop_nulls() (polars.lazyframe method)": [[805, "polars.LazyFrame.drop_nulls"]], "dtypes (polars.lazyframe property)": [[806, "polars.LazyFrame.dtypes"]], "explain() (polars.lazyframe method)": [[807, "polars.LazyFrame.explain"]], "explode() (polars.lazyframe method)": [[808, "polars.LazyFrame.explode"]], "fetch() (polars.lazyframe method)": [[809, "polars.LazyFrame.fetch"]], "fill_nan() (polars.lazyframe method)": [[810, "polars.LazyFrame.fill_nan"]], "fill_null() (polars.lazyframe method)": [[811, "polars.LazyFrame.fill_null"]], "filter() (polars.lazyframe method)": [[812, "polars.LazyFrame.filter"]], "first() (polars.lazyframe method)": [[813, "polars.LazyFrame.first"]], "gather_every() (polars.lazyframe method)": [[814, "polars.LazyFrame.gather_every"]], "group_by() (polars.lazyframe method)": [[815, "polars.LazyFrame.group_by"]], "group_by_dynamic() (polars.lazyframe method)": [[816, "polars.LazyFrame.group_by_dynamic"]], "group_by_rolling() (polars.lazyframe method)": [[817, "polars.LazyFrame.group_by_rolling"]], "groupby() (polars.lazyframe method)": [[818, "polars.LazyFrame.groupby"]], "groupby_dynamic() (polars.lazyframe method)": [[819, "polars.LazyFrame.groupby_dynamic"]], "groupby_rolling() (polars.lazyframe method)": [[820, "polars.LazyFrame.groupby_rolling"]], "head() (polars.lazyframe method)": [[821, "polars.LazyFrame.head"]], "inspect() (polars.lazyframe method)": [[822, "polars.LazyFrame.inspect"]], "interpolate() (polars.lazyframe method)": [[823, "polars.LazyFrame.interpolate"]], "join() (polars.lazyframe method)": [[824, "polars.LazyFrame.join"]], "join_asof() (polars.lazyframe method)": [[825, "polars.LazyFrame.join_asof"]], "last() (polars.lazyframe method)": [[826, "polars.LazyFrame.last"]], "lazy() (polars.lazyframe method)": [[827, "polars.LazyFrame.lazy"]], "limit() (polars.lazyframe method)": [[828, "polars.LazyFrame.limit"]], "map() (polars.lazyframe method)": [[829, "polars.LazyFrame.map"]], "map_batches() (polars.lazyframe method)": [[830, "polars.LazyFrame.map_batches"]], "max() (polars.lazyframe method)": [[831, "polars.LazyFrame.max"]], "mean() (polars.lazyframe method)": [[832, "polars.LazyFrame.mean"]], "median() (polars.lazyframe method)": [[833, "polars.LazyFrame.median"]], "melt() (polars.lazyframe method)": [[834, "polars.LazyFrame.melt"]], "merge_sorted() (polars.lazyframe method)": [[835, "polars.LazyFrame.merge_sorted"]], "min() (polars.lazyframe method)": [[836, "polars.LazyFrame.min"]], "null_count() (polars.lazyframe method)": [[837, "polars.LazyFrame.null_count"]], "pipe() (polars.lazyframe method)": [[838, "polars.LazyFrame.pipe"]], "profile() (polars.lazyframe method)": [[839, "polars.LazyFrame.profile"]], "quantile() (polars.lazyframe method)": [[840, "polars.LazyFrame.quantile"]], "rename() (polars.lazyframe method)": [[841, "polars.LazyFrame.rename"]], "reverse() (polars.lazyframe method)": [[842, "polars.LazyFrame.reverse"]], "rolling() (polars.lazyframe method)": [[843, "polars.LazyFrame.rolling"]], "schema (polars.lazyframe property)": [[844, "polars.LazyFrame.schema"]], "select() (polars.lazyframe method)": [[845, "polars.LazyFrame.select"]], "select_seq() (polars.lazyframe method)": [[846, "polars.LazyFrame.select_seq"]], "serialize() (polars.lazyframe method)": [[847, "polars.LazyFrame.serialize"]], "set_sorted() (polars.lazyframe method)": [[848, "polars.LazyFrame.set_sorted"]], "shift() (polars.lazyframe method)": [[849, "polars.LazyFrame.shift"]], "shift_and_fill() (polars.lazyframe method)": [[850, "polars.LazyFrame.shift_and_fill"]], "show_graph() (polars.lazyframe method)": [[851, "polars.LazyFrame.show_graph"]], "slice() (polars.lazyframe method)": [[852, "polars.LazyFrame.slice"]], "sort() (polars.lazyframe method)": [[853, "polars.LazyFrame.sort"]], "std() (polars.lazyframe method)": [[854, "polars.LazyFrame.std"]], "sum() (polars.lazyframe method)": [[855, "polars.LazyFrame.sum"]], "tail() (polars.lazyframe method)": [[856, "polars.LazyFrame.tail"]], "take_every() (polars.lazyframe method)": [[857, "polars.LazyFrame.take_every"]], "top_k() (polars.lazyframe method)": [[858, "polars.LazyFrame.top_k"]], "unique() (polars.lazyframe method)": [[859, "polars.LazyFrame.unique"]], "unnest() (polars.lazyframe method)": [[860, "polars.LazyFrame.unnest"]], "update() (polars.lazyframe method)": [[861, "polars.LazyFrame.update"]], "var() (polars.lazyframe method)": [[862, "polars.LazyFrame.var"]], "width (polars.lazyframe property)": [[863, "polars.LazyFrame.width"]], "with_columns() (polars.lazyframe method)": [[864, "polars.LazyFrame.with_columns"]], "with_columns_seq() (polars.lazyframe method)": [[865, "polars.LazyFrame.with_columns_seq"]], "with_context() (polars.lazyframe method)": [[866, "polars.LazyFrame.with_context"]], "with_row_count() (polars.lazyframe method)": [[867, "polars.LazyFrame.with_row_count"]], "with_row_index() (polars.lazyframe method)": [[868, "polars.LazyFrame.with_row_index"]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[869, "polars.lazyframe.group_by.LazyGroupBy.agg"]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[870, "polars.lazyframe.group_by.LazyGroupBy.all"]], "apply() (polars.lazyframe.group_by.lazygroupby method)": [[871, "polars.lazyframe.group_by.LazyGroupBy.apply"]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[872, "polars.lazyframe.group_by.LazyGroupBy.count"]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[873, "polars.lazyframe.group_by.LazyGroupBy.first"]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[874, "polars.lazyframe.group_by.LazyGroupBy.head"]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[875, "polars.lazyframe.group_by.LazyGroupBy.last"]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[876, "polars.lazyframe.group_by.LazyGroupBy.len"]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[877, "polars.lazyframe.group_by.LazyGroupBy.map_groups"]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[878, "polars.lazyframe.group_by.LazyGroupBy.max"]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[879, "polars.lazyframe.group_by.LazyGroupBy.mean"]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[880, "polars.lazyframe.group_by.LazyGroupBy.median"]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[881, "polars.lazyframe.group_by.LazyGroupBy.min"]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[882, "polars.lazyframe.group_by.LazyGroupBy.n_unique"]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[883, "polars.lazyframe.group_by.LazyGroupBy.quantile"]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[884, "polars.lazyframe.group_by.LazyGroupBy.sum"]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[885, "polars.lazyframe.group_by.LazyGroupBy.tail"]], "all() (in module polars.selectors)": [[892, "polars.selectors.all"]], "by_dtype() (in module polars.selectors)": [[892, "polars.selectors.by_dtype"]], "by_name() (in module polars.selectors)": [[892, "polars.selectors.by_name"]], "categorical() (in module polars.selectors)": [[892, "polars.selectors.categorical"]], "contains() (in module polars.selectors)": [[892, "polars.selectors.contains"]], "date() (in module polars.selectors)": [[892, "polars.selectors.date"]], "datetime() (in module polars.selectors)": [[892, "polars.selectors.datetime"]], "duration() (in module polars.selectors)": [[892, "polars.selectors.duration"]], "ends_with() (in module polars.selectors)": [[892, "polars.selectors.ends_with"]], "expand_selector() (in module polars.selectors)": [[892, "polars.selectors.expand_selector"]], "first() (in module polars.selectors)": [[892, "polars.selectors.first"]], "float() (in module polars.selectors)": [[892, "polars.selectors.float"]], "integer() (in module polars.selectors)": [[892, "polars.selectors.integer"]], "is_selector() (in module polars.selectors)": [[892, "polars.selectors.is_selector"]], "last() (in module polars.selectors)": [[892, "polars.selectors.last"]], "matches() (in module polars.selectors)": [[892, "polars.selectors.matches"]], "module": [[892, "module-polars.selectors"]], "numeric() (in module polars.selectors)": [[892, "polars.selectors.numeric"]], "polars.selectors": [[892, "module-polars.selectors"]], "starts_with() (in module polars.selectors)": [[892, "polars.selectors.starts_with"]], "string() (in module polars.selectors)": [[892, "polars.selectors.string"]], "temporal() (in module polars.selectors)": [[892, "polars.selectors.temporal"]], "time() (in module polars.selectors)": [[892, "polars.selectors.time"]], "abs() (polars.series method)": [[894, "polars.Series.abs"]], "alias() (polars.series method)": [[895, "polars.Series.alias"]], "all() (polars.series method)": [[896, "polars.Series.all"]], "any() (polars.series method)": [[897, "polars.Series.any"]], "append() (polars.series method)": [[898, "polars.Series.append"]], "apply() (polars.series method)": [[899, "polars.Series.apply"]], "arccos() (polars.series method)": [[900, "polars.Series.arccos"]], "arccosh() (polars.series method)": [[901, "polars.Series.arccosh"]], "arcsin() (polars.series method)": [[902, "polars.Series.arcsin"]], "arcsinh() (polars.series method)": [[903, "polars.Series.arcsinh"]], "arctan() (polars.series method)": [[904, "polars.Series.arctan"]], "arctanh() (polars.series method)": [[905, "polars.Series.arctanh"]], "arg_max() (polars.series method)": [[906, "polars.Series.arg_max"]], "arg_min() (polars.series method)": [[907, "polars.Series.arg_min"]], "arg_sort() (polars.series method)": [[908, "polars.Series.arg_sort"]], "arg_true() (polars.series method)": [[909, "polars.Series.arg_true"]], "arg_unique() (polars.series method)": [[910, "polars.Series.arg_unique"]], "all() (polars.series.arr method)": [[911, "polars.Series.arr.all"]], "any() (polars.series.arr method)": [[912, "polars.Series.arr.any"]], "arg_max() (polars.series.arr method)": [[913, "polars.Series.arr.arg_max"]], "arg_min() (polars.series.arr method)": [[914, "polars.Series.arr.arg_min"]], "contains() (polars.series.arr method)": [[915, "polars.Series.arr.contains"]], "count_matches() (polars.series.arr method)": [[916, "polars.Series.arr.count_matches"]], "explode() (polars.series.arr method)": [[917, "polars.Series.arr.explode"]], "first() (polars.series.arr method)": [[918, "polars.Series.arr.first"]], "get() (polars.series.arr method)": [[919, "polars.Series.arr.get"]], "join() (polars.series.arr method)": [[920, "polars.Series.arr.join"]], "last() (polars.series.arr method)": [[921, "polars.Series.arr.last"]], "max() (polars.series.arr method)": [[922, "polars.Series.arr.max"]], "median() (polars.series.arr method)": [[923, "polars.Series.arr.median"]], "min() (polars.series.arr method)": [[924, "polars.Series.arr.min"]], "reverse() (polars.series.arr method)": [[925, "polars.Series.arr.reverse"]], "sort() (polars.series.arr method)": [[926, "polars.Series.arr.sort"]], "std() (polars.series.arr method)": [[927, "polars.Series.arr.std"]], "sum() (polars.series.arr method)": [[928, "polars.Series.arr.sum"]], "to_list() (polars.series.arr method)": [[929, "polars.Series.arr.to_list"]], "unique() (polars.series.arr method)": [[930, "polars.Series.arr.unique"]], "var() (polars.series.arr method)": [[931, "polars.Series.arr.var"]], "contains() (polars.series.bin method)": [[932, "polars.Series.bin.contains"]], "decode() (polars.series.bin method)": [[933, "polars.Series.bin.decode"]], "encode() (polars.series.bin method)": [[934, "polars.Series.bin.encode"]], "ends_with() (polars.series.bin method)": [[935, "polars.Series.bin.ends_with"]], "starts_with() (polars.series.bin method)": [[936, "polars.Series.bin.starts_with"]], "bottom_k() (polars.series method)": [[937, "polars.Series.bottom_k"]], "cast() (polars.series method)": [[938, "polars.Series.cast"]], "get_categories() (polars.series.cat method)": [[939, "polars.Series.cat.get_categories"]], "is_local() (polars.series.cat method)": [[940, "polars.Series.cat.is_local"]], "set_ordering() (polars.series.cat method)": [[941, "polars.Series.cat.set_ordering"]], "to_local() (polars.series.cat method)": [[942, "polars.Series.cat.to_local"]], "uses_lexical_ordering() (polars.series.cat method)": [[943, "polars.Series.cat.uses_lexical_ordering"]], "cbrt() (polars.series method)": [[944, "polars.Series.cbrt"]], "ceil() (polars.series method)": [[945, "polars.Series.ceil"]], "chunk_lengths() (polars.series method)": [[946, "polars.Series.chunk_lengths"]], "clear() (polars.series method)": [[947, "polars.Series.clear"]], "clip() (polars.series method)": [[948, "polars.Series.clip"]], "clip_max() (polars.series method)": [[949, "polars.Series.clip_max"]], "clip_min() (polars.series method)": [[950, "polars.Series.clip_min"]], "clone() (polars.series method)": [[951, "polars.Series.clone"]], "cos() (polars.series method)": [[952, "polars.Series.cos"]], "cosh() (polars.series method)": [[953, "polars.Series.cosh"]], "cot() (polars.series method)": [[954, "polars.Series.cot"]], "cum_max() (polars.series method)": [[955, "polars.Series.cum_max"]], "cum_min() (polars.series method)": [[956, "polars.Series.cum_min"]], "cum_prod() (polars.series method)": [[957, "polars.Series.cum_prod"]], "cum_sum() (polars.series method)": [[958, "polars.Series.cum_sum"]], "cummax() (polars.series method)": [[959, "polars.Series.cummax"]], "cummin() (polars.series method)": [[960, "polars.Series.cummin"]], "cumprod() (polars.series method)": [[961, "polars.Series.cumprod"]], "cumsum() (polars.series method)": [[962, "polars.Series.cumsum"]], "cumulative_eval() (polars.series method)": [[963, "polars.Series.cumulative_eval"]], "cut() (polars.series method)": [[964, "polars.Series.cut"]], "describe() (polars.series method)": [[965, "polars.Series.describe"]], "diff() (polars.series method)": [[966, "polars.Series.diff"]], "dot() (polars.series method)": [[967, "polars.Series.dot"]], "drop_nans() (polars.series method)": [[968, "polars.Series.drop_nans"]], "drop_nulls() (polars.series method)": [[969, "polars.Series.drop_nulls"]], "base_utc_offset() (polars.series.dt method)": [[970, "polars.Series.dt.base_utc_offset"]], "cast_time_unit() (polars.series.dt method)": [[971, "polars.Series.dt.cast_time_unit"]], "century() (polars.series.dt method)": [[972, "polars.Series.dt.century"]], "combine() (polars.series.dt method)": [[973, "polars.Series.dt.combine"]], "convert_time_zone() (polars.series.dt method)": [[974, "polars.Series.dt.convert_time_zone"]], "date() (polars.series.dt method)": [[975, "polars.Series.dt.date"]], "datetime() (polars.series.dt method)": [[976, "polars.Series.dt.datetime"]], "day() (polars.series.dt method)": [[977, "polars.Series.dt.day"]], "days() (polars.series.dt method)": [[978, "polars.Series.dt.days"]], "dst_offset() (polars.series.dt method)": [[979, "polars.Series.dt.dst_offset"]], "epoch() (polars.series.dt method)": [[980, "polars.Series.dt.epoch"]], "hour() (polars.series.dt method)": [[981, "polars.Series.dt.hour"]], "hours() (polars.series.dt method)": [[982, "polars.Series.dt.hours"]], "is_leap_year() (polars.series.dt method)": [[983, "polars.Series.dt.is_leap_year"]], "iso_year() (polars.series.dt method)": [[984, "polars.Series.dt.iso_year"]], "max() (polars.series.dt method)": [[985, "polars.Series.dt.max"]], "mean() (polars.series.dt method)": [[986, "polars.Series.dt.mean"]], "median() (polars.series.dt method)": [[987, "polars.Series.dt.median"]], "microsecond() (polars.series.dt method)": [[988, "polars.Series.dt.microsecond"]], "microseconds() (polars.series.dt method)": [[989, "polars.Series.dt.microseconds"]], "millennium() (polars.series.dt method)": [[990, "polars.Series.dt.millennium"]], "millisecond() (polars.series.dt method)": [[991, "polars.Series.dt.millisecond"]], "milliseconds() (polars.series.dt method)": [[992, "polars.Series.dt.milliseconds"]], "min() (polars.series.dt method)": [[993, "polars.Series.dt.min"]], "minute() (polars.series.dt method)": [[994, "polars.Series.dt.minute"]], "minutes() (polars.series.dt method)": [[995, "polars.Series.dt.minutes"]], "month() (polars.series.dt method)": [[996, "polars.Series.dt.month"]], "month_end() (polars.series.dt method)": [[997, "polars.Series.dt.month_end"]], "month_start() (polars.series.dt method)": [[998, "polars.Series.dt.month_start"]], "nanosecond() (polars.series.dt method)": [[999, "polars.Series.dt.nanosecond"]], "nanoseconds() (polars.series.dt method)": [[1000, "polars.Series.dt.nanoseconds"]], "offset_by() (polars.series.dt method)": [[1001, "polars.Series.dt.offset_by"]], "ordinal_day() (polars.series.dt method)": [[1002, "polars.Series.dt.ordinal_day"]], "quarter() (polars.series.dt method)": [[1003, "polars.Series.dt.quarter"]], "replace_time_zone() (polars.series.dt method)": [[1004, "polars.Series.dt.replace_time_zone"]], "round() (polars.series.dt method)": [[1005, "polars.Series.dt.round"]], "second() (polars.series.dt method)": [[1006, "polars.Series.dt.second"]], "seconds() (polars.series.dt method)": [[1007, "polars.Series.dt.seconds"]], "strftime() (polars.series.dt method)": [[1008, "polars.Series.dt.strftime"]], "time() (polars.series.dt method)": [[1009, "polars.Series.dt.time"]], "timestamp() (polars.series.dt method)": [[1010, "polars.Series.dt.timestamp"]], "to_string() (polars.series.dt method)": [[1011, "polars.Series.dt.to_string"]], "total_days() (polars.series.dt method)": [[1012, "polars.Series.dt.total_days"]], "total_hours() (polars.series.dt method)": [[1013, "polars.Series.dt.total_hours"]], "total_microseconds() (polars.series.dt method)": [[1014, "polars.Series.dt.total_microseconds"]], "total_milliseconds() (polars.series.dt method)": [[1015, "polars.Series.dt.total_milliseconds"]], "total_minutes() (polars.series.dt method)": [[1016, "polars.Series.dt.total_minutes"]], "total_nanoseconds() (polars.series.dt method)": [[1017, "polars.Series.dt.total_nanoseconds"]], "total_seconds() (polars.series.dt method)": [[1018, "polars.Series.dt.total_seconds"]], "truncate() (polars.series.dt method)": [[1019, "polars.Series.dt.truncate"]], "week() (polars.series.dt method)": [[1020, "polars.Series.dt.week"]], "weekday() (polars.series.dt method)": [[1021, "polars.Series.dt.weekday"]], "with_time_unit() (polars.series.dt method)": [[1022, "polars.Series.dt.with_time_unit"]], "year() (polars.series.dt method)": [[1023, "polars.Series.dt.year"]], "dtype (polars.series attribute)": [[1024, "polars.Series.dtype"]], "entropy() (polars.series method)": [[1025, "polars.Series.entropy"]], "equals() (polars.series method)": [[1026, "polars.Series.equals"]], "estimated_size() (polars.series method)": [[1027, "polars.Series.estimated_size"]], "ewm_mean() (polars.series method)": [[1028, "polars.Series.ewm_mean"]], "ewm_std() (polars.series method)": [[1029, "polars.Series.ewm_std"]], "ewm_var() (polars.series method)": [[1030, "polars.Series.ewm_var"]], "exp() (polars.series method)": [[1031, "polars.Series.exp"]], "explode() (polars.series method)": [[1032, "polars.Series.explode"]], "extend() (polars.series method)": [[1033, "polars.Series.extend"]], "extend_constant() (polars.series method)": [[1034, "polars.Series.extend_constant"]], "fill_nan() (polars.series method)": [[1035, "polars.Series.fill_nan"]], "fill_null() (polars.series method)": [[1036, "polars.Series.fill_null"]], "filter() (polars.series method)": [[1037, "polars.Series.filter"]], "flags (polars.series attribute)": [[1038, "polars.Series.flags"]], "floor() (polars.series method)": [[1039, "polars.Series.floor"]], "gather() (polars.series method)": [[1040, "polars.Series.gather"]], "gather_every() (polars.series method)": [[1041, "polars.Series.gather_every"]], "get_chunks() (polars.series method)": [[1042, "polars.Series.get_chunks"]], "has_validity() (polars.series method)": [[1043, "polars.Series.has_validity"]], "hash() (polars.series method)": [[1044, "polars.Series.hash"]], "head() (polars.series method)": [[1045, "polars.Series.head"]], "hist() (polars.series method)": [[1046, "polars.Series.hist"]], "implode() (polars.series method)": [[1047, "polars.Series.implode"]], "inner_dtype (polars.series attribute)": [[1048, "polars.Series.inner_dtype"]], "interpolate() (polars.series method)": [[1049, "polars.Series.interpolate"]], "is_between() (polars.series method)": [[1050, "polars.Series.is_between"]], "is_boolean() (polars.series method)": [[1051, "polars.Series.is_boolean"]], "is_duplicated() (polars.series method)": [[1052, "polars.Series.is_duplicated"]], "is_empty() (polars.series method)": [[1053, "polars.Series.is_empty"]], "is_finite() (polars.series method)": [[1054, "polars.Series.is_finite"]], "is_first() (polars.series method)": [[1055, "polars.Series.is_first"]], "is_first_distinct() (polars.series method)": [[1056, "polars.Series.is_first_distinct"]], "is_float() (polars.series method)": [[1057, "polars.Series.is_float"]], "is_in() (polars.series method)": [[1058, "polars.Series.is_in"]], "is_infinite() (polars.series method)": [[1059, "polars.Series.is_infinite"]], "is_integer() (polars.series method)": [[1060, "polars.Series.is_integer"]], "is_last() (polars.series method)": [[1061, "polars.Series.is_last"]], "is_last_distinct() (polars.series method)": [[1062, "polars.Series.is_last_distinct"]], "is_nan() (polars.series method)": [[1063, "polars.Series.is_nan"]], "is_not_nan() (polars.series method)": [[1064, "polars.Series.is_not_nan"]], "is_not_null() (polars.series method)": [[1065, "polars.Series.is_not_null"]], "is_null() (polars.series method)": [[1066, "polars.Series.is_null"]], "is_numeric() (polars.series method)": [[1067, "polars.Series.is_numeric"]], "is_sorted() (polars.series method)": [[1068, "polars.Series.is_sorted"]], "is_temporal() (polars.series method)": [[1069, "polars.Series.is_temporal"]], "is_unique() (polars.series method)": [[1070, "polars.Series.is_unique"]], "is_utf8() (polars.series method)": [[1071, "polars.Series.is_utf8"]], "item() (polars.series method)": [[1072, "polars.Series.item"]], "kurtosis() (polars.series method)": [[1073, "polars.Series.kurtosis"]], "len() (polars.series method)": [[1074, "polars.Series.len"]], "limit() (polars.series method)": [[1075, "polars.Series.limit"]], "all() (polars.series.list method)": [[1076, "polars.Series.list.all"]], "any() (polars.series.list method)": [[1077, "polars.Series.list.any"]], "arg_max() (polars.series.list method)": [[1078, "polars.Series.list.arg_max"]], "arg_min() (polars.series.list method)": [[1079, "polars.Series.list.arg_min"]], "concat() (polars.series.list method)": [[1080, "polars.Series.list.concat"]], "contains() (polars.series.list method)": [[1081, "polars.Series.list.contains"]], "count_match() (polars.series.list method)": [[1082, "polars.Series.list.count_match"]], "count_matches() (polars.series.list method)": [[1083, "polars.Series.list.count_matches"]], "diff() (polars.series.list method)": [[1084, "polars.Series.list.diff"]], "drop_nulls() (polars.series.list method)": [[1085, "polars.Series.list.drop_nulls"]], "eval() (polars.series.list method)": [[1086, "polars.Series.list.eval"]], "explode() (polars.series.list method)": [[1087, "polars.Series.list.explode"]], "first() (polars.series.list method)": [[1088, "polars.Series.list.first"]], "gather() (polars.series.list method)": [[1089, "polars.Series.list.gather"]], "get() (polars.series.list method)": [[1090, "polars.Series.list.get"]], "head() (polars.series.list method)": [[1091, "polars.Series.list.head"]], "join() (polars.series.list method)": [[1092, "polars.Series.list.join"]], "last() (polars.series.list method)": [[1093, "polars.Series.list.last"]], "len() (polars.series.list method)": [[1094, "polars.Series.list.len"]], "lengths() (polars.series.list method)": [[1095, "polars.Series.list.lengths"]], "max() (polars.series.list method)": [[1096, "polars.Series.list.max"]], "mean() (polars.series.list method)": [[1097, "polars.Series.list.mean"]], "median() (polars.series.list method)": [[1098, "polars.Series.list.median"]], "min() (polars.series.list method)": [[1099, "polars.Series.list.min"]], "reverse() (polars.series.list method)": [[1100, "polars.Series.list.reverse"]], "sample() (polars.series.list method)": [[1101, "polars.Series.list.sample"]], "set_difference() (polars.series.list method)": [[1102, "polars.Series.list.set_difference"]], "set_intersection() (polars.series.list method)": [[1103, "polars.Series.list.set_intersection"]], "set_symmetric_difference() (polars.series.list method)": [[1104, "polars.Series.list.set_symmetric_difference"]], "set_union() (polars.series.list method)": [[1105, "polars.Series.list.set_union"]], "shift() (polars.series.list method)": [[1106, "polars.Series.list.shift"]], "slice() (polars.series.list method)": [[1107, "polars.Series.list.slice"]], "sort() (polars.series.list method)": [[1108, "polars.Series.list.sort"]], "std() (polars.series.list method)": [[1109, "polars.Series.list.std"]], "sum() (polars.series.list method)": [[1110, "polars.Series.list.sum"]], "tail() (polars.series.list method)": [[1111, "polars.Series.list.tail"]], "take() (polars.series.list method)": [[1112, "polars.Series.list.take"]], "to_array() (polars.series.list method)": [[1113, "polars.Series.list.to_array"]], "to_struct() (polars.series.list method)": [[1114, "polars.Series.list.to_struct"]], "unique() (polars.series.list method)": [[1115, "polars.Series.list.unique"]], "var() (polars.series.list method)": [[1116, "polars.Series.list.var"]], "log() (polars.series method)": [[1117, "polars.Series.log"]], "log10() (polars.series method)": [[1118, "polars.Series.log10"]], "log1p() (polars.series method)": [[1119, "polars.Series.log1p"]], "lower_bound() (polars.series method)": [[1120, "polars.Series.lower_bound"]], "map_dict() (polars.series method)": [[1121, "polars.Series.map_dict"]], "map_elements() (polars.series method)": [[1122, "polars.Series.map_elements"]], "max() (polars.series method)": [[1123, "polars.Series.max"]], "mean() (polars.series method)": [[1124, "polars.Series.mean"]], "median() (polars.series method)": [[1125, "polars.Series.median"]], "min() (polars.series method)": [[1126, "polars.Series.min"]], "mode() (polars.series method)": [[1127, "polars.Series.mode"]], "n_chunks() (polars.series method)": [[1128, "polars.Series.n_chunks"]], "n_unique() (polars.series method)": [[1129, "polars.Series.n_unique"]], "name (polars.series attribute)": [[1130, "polars.Series.name"]], "nan_max() (polars.series method)": [[1131, "polars.Series.nan_max"]], "nan_min() (polars.series method)": [[1132, "polars.Series.nan_min"]], "new_from_index() (polars.series method)": [[1133, "polars.Series.new_from_index"]], "not_() (polars.series method)": [[1134, "polars.Series.not_"]], "null_count() (polars.series method)": [[1135, "polars.Series.null_count"]], "pct_change() (polars.series method)": [[1136, "polars.Series.pct_change"]], "peak_max() (polars.series method)": [[1137, "polars.Series.peak_max"]], "peak_min() (polars.series method)": [[1138, "polars.Series.peak_min"]], "product() (polars.series method)": [[1139, "polars.Series.product"]], "qcut() (polars.series method)": [[1140, "polars.Series.qcut"]], "quantile() (polars.series method)": [[1141, "polars.Series.quantile"]], "rank() (polars.series method)": [[1142, "polars.Series.rank"]], "rechunk() (polars.series method)": [[1143, "polars.Series.rechunk"]], "reinterpret() (polars.series method)": [[1144, "polars.Series.reinterpret"]], "rename() (polars.series method)": [[1145, "polars.Series.rename"]], "replace() (polars.series method)": [[1146, "polars.Series.replace"]], "reshape() (polars.series method)": [[1147, "polars.Series.reshape"]], "reverse() (polars.series method)": [[1148, "polars.Series.reverse"]], "rle() (polars.series method)": [[1149, "polars.Series.rle"]], "rle_id() (polars.series method)": [[1150, "polars.Series.rle_id"]], "rolling_apply() (polars.series method)": [[1151, "polars.Series.rolling_apply"]], "rolling_map() (polars.series method)": [[1152, "polars.Series.rolling_map"]], "rolling_max() (polars.series method)": [[1153, "polars.Series.rolling_max"]], "rolling_mean() (polars.series method)": [[1154, "polars.Series.rolling_mean"]], "rolling_median() (polars.series method)": [[1155, "polars.Series.rolling_median"]], "rolling_min() (polars.series method)": [[1156, "polars.Series.rolling_min"]], "rolling_quantile() (polars.series method)": [[1157, "polars.Series.rolling_quantile"]], "rolling_skew() (polars.series method)": [[1158, "polars.Series.rolling_skew"]], "rolling_std() (polars.series method)": [[1159, "polars.Series.rolling_std"]], "rolling_sum() (polars.series method)": [[1160, "polars.Series.rolling_sum"]], "rolling_var() (polars.series method)": [[1161, "polars.Series.rolling_var"]], "round() (polars.series method)": [[1162, "polars.Series.round"]], "round_sig_figs() (polars.series method)": [[1163, "polars.Series.round_sig_figs"]], "sample() (polars.series method)": [[1164, "polars.Series.sample"]], "scatter() (polars.series method)": [[1165, "polars.Series.scatter"]], "search_sorted() (polars.series method)": [[1166, "polars.Series.search_sorted"]], "series_equal() (polars.series method)": [[1167, "polars.Series.series_equal"]], "set() (polars.series method)": [[1168, "polars.Series.set"]], "set_at_idx() (polars.series method)": [[1169, "polars.Series.set_at_idx"]], "set_sorted() (polars.series method)": [[1170, "polars.Series.set_sorted"]], "shape (polars.series attribute)": [[1171, "polars.Series.shape"]], "shift() (polars.series method)": [[1172, "polars.Series.shift"]], "shift_and_fill() (polars.series method)": [[1173, "polars.Series.shift_and_fill"]], "shrink_dtype() (polars.series method)": [[1174, "polars.Series.shrink_dtype"]], "shrink_to_fit() (polars.series method)": [[1175, "polars.Series.shrink_to_fit"]], "shuffle() (polars.series method)": [[1176, "polars.Series.shuffle"]], "sign() (polars.series method)": [[1177, "polars.Series.sign"]], "sin() (polars.series method)": [[1178, "polars.Series.sin"]], "sinh() (polars.series method)": [[1179, "polars.Series.sinh"]], "skew() (polars.series method)": [[1180, "polars.Series.skew"]], "slice() (polars.series method)": [[1181, "polars.Series.slice"]], "sort() (polars.series method)": [[1182, "polars.Series.sort"]], "sqrt() (polars.series method)": [[1183, "polars.Series.sqrt"]], "std() (polars.series method)": [[1184, "polars.Series.std"]], "concat() (polars.series.str method)": [[1185, "polars.Series.str.concat"]], "contains() (polars.series.str method)": [[1186, "polars.Series.str.contains"]], "contains_any() (polars.series.str method)": [[1187, "polars.Series.str.contains_any"]], "count_match() (polars.series.str method)": [[1188, "polars.Series.str.count_match"]], "count_matches() (polars.series.str method)": [[1189, "polars.Series.str.count_matches"]], "decode() (polars.series.str method)": [[1190, "polars.Series.str.decode"]], "encode() (polars.series.str method)": [[1191, "polars.Series.str.encode"]], "ends_with() (polars.series.str method)": [[1192, "polars.Series.str.ends_with"]], "explode() (polars.series.str method)": [[1193, "polars.Series.str.explode"]], "extract() (polars.series.str method)": [[1194, "polars.Series.str.extract"]], "extract_all() (polars.series.str method)": [[1195, "polars.Series.str.extract_all"]], "extract_groups() (polars.series.str method)": [[1196, "polars.Series.str.extract_groups"]], "find() (polars.series.str method)": [[1197, "polars.Series.str.find"]], "json_decode() (polars.series.str method)": [[1198, "polars.Series.str.json_decode"]], "json_extract() (polars.series.str method)": [[1199, "polars.Series.str.json_extract"]], "json_path_match() (polars.series.str method)": [[1200, "polars.Series.str.json_path_match"]], "len_bytes() (polars.series.str method)": [[1201, "polars.Series.str.len_bytes"]], "len_chars() (polars.series.str method)": [[1202, "polars.Series.str.len_chars"]], "lengths() (polars.series.str method)": [[1203, "polars.Series.str.lengths"]], "ljust() (polars.series.str method)": [[1204, "polars.Series.str.ljust"]], "lstrip() (polars.series.str method)": [[1205, "polars.Series.str.lstrip"]], "n_chars() (polars.series.str method)": [[1206, "polars.Series.str.n_chars"]], "pad_end() (polars.series.str method)": [[1207, "polars.Series.str.pad_end"]], "pad_start() (polars.series.str method)": [[1208, "polars.Series.str.pad_start"]], "parse_int() (polars.series.str method)": [[1209, "polars.Series.str.parse_int"]], "replace() (polars.series.str method)": [[1210, "polars.Series.str.replace"]], "replace_all() (polars.series.str method)": [[1211, "polars.Series.str.replace_all"]], "replace_many() (polars.series.str method)": [[1212, "polars.Series.str.replace_many"]], "reverse() (polars.series.str method)": [[1213, "polars.Series.str.reverse"]], "rjust() (polars.series.str method)": [[1214, "polars.Series.str.rjust"]], "rstrip() (polars.series.str method)": [[1215, "polars.Series.str.rstrip"]], "slice() (polars.series.str method)": [[1216, "polars.Series.str.slice"]], "split() (polars.series.str method)": [[1217, "polars.Series.str.split"]], "split_exact() (polars.series.str method)": [[1218, "polars.Series.str.split_exact"]], "splitn() (polars.series.str method)": [[1219, "polars.Series.str.splitn"]], "starts_with() (polars.series.str method)": [[1220, "polars.Series.str.starts_with"]], "strip() (polars.series.str method)": [[1221, "polars.Series.str.strip"]], "strip_chars() (polars.series.str method)": [[1222, "polars.Series.str.strip_chars"]], "strip_chars_end() (polars.series.str method)": [[1223, "polars.Series.str.strip_chars_end"]], "strip_chars_start() (polars.series.str method)": [[1224, "polars.Series.str.strip_chars_start"]], "strip_prefix() (polars.series.str method)": [[1225, "polars.Series.str.strip_prefix"]], "strip_suffix() (polars.series.str method)": [[1226, "polars.Series.str.strip_suffix"]], "strptime() (polars.series.str method)": [[1227, "polars.Series.str.strptime"]], "to_date() (polars.series.str method)": [[1228, "polars.Series.str.to_date"]], "to_datetime() (polars.series.str method)": [[1229, "polars.Series.str.to_datetime"]], "to_decimal() (polars.series.str method)": [[1230, "polars.Series.str.to_decimal"]], "to_integer() (polars.series.str method)": [[1231, "polars.Series.str.to_integer"]], "to_lowercase() (polars.series.str method)": [[1232, "polars.Series.str.to_lowercase"]], "to_time() (polars.series.str method)": [[1233, "polars.Series.str.to_time"]], "to_titlecase() (polars.series.str method)": [[1234, "polars.Series.str.to_titlecase"]], "to_uppercase() (polars.series.str method)": [[1235, "polars.Series.str.to_uppercase"]], "zfill() (polars.series.str method)": [[1236, "polars.Series.str.zfill"]], "field() (polars.series.struct method)": [[1237, "polars.Series.struct.field"]], "fields (polars.series.struct attribute)": [[1238, "polars.Series.struct.fields"]], "json_encode() (polars.series.struct method)": [[1239, "polars.Series.struct.json_encode"]], "rename_fields() (polars.series.struct method)": [[1240, "polars.Series.struct.rename_fields"]], "schema (polars.series.struct attribute)": [[1241, "polars.Series.struct.schema"]], "unnest() (polars.series.struct method)": [[1242, "polars.Series.struct.unnest"]], "sum() (polars.series method)": [[1243, "polars.Series.sum"]], "tail() (polars.series method)": [[1244, "polars.Series.tail"]], "take() (polars.series method)": [[1245, "polars.Series.take"]], "take_every() (polars.series method)": [[1246, "polars.Series.take_every"]], "tan() (polars.series method)": [[1247, "polars.Series.tan"]], "tanh() (polars.series method)": [[1248, "polars.Series.tanh"]], "to_arrow() (polars.series method)": [[1249, "polars.Series.to_arrow"]], "to_dummies() (polars.series method)": [[1250, "polars.Series.to_dummies"]], "to_frame() (polars.series method)": [[1251, "polars.Series.to_frame"]], "to_init_repr() (polars.series method)": [[1252, "polars.Series.to_init_repr"]], "to_list() (polars.series method)": [[1253, "polars.Series.to_list"]], "to_numpy() (polars.series method)": [[1254, "polars.Series.to_numpy"]], "to_pandas() (polars.series method)": [[1255, "polars.Series.to_pandas"]], "to_physical() (polars.series method)": [[1256, "polars.Series.to_physical"]], "top_k() (polars.series method)": [[1257, "polars.Series.top_k"]], "unique() (polars.series method)": [[1258, "polars.Series.unique"]], "unique_counts() (polars.series method)": [[1259, "polars.Series.unique_counts"]], "upper_bound() (polars.series method)": [[1260, "polars.Series.upper_bound"]], "value_counts() (polars.series method)": [[1261, "polars.Series.value_counts"]], "var() (polars.series method)": [[1262, "polars.Series.var"]], "view() (polars.series method)": [[1263, "polars.Series.view"]], "zip_with() (polars.series method)": [[1264, "polars.Series.zip_with"]], "sqlcontext (class in polars)": [[1281, "polars.SQLContext"]], "__enter__() (polars.sqlcontext method)": [[1281, "polars.SQLContext.__enter__"]], "__exit__() (polars.sqlcontext method)": [[1281, "polars.SQLContext.__exit__"]], "__init__() (polars.sqlcontext method)": [[1281, "polars.SQLContext.__init__"]]}})